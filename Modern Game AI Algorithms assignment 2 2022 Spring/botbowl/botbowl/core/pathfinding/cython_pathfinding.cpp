/* Generated by Cython 3.0.0a10 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "botbowl/core/pathfinding/pathing_node.cpp",
            "botbowl/core/pathfinding/pathing_node.h"
        ],
        "include_dirs": [
            "botbowl/core/pathfinding"
        ],
        "language": "c++",
        "name": "botbowl.core.pathfinding.cython_pathfinding",
        "sources": [
            "botbowl/core/pathfinding/cython_pathfinding.pyx"
        ]
    },
    "module_name": "botbowl.core.pathfinding.cython_pathfinding"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#define CYTHON_ABI "3_0_0a10"
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030000AA
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(CYTHON_LIMITED_API)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS 1
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(p))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE(obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__botbowl__core__pathfinding__cython_pathfinding
#define __PYX_HAVE_API__botbowl__core__pathfinding__cython_pathfinding
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include <vector>
#include <queue>
#include <memory>
#include "pathing_node.cpp"
#include "pathing_node.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "botbowl/core/pathfinding/cython_pathfinding.pyx",
  "<stringsource>",
};
/* #### Code section: utility_code_proto_before_types ### */
/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path;
struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder;

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":29
 * 
 * from .pathing_node cimport Node, Square
 * ctypedef shared_ptr[Node] NodePtr             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::shared_ptr<node_ns::Node>  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr;

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":62
 * 
 * 
 * cdef class Path:             # <<<<<<<<<<<<<<
 *     cdef:
 *         NodePtr final_node
 */
struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path {
  PyObject_HEAD
  struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_vtab;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr final_node;
  PyObject *_steps;
  PyObject *_rolls;
  double prob;
  PyObject *block_dice;
  PyObject *handoff_roll;
  PyObject *foul_roll;
};


/* "botbowl/core/pathfinding/cython_pathfinding.pyx":148
 *     return path
 * 
 * cdef class Pathfinder:             # <<<<<<<<<<<<<<
 *     cdef public object game, player, players_on_pitch
 *     cdef bint trr, can_block, can_handoff, can_foul, target_found, target_is_int, target_is_square, has_target, directly_to_adjacent, is_stunty, carries_ball
 */
struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder {
  PyObject_HEAD
  struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_vtab;
  PyObject *game;
  PyObject *player;
  PyObject *players_on_pitch;
  int trr;
  int can_block;
  int can_handoff;
  int can_foul;
  int target_found;
  int target_is_int;
  int target_is_square;
  int has_target;
  int directly_to_adjacent;
  int is_stunty;
  int carries_ball;
  int ma;
  int gfis;
  int dodge_target;
  int pitch_width;
  int pitch_height;
  int endzone_x;
  double current_prob;
  int tzones[17][28];
  node_ns::Square ball_pos;
  node_ns::Square start_pos;
  node_ns::Square target_square;
  int target_x;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr locked_nodes[17][28];
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr nodes[17][28];
  std::priority_queue<__pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr>  open_set;
  std::map<double,std::vector<__pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr> >  risky_sets;
};



/* "botbowl/core/pathfinding/cython_pathfinding.pyx":62
 * 
 * 
 * cdef class Path:             # <<<<<<<<<<<<<<
 *     cdef:
 *         NodePtr final_node
 */

struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Path {
  void (*set_node)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr);
  PyObject *(*get_last_step)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *, int __pyx_skip_dispatch);
  void (*_collect_path)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *);
};
static struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_vtabptr_7botbowl_4core_11pathfinding_18cython_pathfinding_Path;


/* "botbowl/core/pathfinding/cython_pathfinding.pyx":148
 *     return path
 * 
 * cdef class Pathfinder:             # <<<<<<<<<<<<<<
 *     cdef public object game, player, players_on_pitch
 *     cdef bint trr, can_block, can_handoff, can_foul, target_found, target_is_int, target_is_square, has_target, directly_to_adjacent, is_stunty, carries_ball
 */

struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder {
  PyObject *(*get_path)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*get_paths)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, int __pyx_skip_dispatch);
  int (*_get_pickup_target)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, node_ns::Square);
  int (*_get_handoff_target)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, PyObject *);
  int (*_get_dodge_target)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, node_ns::Square, node_ns::Square);
  void (*_expand)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr);
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr (*_expand_node)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr, node_ns::Square, int);
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr (*_expand_move_node)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr, double, node_ns::Square);
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr (*_expand_foul_node)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr, node_ns::Square, PyObject *);
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr (*_expand_handoff_node)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr, node_ns::Square);
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr (*_expand_block_node)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr, double, node_ns::Square, PyObject *);
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr (*_expand_stand_up)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr);
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr (*_best)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr);
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr (*_dominant)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr);
  void (*_clear)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *);
  void (*_prepare_nodes)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *);
  void (*_expansion)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *);
  PyObject *(*_collect_paths)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *);
};
static struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_vtabptr_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // !CYTHON_VECTORCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) (&args[nargs])
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* MoveIfSupported.proto */
#if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#if !CYTHON_USE_MODULE_STATE
static PyTypeObject *__pyx_CyFunctionType = 0;
#endif
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_IsCyOrPyCFunction(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* RaiseUnboundLocalError.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
static CYTHON_UNUSED int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_Occurred(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str);
#else
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);
#endif

/* #### Code section: module_declarations ### */
static void __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_set_node(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_n); /* proto*/
static PyObject *__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_get_last_step(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path__collect_path(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_get_path(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, PyObject *__pyx_v_target, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_get_paths(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__get_pickup_target(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, node_ns::Square __pyx_v_to_pos); /* proto*/
static int __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__get_handoff_target(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, PyObject *__pyx_v_catcher); /* proto*/
static int __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__get_dodge_target(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, CYTHON_UNUSED node_ns::Square __pyx_v_from_pos, node_ns::Square __pyx_v_to_pos); /* proto*/
static void __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node); /* proto*/
static __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand_node(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node, node_ns::Square __pyx_v_direction, int __pyx_v_out_of_moves); /* proto*/
static __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand_move_node(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node, double __pyx_v_euclidean_distance, node_ns::Square __pyx_v_to_pos); /* proto*/
static __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand_foul_node(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node, node_ns::Square __pyx_v_to_pos, PyObject *__pyx_v_player_at); /* proto*/
static __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand_handoff_node(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node, node_ns::Square __pyx_v_to_pos); /* proto*/
static __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand_block_node(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node, double __pyx_v_euclidean_distance, node_ns::Square __pyx_v_to_pos, PyObject *__pyx_v_player_at); /* proto*/
static __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand_stand_up(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node); /* proto*/
static __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__best(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_a, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_b); /* proto*/
static __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__dominant(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_a, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_b); /* proto*/
static void __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__clear(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self); /* proto*/
static void __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__prepare_nodes(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self); /* proto*/
static void __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expansion(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__collect_paths(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self); /* proto*/

/* Module declarations from "libcpp.utility" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.map" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.vector" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.queue" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "libcpp.memory" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "cython" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "botbowl.core.pathfinding.pathing_node" */
#if !CYTHON_USE_MODULE_STATE
#endif

/* Module declarations from "botbowl.core.pathfinding.cython_pathfinding" */
#if !CYTHON_USE_MODULE_STATE
static PyTypeObject *__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path = 0;
static PyTypeObject *__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder = 0;
#endif
static node_ns::Square __pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_DIRECTIONS[8];
static int __pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_agi_table[11];
static PyObject *__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_to_botbowl_Square(node_ns::Square); /*proto*/
static node_ns::Square __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_from_botbowl_Square(PyObject *); /*proto*/
static struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_create_path(__pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(std::vector<int>  const &); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "botbowl.core.pathfinding.cython_pathfinding"
extern int __pyx_module_is_main_botbowl__core__pathfinding__cython_pathfinding;
int __pyx_module_is_main_botbowl__core__pathfinding__cython_pathfinding = 0;

/* Implementation of "botbowl.core.pathfinding.cython_pathfinding" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_reversed;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_MemoryError;
/* #### Code section: string_decls ### */
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k__3[] = "";
static const char __pyx_k__4[] = ", ";
static const char __pyx_k__5[] = ")";
static const char __pyx_k__7[] = "*";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_up[] = "up";
static const char __pyx_k__10[] = ".";
static const char __pyx_k__31[] = "?";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_trr[] = "trr";
static const char __pyx_k_Path[] = "Path";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_core[] = "core";
static const char __pyx_k_foul[] = "foul";
static const char __pyx_k_game[] = "game";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_prob[] = "prob";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_team[] = "team";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_DODGE[] = "DODGE";
static const char __pyx_k_Skill[] = "Skill";
static const char __pyx_k_arena[] = "arena";
static const char __pyx_k_blitz[] = "blitz";
static const char __pyx_k_board[] = "board";
static const char __pyx_k_model[] = "model";
static const char __pyx_k_paths[] = "paths";
static const char __pyx_k_pitch[] = "pitch";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_rolls[] = "rolls";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_steps[] = "steps";
static const char __pyx_k_table[] = "table";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_STUNTY[] = "STUNTY";
static const char __pyx_k_Square[] = "Square";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_finder[] = "finder";
static const char __pyx_k_get_ag[] = "get_ag";
static const char __pyx_k_get_av[] = "get_av";
static const char __pyx_k_height[] = "height";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_player[] = "player";
static const char __pyx_k_prob_2[] = ", prob=";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_target[] = "target";
static const char __pyx_k_JUMP_UP[] = "JUMP_UP";
static const char __pyx_k_botbowl[] = "botbowl";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_handoff[] = "handoff";
static const char __pyx_k_weather[] = "weather";
static const char __pyx_k_attacker[] = "attacker";
static const char __pyx_k_can_foul[] = "can_foul";
static const char __pyx_k_defender[] = "defender";
static const char __pyx_k_get_ball[] = "get_ball";
static const char __pyx_k_get_path[] = "get_path";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_is_empty[] = "is_empty";
static const char __pyx_k_position[] = "position";
static const char __pyx_k_reversed[] = "reversed";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_SURE_FEET[] = "SURE_FEET";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_can_block[] = "can_block";
static const char __pyx_k_can_catch[] = "can_catch";
static const char __pyx_k_foul_roll[] = "foul_roll";
static const char __pyx_k_get_paths[] = "get_paths";
static const char __pyx_k_has_skill[] = "has_skill";
static const char __pyx_k_home_team[] = "home_team";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_on_ground[] = "on_ground";
static const char __pyx_k_orig_ball[] = "orig_ball";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_Pathfinder[] = "Pathfinder";
static const char __pyx_k_SURE_HANDS[] = "SURE_HANDS";
static const char __pyx_k_block_dice[] = "block_dice";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_Path_target[] = "Path(target=";
static const char __pyx_k_WeatherType[] = "WeatherType";
static const char __pyx_k_alter_state[] = "_alter_state";
static const char __pyx_k_can_handoff[] = "can_handoff";
static const char __pyx_k_foul_roll_2[] = ", foul_roll=";
static const char __pyx_k_orig_player[] = "orig_player";
static const char __pyx_k_reset_state[] = "_reset_state";
static const char __pyx_k_used_skills[] = "used_skills";
static const char __pyx_k_POURING_RAIN[] = "POURING_RAIN";
static const char __pyx_k_block_dice_2[] = ", block_dice=";
static const char __pyx_k_handoff_roll[] = "handoff_roll";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_Path___reduce[] = "Path.__reduce__";
static const char __pyx_k_Path_is_empty[] = "Path.is_empty";
static const char __pyx_k_forward_model[] = "forward_model";
static const char __pyx_k_from_position[] = "from_position";
static const char __pyx_k_get_all_paths[] = "get_all_paths";
static const char __pyx_k_get_last_step[] = "get_last_step";
static const char __pyx_k_num_gfis_left[] = "num_gfis_left";
static const char __pyx_k_recreate_self[] = "recreate_self";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_handoff_roll_2[] = ", handoff_roll=";
static const char __pyx_k_num_assists_at[] = "num_assists_at";
static const char __pyx_k_num_moves_left[] = "num_moves_left";
static const char __pyx_k_num_moves_used[] = "num_moves_used";
static const char __pyx_k_get_safest_path[] = "get_safest_path";
static const char __pyx_k_has_tackle_zone[] = "has_tackle_zone";
static const char __pyx_k_immutable_types[] = "immutable_types";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_get_ball_carrier[] = "get_ball_carrier";
static const char __pyx_k_allow_team_reroll[] = "allow_team_reroll";
static const char __pyx_k_get_opp_endzone_x[] = "get_opp_endzone_x";
static const char __pyx_k_num_block_dice_at[] = "num_block_dice_at";
static const char __pyx_k_Path_get_last_step[] = "Path.get_last_step";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_botbowl_core_model[] = "botbowl.core.model";
static const char __pyx_k_botbowl_core_table[] = "botbowl.core.table";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_python_pathfinding[] = "python_pathfinding";
static const char __pyx_k_Pathfinder_get_path[] = "Pathfinder.get_path";
static const char __pyx_k_get_catch_modifiers[] = "get_catch_modifiers";
static const char __pyx_k_Pathfinder_get_paths[] = "Pathfinder.get_paths";
static const char __pyx_k_directly_to_adjacent[] = "directly_to_adjacent";
static const char __pyx_k_get_adjacent_squares[] = "get_adjacent_squares";
static const char __pyx_k_get_players_on_pitch[] = "get_players_on_pitch";
static const char __pyx_k_is_handoff_available[] = "is_handoff_available";
static const char __pyx_k_get_stand_up_modifier[] = "get_stand_up_modifier";
static const char __pyx_k_Pathfinder___reduce_cython[] = "Pathfinder.__reduce_cython__";
static const char __pyx_k_botbowl_core_forward_model[] = "botbowl.core.forward_model";
static const char __pyx_k_get_safest_path_to_endzone[] = "get_safest_path_to_endzone";
static const char __pyx_k_Pathfinder___setstate_cython[] = "Pathfinder.__setstate_cython__";
static const char __pyx_k_reduce___locals_recreate_self[] = "__reduce__.<locals>.recreate_self";
static const char __pyx_k_Author_Mattias_Bermell_Year_202[] = "\n==========================\nAuthor: Mattias Bermell\nYear: 2021\n==========================\nThis module contains the pathfinding algorithm implemented in cython\nwhich compiles to a faster module. The algorithm is intended to generate\nthe exact same result as the python implementation.\n";
static const char __pyx_k_botbowl_core_pathfinding_cython[] = "botbowl/core/pathfinding/cython_pathfinding.pyx";
static const char __pyx_k_self_ball_pos_self_locked_nodes[] = "self.ball_pos,self.locked_nodes,self.nodes,self.open_set,self.risky_sets,self.start_pos,self.target_square cannot be converted to a Python object for pickling";
static const char __pyx_k_botbowl_core_pathfinding_cython_2[] = "botbowl.core.pathfinding.cython_pathfinding";
#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_n_s_DODGE;
static PyObject *__pyx_n_s_JUMP_UP;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_n_s_POURING_RAIN;
static PyObject *__pyx_n_s_Path;
static PyObject *__pyx_n_s_Path___reduce;
static PyObject *__pyx_n_s_Path_get_last_step;
static PyObject *__pyx_n_s_Path_is_empty;
static PyObject *__pyx_kp_u_Path_target;
static PyObject *__pyx_n_s_Pathfinder;
static PyObject *__pyx_n_s_Pathfinder___reduce_cython;
static PyObject *__pyx_n_s_Pathfinder___setstate_cython;
static PyObject *__pyx_n_s_Pathfinder_get_path;
static PyObject *__pyx_n_s_Pathfinder_get_paths;
static PyObject *__pyx_n_s_STUNTY;
static PyObject *__pyx_n_s_SURE_FEET;
static PyObject *__pyx_n_s_SURE_HANDS;
static PyObject *__pyx_n_s_Skill;
static PyObject *__pyx_n_s_Square;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_WeatherType;
static PyObject *__pyx_kp_u__10;
static PyObject *__pyx_kp_s__3;
static PyObject *__pyx_n_s__31;
static PyObject *__pyx_kp_u__4;
static PyObject *__pyx_kp_u__5;
static PyObject *__pyx_n_s__7;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_allow_team_reroll;
static PyObject *__pyx_n_s_alter_state;
static PyObject *__pyx_n_s_arena;
static PyObject *__pyx_n_s_asyncio_coroutines;
static PyObject *__pyx_n_s_attacker;
static PyObject *__pyx_n_s_blitz;
static PyObject *__pyx_n_s_block_dice;
static PyObject *__pyx_kp_u_block_dice_2;
static PyObject *__pyx_n_s_board;
static PyObject *__pyx_n_s_botbowl;
static PyObject *__pyx_n_s_botbowl_core_forward_model;
static PyObject *__pyx_n_s_botbowl_core_model;
static PyObject *__pyx_kp_s_botbowl_core_pathfinding_cython;
static PyObject *__pyx_n_s_botbowl_core_pathfinding_cython_2;
static PyObject *__pyx_n_s_botbowl_core_table;
static PyObject *__pyx_n_s_can_block;
static PyObject *__pyx_n_s_can_catch;
static PyObject *__pyx_n_s_can_foul;
static PyObject *__pyx_n_s_can_handoff;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_core;
static PyObject *__pyx_n_s_defender;
static PyObject *__pyx_n_s_directly_to_adjacent;
static PyObject *__pyx_kp_u_disable;
static PyObject *__pyx_kp_u_enable;
static PyObject *__pyx_n_s_finder;
static PyObject *__pyx_n_s_forward_model;
static PyObject *__pyx_n_s_foul;
static PyObject *__pyx_n_s_foul_roll;
static PyObject *__pyx_kp_u_foul_roll_2;
static PyObject *__pyx_n_s_from_position;
static PyObject *__pyx_n_s_game;
static PyObject *__pyx_kp_u_gc;
static PyObject *__pyx_n_s_get_adjacent_squares;
static PyObject *__pyx_n_s_get_ag;
static PyObject *__pyx_n_s_get_all_paths;
static PyObject *__pyx_n_s_get_av;
static PyObject *__pyx_n_s_get_ball;
static PyObject *__pyx_n_s_get_ball_carrier;
static PyObject *__pyx_n_s_get_catch_modifiers;
static PyObject *__pyx_n_s_get_last_step;
static PyObject *__pyx_n_s_get_opp_endzone_x;
static PyObject *__pyx_n_s_get_path;
static PyObject *__pyx_n_s_get_paths;
static PyObject *__pyx_n_s_get_players_on_pitch;
static PyObject *__pyx_n_s_get_safest_path;
static PyObject *__pyx_n_s_get_safest_path_to_endzone;
static PyObject *__pyx_n_s_get_stand_up_modifier;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_handoff;
static PyObject *__pyx_n_s_handoff_roll;
static PyObject *__pyx_kp_u_handoff_roll_2;
static PyObject *__pyx_n_s_has_skill;
static PyObject *__pyx_n_s_has_tackle_zone;
static PyObject *__pyx_n_s_height;
static PyObject *__pyx_n_s_home_team;
static PyObject *__pyx_n_s_immutable_types;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_initializing;
static PyObject *__pyx_n_s_is_coroutine;
static PyObject *__pyx_n_s_is_empty;
static PyObject *__pyx_n_s_is_handoff_available;
static PyObject *__pyx_kp_u_isenabled;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_model;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_num_assists_at;
static PyObject *__pyx_n_s_num_block_dice_at;
static PyObject *__pyx_n_s_num_gfis_left;
static PyObject *__pyx_n_s_num_moves_left;
static PyObject *__pyx_n_s_num_moves_used;
static PyObject *__pyx_n_s_on_ground;
static PyObject *__pyx_n_s_orig_ball;
static PyObject *__pyx_n_s_orig_player;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_paths;
static PyObject *__pyx_n_s_pitch;
static PyObject *__pyx_n_s_player;
static PyObject *__pyx_n_s_position;
static PyObject *__pyx_n_s_prob;
static PyObject *__pyx_kp_u_prob_2;
static PyObject *__pyx_n_s_python_pathfinding;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_recreate_self;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce___locals_recreate_self;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_reset_state;
static PyObject *__pyx_n_s_reversed;
static PyObject *__pyx_n_s_rolls;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self_ball_pos_self_locked_nodes;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_spec;
static PyObject *__pyx_n_s_state;
static PyObject *__pyx_n_s_steps;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_table;
static PyObject *__pyx_n_s_target;
static PyObject *__pyx_n_s_team;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_trr;
static PyObject *__pyx_n_s_up;
static PyObject *__pyx_n_s_used_skills;
static PyObject *__pyx_n_s_weather;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
#endif
/* #### Code section: decls ### */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_get_last_step(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_5steps___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_5rolls___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_2__len__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_4is_empty(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10__reduce___recreate_self(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_steps, PyObject *__pyx_v_rolls, PyObject *__pyx_v_block_dice, PyObject *__pyx_v_foul_roll, PyObject *__pyx_v_handoff_roll, PyObject *__pyx_v_prob); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6__reduce__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_8__eq__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10__repr__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_steps___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto */
static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_steps_2__set__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_steps_4__del__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_rolls___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto */
static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_rolls_2__set__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_rolls_4__del__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_4prob___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto */
static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_4prob_2__set__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10block_dice___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto */
static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10block_dice_2__set__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10block_dice_4__del__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_12handoff_roll___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto */
static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_12handoff_roll_2__set__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_12handoff_roll_4__del__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9foul_roll___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto */
static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9foul_roll_2__set__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9foul_roll_4__del__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self); /* proto */
static void __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder___dealloc__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self); /* proto */
static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_2__init__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, PyObject *__pyx_v_game, PyObject *__pyx_v_player, PyObject *__pyx_v_trr, PyObject *__pyx_v_directly_to_adjacent, PyObject *__pyx_v_can_block, PyObject *__pyx_v_can_handoff, PyObject *__pyx_v_can_foul); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4get_path(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, PyObject *__pyx_v_target); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6get_paths(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4game___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self); /* proto */
static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4game_2__set__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4game_4__del__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6player___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self); /* proto */
static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6player_2__set__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6player_4__del__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_16players_on_pitch___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self); /* proto */
static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_16players_on_pitch_2__set__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_16players_on_pitch_4__del__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_get_safest_path(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_game, PyObject *__pyx_v_player, PyObject *__pyx_v_position, PyObject *__pyx_v_from_position, PyObject *__pyx_v_allow_team_reroll, PyObject *__pyx_v_num_moves_used, PyObject *__pyx_v_blitz); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_2get_safest_path_to_endzone(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_game, PyObject *__pyx_v_player, PyObject *__pyx_v_from_position, PyObject *__pyx_v_allow_team_reroll, PyObject *__pyx_v_num_moves_used); /* proto */
static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4get_all_paths(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_game, PyObject *__pyx_v_player, PyObject *__pyx_v_from_position, PyObject *__pyx_v_allow_team_reroll, PyObject *__pyx_v_num_moves_used, PyObject *__pyx_v_blitz); /* proto */
static PyObject *__pyx_tp_new_7botbowl_4core_11pathfinding_18cython_pathfinding_Path(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_4;
#endif
#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_codeobj__2;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__29;
#endif
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
#if CYTHON_USE_MODULE_STATE
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  PyTypeObject *__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path;
  PyObject *__pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Path;
  PyTypeObject *__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder;
  PyObject *__pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder;
  PyObject *__pyx_n_s_DODGE;
  PyObject *__pyx_n_s_JUMP_UP;
  PyObject *__pyx_n_s_MemoryError;
  PyObject *__pyx_n_s_POURING_RAIN;
  PyObject *__pyx_n_s_Path;
  PyObject *__pyx_n_s_Path___reduce;
  PyObject *__pyx_n_s_Path_get_last_step;
  PyObject *__pyx_n_s_Path_is_empty;
  PyObject *__pyx_kp_u_Path_target;
  PyObject *__pyx_n_s_Pathfinder;
  PyObject *__pyx_n_s_Pathfinder___reduce_cython;
  PyObject *__pyx_n_s_Pathfinder___setstate_cython;
  PyObject *__pyx_n_s_Pathfinder_get_path;
  PyObject *__pyx_n_s_Pathfinder_get_paths;
  PyObject *__pyx_n_s_STUNTY;
  PyObject *__pyx_n_s_SURE_FEET;
  PyObject *__pyx_n_s_SURE_HANDS;
  PyObject *__pyx_n_s_Skill;
  PyObject *__pyx_n_s_Square;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_s_WeatherType;
  PyObject *__pyx_kp_u__10;
  PyObject *__pyx_kp_s__3;
  PyObject *__pyx_n_s__31;
  PyObject *__pyx_kp_u__4;
  PyObject *__pyx_kp_u__5;
  PyObject *__pyx_n_s__7;
  PyObject *__pyx_n_s_add;
  PyObject *__pyx_n_s_allow_team_reroll;
  PyObject *__pyx_n_s_alter_state;
  PyObject *__pyx_n_s_arena;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_attacker;
  PyObject *__pyx_n_s_blitz;
  PyObject *__pyx_n_s_block_dice;
  PyObject *__pyx_kp_u_block_dice_2;
  PyObject *__pyx_n_s_board;
  PyObject *__pyx_n_s_botbowl;
  PyObject *__pyx_n_s_botbowl_core_forward_model;
  PyObject *__pyx_n_s_botbowl_core_model;
  PyObject *__pyx_kp_s_botbowl_core_pathfinding_cython;
  PyObject *__pyx_n_s_botbowl_core_pathfinding_cython_2;
  PyObject *__pyx_n_s_botbowl_core_table;
  PyObject *__pyx_n_s_can_block;
  PyObject *__pyx_n_s_can_catch;
  PyObject *__pyx_n_s_can_foul;
  PyObject *__pyx_n_s_can_handoff;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_copy;
  PyObject *__pyx_n_s_core;
  PyObject *__pyx_n_s_defender;
  PyObject *__pyx_n_s_directly_to_adjacent;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_finder;
  PyObject *__pyx_n_s_forward_model;
  PyObject *__pyx_n_s_foul;
  PyObject *__pyx_n_s_foul_roll;
  PyObject *__pyx_kp_u_foul_roll_2;
  PyObject *__pyx_n_s_from_position;
  PyObject *__pyx_n_s_game;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_get_adjacent_squares;
  PyObject *__pyx_n_s_get_ag;
  PyObject *__pyx_n_s_get_all_paths;
  PyObject *__pyx_n_s_get_av;
  PyObject *__pyx_n_s_get_ball;
  PyObject *__pyx_n_s_get_ball_carrier;
  PyObject *__pyx_n_s_get_catch_modifiers;
  PyObject *__pyx_n_s_get_last_step;
  PyObject *__pyx_n_s_get_opp_endzone_x;
  PyObject *__pyx_n_s_get_path;
  PyObject *__pyx_n_s_get_paths;
  PyObject *__pyx_n_s_get_players_on_pitch;
  PyObject *__pyx_n_s_get_safest_path;
  PyObject *__pyx_n_s_get_safest_path_to_endzone;
  PyObject *__pyx_n_s_get_stand_up_modifier;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_handoff;
  PyObject *__pyx_n_s_handoff_roll;
  PyObject *__pyx_kp_u_handoff_roll_2;
  PyObject *__pyx_n_s_has_skill;
  PyObject *__pyx_n_s_has_tackle_zone;
  PyObject *__pyx_n_s_height;
  PyObject *__pyx_n_s_home_team;
  PyObject *__pyx_n_s_immutable_types;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_is_empty;
  PyObject *__pyx_n_s_is_handoff_available;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_model;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_num_assists_at;
  PyObject *__pyx_n_s_num_block_dice_at;
  PyObject *__pyx_n_s_num_gfis_left;
  PyObject *__pyx_n_s_num_moves_left;
  PyObject *__pyx_n_s_num_moves_used;
  PyObject *__pyx_n_s_on_ground;
  PyObject *__pyx_n_s_orig_ball;
  PyObject *__pyx_n_s_orig_player;
  PyObject *__pyx_n_s_path;
  PyObject *__pyx_n_s_paths;
  PyObject *__pyx_n_s_pitch;
  PyObject *__pyx_n_s_player;
  PyObject *__pyx_n_s_position;
  PyObject *__pyx_n_s_prob;
  PyObject *__pyx_kp_u_prob_2;
  PyObject *__pyx_n_s_python_pathfinding;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_recreate_self;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce___locals_recreate_self;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_reset_state;
  PyObject *__pyx_n_s_reversed;
  PyObject *__pyx_n_s_rolls;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self_ball_pos_self_locked_nodes;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_state;
  PyObject *__pyx_n_s_steps;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_table;
  PyObject *__pyx_n_s_target;
  PyObject *__pyx_n_s_team;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_trr;
  PyObject *__pyx_n_s_up;
  PyObject *__pyx_n_s_used_skills;
  PyObject *__pyx_n_s_weather;
  PyObject *__pyx_n_s_width;
  PyObject *__pyx_n_s_x;
  PyObject *__pyx_n_s_y;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_2;
  PyObject *__pyx_int_4;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__6;
  PyObject *__pyx_tuple__8;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__16;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__27;
  PyObject *__pyx_tuple__28;
  PyObject *__pyx_tuple__30;
  PyObject *__pyx_codeobj__2;
  PyObject *__pyx_codeobj__12;
  PyObject *__pyx_codeobj__13;
  PyObject *__pyx_codeobj__15;
  PyObject *__pyx_codeobj__17;
  PyObject *__pyx_codeobj__18;
  PyObject *__pyx_codeobj__19;
  PyObject *__pyx_codeobj__21;
  PyObject *__pyx_codeobj__23;
  PyObject *__pyx_codeobj__26;
  PyObject *__pyx_codeobj__29;
} __pyx_mstate;

#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path);
  Py_CLEAR(clear_module_state->__pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Path);
  Py_CLEAR(clear_module_state->__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder);
  Py_CLEAR(clear_module_state->__pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder);
  Py_CLEAR(clear_module_state->__pyx_n_s_DODGE);
  Py_CLEAR(clear_module_state->__pyx_n_s_JUMP_UP);
  Py_CLEAR(clear_module_state->__pyx_n_s_MemoryError);
  Py_CLEAR(clear_module_state->__pyx_n_s_POURING_RAIN);
  Py_CLEAR(clear_module_state->__pyx_n_s_Path);
  Py_CLEAR(clear_module_state->__pyx_n_s_Path___reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_Path_get_last_step);
  Py_CLEAR(clear_module_state->__pyx_n_s_Path_is_empty);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Path_target);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pathfinder);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pathfinder___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pathfinder___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pathfinder_get_path);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pathfinder_get_paths);
  Py_CLEAR(clear_module_state->__pyx_n_s_STUNTY);
  Py_CLEAR(clear_module_state->__pyx_n_s_SURE_FEET);
  Py_CLEAR(clear_module_state->__pyx_n_s_SURE_HANDS);
  Py_CLEAR(clear_module_state->__pyx_n_s_Skill);
  Py_CLEAR(clear_module_state->__pyx_n_s_Square);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_WeatherType);
  Py_CLEAR(clear_module_state->__pyx_kp_u__10);
  Py_CLEAR(clear_module_state->__pyx_kp_s__3);
  Py_CLEAR(clear_module_state->__pyx_n_s__31);
  Py_CLEAR(clear_module_state->__pyx_kp_u__4);
  Py_CLEAR(clear_module_state->__pyx_kp_u__5);
  Py_CLEAR(clear_module_state->__pyx_n_s__7);
  Py_CLEAR(clear_module_state->__pyx_n_s_add);
  Py_CLEAR(clear_module_state->__pyx_n_s_allow_team_reroll);
  Py_CLEAR(clear_module_state->__pyx_n_s_alter_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_arena);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_attacker);
  Py_CLEAR(clear_module_state->__pyx_n_s_blitz);
  Py_CLEAR(clear_module_state->__pyx_n_s_block_dice);
  Py_CLEAR(clear_module_state->__pyx_kp_u_block_dice_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_board);
  Py_CLEAR(clear_module_state->__pyx_n_s_botbowl);
  Py_CLEAR(clear_module_state->__pyx_n_s_botbowl_core_forward_model);
  Py_CLEAR(clear_module_state->__pyx_n_s_botbowl_core_model);
  Py_CLEAR(clear_module_state->__pyx_kp_s_botbowl_core_pathfinding_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_botbowl_core_pathfinding_cython_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_botbowl_core_table);
  Py_CLEAR(clear_module_state->__pyx_n_s_can_block);
  Py_CLEAR(clear_module_state->__pyx_n_s_can_catch);
  Py_CLEAR(clear_module_state->__pyx_n_s_can_foul);
  Py_CLEAR(clear_module_state->__pyx_n_s_can_handoff);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_copy);
  Py_CLEAR(clear_module_state->__pyx_n_s_core);
  Py_CLEAR(clear_module_state->__pyx_n_s_defender);
  Py_CLEAR(clear_module_state->__pyx_n_s_directly_to_adjacent);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_finder);
  Py_CLEAR(clear_module_state->__pyx_n_s_forward_model);
  Py_CLEAR(clear_module_state->__pyx_n_s_foul);
  Py_CLEAR(clear_module_state->__pyx_n_s_foul_roll);
  Py_CLEAR(clear_module_state->__pyx_kp_u_foul_roll_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_from_position);
  Py_CLEAR(clear_module_state->__pyx_n_s_game);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_adjacent_squares);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_ag);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_all_paths);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_av);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_ball);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_ball_carrier);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_catch_modifiers);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_last_step);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_opp_endzone_x);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_path);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_paths);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_players_on_pitch);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_safest_path);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_safest_path_to_endzone);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_stand_up_modifier);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_handoff);
  Py_CLEAR(clear_module_state->__pyx_n_s_handoff_roll);
  Py_CLEAR(clear_module_state->__pyx_kp_u_handoff_roll_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_has_skill);
  Py_CLEAR(clear_module_state->__pyx_n_s_has_tackle_zone);
  Py_CLEAR(clear_module_state->__pyx_n_s_height);
  Py_CLEAR(clear_module_state->__pyx_n_s_home_team);
  Py_CLEAR(clear_module_state->__pyx_n_s_immutable_types);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_empty);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_handoff_available);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_model);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_assists_at);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_block_dice_at);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_gfis_left);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_moves_left);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_moves_used);
  Py_CLEAR(clear_module_state->__pyx_n_s_on_ground);
  Py_CLEAR(clear_module_state->__pyx_n_s_orig_ball);
  Py_CLEAR(clear_module_state->__pyx_n_s_orig_player);
  Py_CLEAR(clear_module_state->__pyx_n_s_path);
  Py_CLEAR(clear_module_state->__pyx_n_s_paths);
  Py_CLEAR(clear_module_state->__pyx_n_s_pitch);
  Py_CLEAR(clear_module_state->__pyx_n_s_player);
  Py_CLEAR(clear_module_state->__pyx_n_s_position);
  Py_CLEAR(clear_module_state->__pyx_n_s_prob);
  Py_CLEAR(clear_module_state->__pyx_kp_u_prob_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_python_pathfinding);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_recreate_self);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce___locals_recreate_self);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_reset_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_reversed);
  Py_CLEAR(clear_module_state->__pyx_n_s_rolls);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self_ball_pos_self_locked_nodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_steps);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_table);
  Py_CLEAR(clear_module_state->__pyx_n_s_target);
  Py_CLEAR(clear_module_state->__pyx_n_s_team);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_trr);
  Py_CLEAR(clear_module_state->__pyx_n_s_up);
  Py_CLEAR(clear_module_state->__pyx_n_s_used_skills);
  Py_CLEAR(clear_module_state->__pyx_n_s_weather);
  Py_CLEAR(clear_module_state->__pyx_n_s_width);
  Py_CLEAR(clear_module_state->__pyx_n_s_x);
  Py_CLEAR(clear_module_state->__pyx_n_s_y);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_2);
  Py_CLEAR(clear_module_state->__pyx_int_4);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__6);
  Py_CLEAR(clear_module_state->__pyx_tuple__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__16);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_tuple__27);
  Py_CLEAR(clear_module_state->__pyx_tuple__28);
  Py_CLEAR(clear_module_state->__pyx_tuple__30);
  Py_CLEAR(clear_module_state->__pyx_codeobj__2);
  Py_CLEAR(clear_module_state->__pyx_codeobj__12);
  Py_CLEAR(clear_module_state->__pyx_codeobj__13);
  Py_CLEAR(clear_module_state->__pyx_codeobj__15);
  Py_CLEAR(clear_module_state->__pyx_codeobj__17);
  Py_CLEAR(clear_module_state->__pyx_codeobj__18);
  Py_CLEAR(clear_module_state->__pyx_codeobj__19);
  Py_CLEAR(clear_module_state->__pyx_codeobj__21);
  Py_CLEAR(clear_module_state->__pyx_codeobj__23);
  Py_CLEAR(clear_module_state->__pyx_codeobj__26);
  Py_CLEAR(clear_module_state->__pyx_codeobj__29);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path);
  Py_VISIT(traverse_module_state->__pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Path);
  Py_VISIT(traverse_module_state->__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder);
  Py_VISIT(traverse_module_state->__pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder);
  Py_VISIT(traverse_module_state->__pyx_n_s_DODGE);
  Py_VISIT(traverse_module_state->__pyx_n_s_JUMP_UP);
  Py_VISIT(traverse_module_state->__pyx_n_s_MemoryError);
  Py_VISIT(traverse_module_state->__pyx_n_s_POURING_RAIN);
  Py_VISIT(traverse_module_state->__pyx_n_s_Path);
  Py_VISIT(traverse_module_state->__pyx_n_s_Path___reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_Path_get_last_step);
  Py_VISIT(traverse_module_state->__pyx_n_s_Path_is_empty);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Path_target);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pathfinder);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pathfinder___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pathfinder___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pathfinder_get_path);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pathfinder_get_paths);
  Py_VISIT(traverse_module_state->__pyx_n_s_STUNTY);
  Py_VISIT(traverse_module_state->__pyx_n_s_SURE_FEET);
  Py_VISIT(traverse_module_state->__pyx_n_s_SURE_HANDS);
  Py_VISIT(traverse_module_state->__pyx_n_s_Skill);
  Py_VISIT(traverse_module_state->__pyx_n_s_Square);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_WeatherType);
  Py_VISIT(traverse_module_state->__pyx_kp_u__10);
  Py_VISIT(traverse_module_state->__pyx_kp_s__3);
  Py_VISIT(traverse_module_state->__pyx_n_s__31);
  Py_VISIT(traverse_module_state->__pyx_kp_u__4);
  Py_VISIT(traverse_module_state->__pyx_kp_u__5);
  Py_VISIT(traverse_module_state->__pyx_n_s__7);
  Py_VISIT(traverse_module_state->__pyx_n_s_add);
  Py_VISIT(traverse_module_state->__pyx_n_s_allow_team_reroll);
  Py_VISIT(traverse_module_state->__pyx_n_s_alter_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_arena);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_attacker);
  Py_VISIT(traverse_module_state->__pyx_n_s_blitz);
  Py_VISIT(traverse_module_state->__pyx_n_s_block_dice);
  Py_VISIT(traverse_module_state->__pyx_kp_u_block_dice_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_board);
  Py_VISIT(traverse_module_state->__pyx_n_s_botbowl);
  Py_VISIT(traverse_module_state->__pyx_n_s_botbowl_core_forward_model);
  Py_VISIT(traverse_module_state->__pyx_n_s_botbowl_core_model);
  Py_VISIT(traverse_module_state->__pyx_kp_s_botbowl_core_pathfinding_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_botbowl_core_pathfinding_cython_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_botbowl_core_table);
  Py_VISIT(traverse_module_state->__pyx_n_s_can_block);
  Py_VISIT(traverse_module_state->__pyx_n_s_can_catch);
  Py_VISIT(traverse_module_state->__pyx_n_s_can_foul);
  Py_VISIT(traverse_module_state->__pyx_n_s_can_handoff);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_copy);
  Py_VISIT(traverse_module_state->__pyx_n_s_core);
  Py_VISIT(traverse_module_state->__pyx_n_s_defender);
  Py_VISIT(traverse_module_state->__pyx_n_s_directly_to_adjacent);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_finder);
  Py_VISIT(traverse_module_state->__pyx_n_s_forward_model);
  Py_VISIT(traverse_module_state->__pyx_n_s_foul);
  Py_VISIT(traverse_module_state->__pyx_n_s_foul_roll);
  Py_VISIT(traverse_module_state->__pyx_kp_u_foul_roll_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_from_position);
  Py_VISIT(traverse_module_state->__pyx_n_s_game);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_adjacent_squares);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_ag);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_all_paths);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_av);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_ball);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_ball_carrier);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_catch_modifiers);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_last_step);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_opp_endzone_x);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_path);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_paths);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_players_on_pitch);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_safest_path);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_safest_path_to_endzone);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_stand_up_modifier);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_handoff);
  Py_VISIT(traverse_module_state->__pyx_n_s_handoff_roll);
  Py_VISIT(traverse_module_state->__pyx_kp_u_handoff_roll_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_has_skill);
  Py_VISIT(traverse_module_state->__pyx_n_s_has_tackle_zone);
  Py_VISIT(traverse_module_state->__pyx_n_s_height);
  Py_VISIT(traverse_module_state->__pyx_n_s_home_team);
  Py_VISIT(traverse_module_state->__pyx_n_s_immutable_types);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_empty);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_handoff_available);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_model);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_assists_at);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_block_dice_at);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_gfis_left);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_moves_left);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_moves_used);
  Py_VISIT(traverse_module_state->__pyx_n_s_on_ground);
  Py_VISIT(traverse_module_state->__pyx_n_s_orig_ball);
  Py_VISIT(traverse_module_state->__pyx_n_s_orig_player);
  Py_VISIT(traverse_module_state->__pyx_n_s_path);
  Py_VISIT(traverse_module_state->__pyx_n_s_paths);
  Py_VISIT(traverse_module_state->__pyx_n_s_pitch);
  Py_VISIT(traverse_module_state->__pyx_n_s_player);
  Py_VISIT(traverse_module_state->__pyx_n_s_position);
  Py_VISIT(traverse_module_state->__pyx_n_s_prob);
  Py_VISIT(traverse_module_state->__pyx_kp_u_prob_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_python_pathfinding);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_recreate_self);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce___locals_recreate_self);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_reset_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_reversed);
  Py_VISIT(traverse_module_state->__pyx_n_s_rolls);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self_ball_pos_self_locked_nodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_steps);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_table);
  Py_VISIT(traverse_module_state->__pyx_n_s_target);
  Py_VISIT(traverse_module_state->__pyx_n_s_team);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_trr);
  Py_VISIT(traverse_module_state->__pyx_n_s_up);
  Py_VISIT(traverse_module_state->__pyx_n_s_used_skills);
  Py_VISIT(traverse_module_state->__pyx_n_s_weather);
  Py_VISIT(traverse_module_state->__pyx_n_s_width);
  Py_VISIT(traverse_module_state->__pyx_n_s_x);
  Py_VISIT(traverse_module_state->__pyx_n_s_y);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_2);
  Py_VISIT(traverse_module_state->__pyx_int_4);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__6);
  Py_VISIT(traverse_module_state->__pyx_tuple__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__16);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_tuple__27);
  Py_VISIT(traverse_module_state->__pyx_tuple__28);
  Py_VISIT(traverse_module_state->__pyx_tuple__30);
  Py_VISIT(traverse_module_state->__pyx_codeobj__2);
  Py_VISIT(traverse_module_state->__pyx_codeobj__12);
  Py_VISIT(traverse_module_state->__pyx_codeobj__13);
  Py_VISIT(traverse_module_state->__pyx_codeobj__15);
  Py_VISIT(traverse_module_state->__pyx_codeobj__17);
  Py_VISIT(traverse_module_state->__pyx_codeobj__18);
  Py_VISIT(traverse_module_state->__pyx_codeobj__19);
  Py_VISIT(traverse_module_state->__pyx_codeobj__21);
  Py_VISIT(traverse_module_state->__pyx_codeobj__23);
  Py_VISIT(traverse_module_state->__pyx_codeobj__26);
  Py_VISIT(traverse_module_state->__pyx_codeobj__29);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#if CYTHON_USE_MODULE_STATE
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#define __pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path __pyx_mstate_global->__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path
#define __pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Path __pyx_mstate_global->__pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Path
#define __pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder __pyx_mstate_global->__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder
#define __pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder __pyx_mstate_global->__pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder
#define __pyx_n_s_DODGE __pyx_mstate_global->__pyx_n_s_DODGE
#define __pyx_n_s_JUMP_UP __pyx_mstate_global->__pyx_n_s_JUMP_UP
#define __pyx_n_s_MemoryError __pyx_mstate_global->__pyx_n_s_MemoryError
#define __pyx_n_s_POURING_RAIN __pyx_mstate_global->__pyx_n_s_POURING_RAIN
#define __pyx_n_s_Path __pyx_mstate_global->__pyx_n_s_Path
#define __pyx_n_s_Path___reduce __pyx_mstate_global->__pyx_n_s_Path___reduce
#define __pyx_n_s_Path_get_last_step __pyx_mstate_global->__pyx_n_s_Path_get_last_step
#define __pyx_n_s_Path_is_empty __pyx_mstate_global->__pyx_n_s_Path_is_empty
#define __pyx_kp_u_Path_target __pyx_mstate_global->__pyx_kp_u_Path_target
#define __pyx_n_s_Pathfinder __pyx_mstate_global->__pyx_n_s_Pathfinder
#define __pyx_n_s_Pathfinder___reduce_cython __pyx_mstate_global->__pyx_n_s_Pathfinder___reduce_cython
#define __pyx_n_s_Pathfinder___setstate_cython __pyx_mstate_global->__pyx_n_s_Pathfinder___setstate_cython
#define __pyx_n_s_Pathfinder_get_path __pyx_mstate_global->__pyx_n_s_Pathfinder_get_path
#define __pyx_n_s_Pathfinder_get_paths __pyx_mstate_global->__pyx_n_s_Pathfinder_get_paths
#define __pyx_n_s_STUNTY __pyx_mstate_global->__pyx_n_s_STUNTY
#define __pyx_n_s_SURE_FEET __pyx_mstate_global->__pyx_n_s_SURE_FEET
#define __pyx_n_s_SURE_HANDS __pyx_mstate_global->__pyx_n_s_SURE_HANDS
#define __pyx_n_s_Skill __pyx_mstate_global->__pyx_n_s_Skill
#define __pyx_n_s_Square __pyx_mstate_global->__pyx_n_s_Square
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_s_WeatherType __pyx_mstate_global->__pyx_n_s_WeatherType
#define __pyx_kp_u__10 __pyx_mstate_global->__pyx_kp_u__10
#define __pyx_kp_s__3 __pyx_mstate_global->__pyx_kp_s__3
#define __pyx_n_s__31 __pyx_mstate_global->__pyx_n_s__31
#define __pyx_kp_u__4 __pyx_mstate_global->__pyx_kp_u__4
#define __pyx_kp_u__5 __pyx_mstate_global->__pyx_kp_u__5
#define __pyx_n_s__7 __pyx_mstate_global->__pyx_n_s__7
#define __pyx_n_s_add __pyx_mstate_global->__pyx_n_s_add
#define __pyx_n_s_allow_team_reroll __pyx_mstate_global->__pyx_n_s_allow_team_reroll
#define __pyx_n_s_alter_state __pyx_mstate_global->__pyx_n_s_alter_state
#define __pyx_n_s_arena __pyx_mstate_global->__pyx_n_s_arena
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_attacker __pyx_mstate_global->__pyx_n_s_attacker
#define __pyx_n_s_blitz __pyx_mstate_global->__pyx_n_s_blitz
#define __pyx_n_s_block_dice __pyx_mstate_global->__pyx_n_s_block_dice
#define __pyx_kp_u_block_dice_2 __pyx_mstate_global->__pyx_kp_u_block_dice_2
#define __pyx_n_s_board __pyx_mstate_global->__pyx_n_s_board
#define __pyx_n_s_botbowl __pyx_mstate_global->__pyx_n_s_botbowl
#define __pyx_n_s_botbowl_core_forward_model __pyx_mstate_global->__pyx_n_s_botbowl_core_forward_model
#define __pyx_n_s_botbowl_core_model __pyx_mstate_global->__pyx_n_s_botbowl_core_model
#define __pyx_kp_s_botbowl_core_pathfinding_cython __pyx_mstate_global->__pyx_kp_s_botbowl_core_pathfinding_cython
#define __pyx_n_s_botbowl_core_pathfinding_cython_2 __pyx_mstate_global->__pyx_n_s_botbowl_core_pathfinding_cython_2
#define __pyx_n_s_botbowl_core_table __pyx_mstate_global->__pyx_n_s_botbowl_core_table
#define __pyx_n_s_can_block __pyx_mstate_global->__pyx_n_s_can_block
#define __pyx_n_s_can_catch __pyx_mstate_global->__pyx_n_s_can_catch
#define __pyx_n_s_can_foul __pyx_mstate_global->__pyx_n_s_can_foul
#define __pyx_n_s_can_handoff __pyx_mstate_global->__pyx_n_s_can_handoff
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_copy __pyx_mstate_global->__pyx_n_s_copy
#define __pyx_n_s_core __pyx_mstate_global->__pyx_n_s_core
#define __pyx_n_s_defender __pyx_mstate_global->__pyx_n_s_defender
#define __pyx_n_s_directly_to_adjacent __pyx_mstate_global->__pyx_n_s_directly_to_adjacent
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_finder __pyx_mstate_global->__pyx_n_s_finder
#define __pyx_n_s_forward_model __pyx_mstate_global->__pyx_n_s_forward_model
#define __pyx_n_s_foul __pyx_mstate_global->__pyx_n_s_foul
#define __pyx_n_s_foul_roll __pyx_mstate_global->__pyx_n_s_foul_roll
#define __pyx_kp_u_foul_roll_2 __pyx_mstate_global->__pyx_kp_u_foul_roll_2
#define __pyx_n_s_from_position __pyx_mstate_global->__pyx_n_s_from_position
#define __pyx_n_s_game __pyx_mstate_global->__pyx_n_s_game
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_get_adjacent_squares __pyx_mstate_global->__pyx_n_s_get_adjacent_squares
#define __pyx_n_s_get_ag __pyx_mstate_global->__pyx_n_s_get_ag
#define __pyx_n_s_get_all_paths __pyx_mstate_global->__pyx_n_s_get_all_paths
#define __pyx_n_s_get_av __pyx_mstate_global->__pyx_n_s_get_av
#define __pyx_n_s_get_ball __pyx_mstate_global->__pyx_n_s_get_ball
#define __pyx_n_s_get_ball_carrier __pyx_mstate_global->__pyx_n_s_get_ball_carrier
#define __pyx_n_s_get_catch_modifiers __pyx_mstate_global->__pyx_n_s_get_catch_modifiers
#define __pyx_n_s_get_last_step __pyx_mstate_global->__pyx_n_s_get_last_step
#define __pyx_n_s_get_opp_endzone_x __pyx_mstate_global->__pyx_n_s_get_opp_endzone_x
#define __pyx_n_s_get_path __pyx_mstate_global->__pyx_n_s_get_path
#define __pyx_n_s_get_paths __pyx_mstate_global->__pyx_n_s_get_paths
#define __pyx_n_s_get_players_on_pitch __pyx_mstate_global->__pyx_n_s_get_players_on_pitch
#define __pyx_n_s_get_safest_path __pyx_mstate_global->__pyx_n_s_get_safest_path
#define __pyx_n_s_get_safest_path_to_endzone __pyx_mstate_global->__pyx_n_s_get_safest_path_to_endzone
#define __pyx_n_s_get_stand_up_modifier __pyx_mstate_global->__pyx_n_s_get_stand_up_modifier
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_handoff __pyx_mstate_global->__pyx_n_s_handoff
#define __pyx_n_s_handoff_roll __pyx_mstate_global->__pyx_n_s_handoff_roll
#define __pyx_kp_u_handoff_roll_2 __pyx_mstate_global->__pyx_kp_u_handoff_roll_2
#define __pyx_n_s_has_skill __pyx_mstate_global->__pyx_n_s_has_skill
#define __pyx_n_s_has_tackle_zone __pyx_mstate_global->__pyx_n_s_has_tackle_zone
#define __pyx_n_s_height __pyx_mstate_global->__pyx_n_s_height
#define __pyx_n_s_home_team __pyx_mstate_global->__pyx_n_s_home_team
#define __pyx_n_s_immutable_types __pyx_mstate_global->__pyx_n_s_immutable_types
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_is_empty __pyx_mstate_global->__pyx_n_s_is_empty
#define __pyx_n_s_is_handoff_available __pyx_mstate_global->__pyx_n_s_is_handoff_available
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_model __pyx_mstate_global->__pyx_n_s_model
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_num_assists_at __pyx_mstate_global->__pyx_n_s_num_assists_at
#define __pyx_n_s_num_block_dice_at __pyx_mstate_global->__pyx_n_s_num_block_dice_at
#define __pyx_n_s_num_gfis_left __pyx_mstate_global->__pyx_n_s_num_gfis_left
#define __pyx_n_s_num_moves_left __pyx_mstate_global->__pyx_n_s_num_moves_left
#define __pyx_n_s_num_moves_used __pyx_mstate_global->__pyx_n_s_num_moves_used
#define __pyx_n_s_on_ground __pyx_mstate_global->__pyx_n_s_on_ground
#define __pyx_n_s_orig_ball __pyx_mstate_global->__pyx_n_s_orig_ball
#define __pyx_n_s_orig_player __pyx_mstate_global->__pyx_n_s_orig_player
#define __pyx_n_s_path __pyx_mstate_global->__pyx_n_s_path
#define __pyx_n_s_paths __pyx_mstate_global->__pyx_n_s_paths
#define __pyx_n_s_pitch __pyx_mstate_global->__pyx_n_s_pitch
#define __pyx_n_s_player __pyx_mstate_global->__pyx_n_s_player
#define __pyx_n_s_position __pyx_mstate_global->__pyx_n_s_position
#define __pyx_n_s_prob __pyx_mstate_global->__pyx_n_s_prob
#define __pyx_kp_u_prob_2 __pyx_mstate_global->__pyx_kp_u_prob_2
#define __pyx_n_s_python_pathfinding __pyx_mstate_global->__pyx_n_s_python_pathfinding
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_recreate_self __pyx_mstate_global->__pyx_n_s_recreate_self
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce___locals_recreate_self __pyx_mstate_global->__pyx_n_s_reduce___locals_recreate_self
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_reset_state __pyx_mstate_global->__pyx_n_s_reset_state
#define __pyx_n_s_reversed __pyx_mstate_global->__pyx_n_s_reversed
#define __pyx_n_s_rolls __pyx_mstate_global->__pyx_n_s_rolls
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self_ball_pos_self_locked_nodes __pyx_mstate_global->__pyx_kp_s_self_ball_pos_self_locked_nodes
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_state __pyx_mstate_global->__pyx_n_s_state
#define __pyx_n_s_steps __pyx_mstate_global->__pyx_n_s_steps
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_table __pyx_mstate_global->__pyx_n_s_table
#define __pyx_n_s_target __pyx_mstate_global->__pyx_n_s_target
#define __pyx_n_s_team __pyx_mstate_global->__pyx_n_s_team
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_trr __pyx_mstate_global->__pyx_n_s_trr
#define __pyx_n_s_up __pyx_mstate_global->__pyx_n_s_up
#define __pyx_n_s_used_skills __pyx_mstate_global->__pyx_n_s_used_skills
#define __pyx_n_s_weather __pyx_mstate_global->__pyx_n_s_weather
#define __pyx_n_s_width __pyx_mstate_global->__pyx_n_s_width
#define __pyx_n_s_x __pyx_mstate_global->__pyx_n_s_x
#define __pyx_n_s_y __pyx_mstate_global->__pyx_n_s_y
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_2 __pyx_mstate_global->__pyx_int_2
#define __pyx_int_4 __pyx_mstate_global->__pyx_int_4
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__6 __pyx_mstate_global->__pyx_tuple__6
#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__16 __pyx_mstate_global->__pyx_tuple__16
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_tuple__27 __pyx_mstate_global->__pyx_tuple__27
#define __pyx_tuple__28 __pyx_mstate_global->__pyx_tuple__28
#define __pyx_tuple__30 __pyx_mstate_global->__pyx_tuple__30
#define __pyx_codeobj__2 __pyx_mstate_global->__pyx_codeobj__2
#define __pyx_codeobj__12 __pyx_mstate_global->__pyx_codeobj__12
#define __pyx_codeobj__13 __pyx_mstate_global->__pyx_codeobj__13
#define __pyx_codeobj__15 __pyx_mstate_global->__pyx_codeobj__15
#define __pyx_codeobj__17 __pyx_mstate_global->__pyx_codeobj__17
#define __pyx_codeobj__18 __pyx_mstate_global->__pyx_codeobj__18
#define __pyx_codeobj__19 __pyx_mstate_global->__pyx_codeobj__19
#define __pyx_codeobj__21 __pyx_mstate_global->__pyx_codeobj__21
#define __pyx_codeobj__23 __pyx_mstate_global->__pyx_codeobj__23
#define __pyx_codeobj__26 __pyx_mstate_global->__pyx_codeobj__26
#define __pyx_codeobj__29 __pyx_mstate_global->__pyx_codeobj__29
#endif
/* #### Code section: module_code ### */

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":32
 * 
 * 
 * cdef object to_botbowl_Square(Square sq):             # <<<<<<<<<<<<<<
 *     return model.Square(sq.x, sq.y)
 * 
 */

static PyObject *__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_to_botbowl_Square(node_ns::Square __pyx_v_sq) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_botbowl_Square", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":33
 * 
 * cdef object to_botbowl_Square(Square sq):
 *     return model.Square(sq.x, sq.y)             # <<<<<<<<<<<<<<
 * 
 * cdef Square from_botbowl_Square(object sq):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_model); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Square); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_sq.x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_sq.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":32
 * 
 * 
 * cdef object to_botbowl_Square(Square sq):             # <<<<<<<<<<<<<<
 *     return model.Square(sq.x, sq.y)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.to_botbowl_Square", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":35
 *     return model.Square(sq.x, sq.y)
 * 
 * cdef Square from_botbowl_Square(object sq):             # <<<<<<<<<<<<<<
 *     return Square(sq.x, sq.y)
 * 
 */

static node_ns::Square __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_from_botbowl_Square(PyObject *__pyx_v_sq) {
  node_ns::Square __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  node_ns::Square __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_botbowl_Square", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":36
 * 
 * cdef Square from_botbowl_Square(object sq):
 *     return Square(sq.x, sq.y)             # <<<<<<<<<<<<<<
 * 
 * cdef Square DIRECTIONS[8]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sq, __pyx_n_s_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sq, __pyx_n_s_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_4 = node_ns::Square(__pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 36, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":35
 *     return model.Square(sq.x, sq.y)
 * 
 * cdef Square from_botbowl_Square(object sq):             # <<<<<<<<<<<<<<
 *     return Square(sq.x, sq.y)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("botbowl.core.pathfinding.cython_pathfinding.from_botbowl_Square", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":69
 *         public object block_dice, handoff_roll, foul_roll
 * 
 *     cdef void set_node(self, NodePtr n):             # <<<<<<<<<<<<<<
 *         self.final_node = n
 *         self.prob = n.get().prob
 */

static void __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_set_node(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_n) {
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_node", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":70
 * 
 *     cdef void set_node(self, NodePtr n):
 *         self.final_node = n             # <<<<<<<<<<<<<<
 *         self.prob = n.get().prob
 *         self.block_dice = None if n.get().block_dice == 0 else n.get().block_dice
 */
  __pyx_v_self->final_node = __pyx_v_n;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":71
 *     cdef void set_node(self, NodePtr n):
 *         self.final_node = n
 *         self.prob = n.get().prob             # <<<<<<<<<<<<<<
 *         self.block_dice = None if n.get().block_dice == 0 else n.get().block_dice
 *         self.handoff_roll = None if n.get().handoff_roll == 0 else n.get().handoff_roll
 */
  __pyx_t_1 = __pyx_v_n.get()->prob;
  __pyx_v_self->prob = __pyx_t_1;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":72
 *         self.final_node = n
 *         self.prob = n.get().prob
 *         self.block_dice = None if n.get().block_dice == 0 else n.get().block_dice             # <<<<<<<<<<<<<<
 *         self.handoff_roll = None if n.get().handoff_roll == 0 else n.get().handoff_roll
 *         self.foul_roll = None if n.get().foul_roll == 0 else n.get().foul_roll
 */
  if (((__pyx_v_n.get()->block_dice == 0) != 0)) {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n.get()->block_dice); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->block_dice);
  __Pyx_DECREF(__pyx_v_self->block_dice);
  __pyx_v_self->block_dice = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":73
 *         self.prob = n.get().prob
 *         self.block_dice = None if n.get().block_dice == 0 else n.get().block_dice
 *         self.handoff_roll = None if n.get().handoff_roll == 0 else n.get().handoff_roll             # <<<<<<<<<<<<<<
 *         self.foul_roll = None if n.get().foul_roll == 0 else n.get().foul_roll
 * 
 */
  if (((__pyx_v_n.get()->handoff_roll == 0) != 0)) {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n.get()->handoff_roll); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->handoff_roll);
  __Pyx_DECREF(__pyx_v_self->handoff_roll);
  __pyx_v_self->handoff_roll = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":74
 *         self.block_dice = None if n.get().block_dice == 0 else n.get().block_dice
 *         self.handoff_roll = None if n.get().handoff_roll == 0 else n.get().handoff_roll
 *         self.foul_roll = None if n.get().foul_roll == 0 else n.get().foul_roll             # <<<<<<<<<<<<<<
 * 
 *     cpdef object get_last_step(self):
 */
  if (((__pyx_v_n.get()->foul_roll == 0) != 0)) {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n.get()->foul_roll); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->foul_roll);
  __Pyx_DECREF(__pyx_v_self->foul_roll);
  __pyx_v_self->foul_roll = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":69
 *         public object block_dice, handoff_roll, foul_roll
 * 
 *     cdef void set_node(self, NodePtr n):             # <<<<<<<<<<<<<<
 *         self.final_node = n
 *         self.prob = n.get().prob
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("botbowl.core.pathfinding.cython_pathfinding.Path.set_node", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":76
 *         self.foul_roll = None if n.get().foul_roll == 0 else n.get().foul_roll
 * 
 *     cpdef object get_last_step(self):             # <<<<<<<<<<<<<<
 *         if self._steps is None:
 *             return to_botbowl_Square( self.final_node.get().position )
 */

static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_1get_last_step(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_get_last_step(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_last_step", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_last_step); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #ifdef __Pyx_CyFunction_USED
      if (!__Pyx_IsCyOrPyCFunction(__pyx_t_1)
      #else
      if (!PyCFunction_Check(__pyx_t_1)
      #endif
              || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_1get_last_step)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_4, };
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":77
 * 
 *     cpdef object get_last_step(self):
 *         if self._steps is None:             # <<<<<<<<<<<<<<
 *             return to_botbowl_Square( self.final_node.get().position )
 *         else:
 */
  __pyx_t_6 = (__pyx_v_self->_steps == Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":78
 *     cpdef object get_last_step(self):
 *         if self._steps is None:
 *             return to_botbowl_Square( self.final_node.get().position )             # <<<<<<<<<<<<<<
 *         else:
 *             return self._steps[-1]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_to_botbowl_Square(__pyx_v_self->final_node.get()->position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":77
 * 
 *     cpdef object get_last_step(self):
 *         if self._steps is None:             # <<<<<<<<<<<<<<
 *             return to_botbowl_Square( self.final_node.get().position )
 *         else:
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":80
 *             return to_botbowl_Square( self.final_node.get().position )
 *         else:
 *             return self._steps[-1]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->_steps, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":76
 *         self.foul_roll = None if n.get().foul_roll == 0 else n.get().foul_roll
 * 
 *     cpdef object get_last_step(self):             # <<<<<<<<<<<<<<
 *         if self._steps is None:
 *             return to_botbowl_Square( self.final_node.get().position )
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Path.get_last_step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_1get_last_step(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_1get_last_step = {"get_last_step", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_1get_last_step, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_1get_last_step(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_last_step (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_last_step", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_last_step", 0))) return NULL;
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_get_last_step(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_get_last_step(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_last_step", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_get_last_step(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Path.get_last_step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":82
 *             return self._steps[-1]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def steps(self):
 *         if self._steps is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_5steps_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_5steps_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_5steps___get__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_5steps___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":84
 *     @property
 *     def steps(self):
 *         if self._steps is None:             # <<<<<<<<<<<<<<
 *             self._collect_path()
 *         return self._steps
 */
  __pyx_t_1 = (__pyx_v_self->_steps == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":85
 *     def steps(self):
 *         if self._steps is None:
 *             self._collect_path()             # <<<<<<<<<<<<<<
 *         return self._steps
 * 
 */
    ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self->__pyx_vtab)->_collect_path(__pyx_v_self);

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":84
 *     @property
 *     def steps(self):
 *         if self._steps is None:             # <<<<<<<<<<<<<<
 *             self._collect_path()
 *         return self._steps
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":86
 *         if self._steps is None:
 *             self._collect_path()
 *         return self._steps             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_steps);
  __pyx_r = __pyx_v_self->_steps;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":82
 *             return self._steps[-1]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def steps(self):
 *         if self._steps is None:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":88
 *         return self._steps
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def rolls(self):
 *         if self._rolls is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_5rolls_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_5rolls_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_5rolls___get__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_5rolls___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":90
 *     @property
 *     def rolls(self):
 *         if self._rolls is None:             # <<<<<<<<<<<<<<
 *             self._collect_path()
 *         return self._rolls
 */
  __pyx_t_1 = (__pyx_v_self->_rolls == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":91
 *     def rolls(self):
 *         if self._rolls is None:
 *             self._collect_path()             # <<<<<<<<<<<<<<
 *         return self._rolls
 * 
 */
    ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self->__pyx_vtab)->_collect_path(__pyx_v_self);

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":90
 *     @property
 *     def rolls(self):
 *         if self._rolls is None:             # <<<<<<<<<<<<<<
 *             self._collect_path()
 *         return self._rolls
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":92
 *         if self._rolls is None:
 *             self._collect_path()
 *         return self._rolls             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self) -> int:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_rolls);
  __pyx_r = __pyx_v_self->_rolls;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":88
 *         return self._steps
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def rolls(self):
 *         if self._rolls is None:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":94
 *         return self._rolls
 * 
 *     def __len__(self) -> int:             # <<<<<<<<<<<<<<
 *         return len(self.steps)
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_3__len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_2__len__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_2__len__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":95
 * 
 *     def __len__(self) -> int:
 *         return len(self.steps)             # <<<<<<<<<<<<<<
 * 
 *     def is_empty(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_steps); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":94
 *         return self._rolls
 * 
 *     def __len__(self) -> int:             # <<<<<<<<<<<<<<
 *         return len(self.steps)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Path.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":97
 *         return len(self.steps)
 * 
 *     def is_empty(self):             # <<<<<<<<<<<<<<
 *         return self.final_node.use_count() == 0
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_5is_empty(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_5is_empty = {"is_empty", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_5is_empty, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_5is_empty(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_empty (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("is_empty", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "is_empty", 0))) return NULL;
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_4is_empty(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_4is_empty(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_empty", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":98
 * 
 *     def is_empty(self):
 *         return self.final_node.use_count() == 0             # <<<<<<<<<<<<<<
 * 
 *     cdef void _collect_path(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->final_node.use_count() == 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":97
 *         return len(self.steps)
 * 
 *     def is_empty(self):             # <<<<<<<<<<<<<<
 *         return self.final_node.use_count() == 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Path.is_empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":100
 *         return self.final_node.use_count() == 0
 * 
 *     cdef void _collect_path(self):             # <<<<<<<<<<<<<<
 *         cdef NodePtr node = self.final_node
 *         cdef list steps = []
 */

static void __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path__collect_path(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node;
  PyObject *__pyx_v_steps = 0;
  PyObject *__pyx_v_rolls = 0;
  __Pyx_RefNannyDeclarations
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  std::shared_ptr<node_ns::Node>  __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_collect_path", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":101
 * 
 *     cdef void _collect_path(self):
 *         cdef NodePtr node = self.final_node             # <<<<<<<<<<<<<<
 *         cdef list steps = []
 *         cdef list rolls = []
 */
  __pyx_t_1 = __pyx_v_self->final_node;
  __pyx_v_node = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":102
 *     cdef void _collect_path(self):
 *         cdef NodePtr node = self.final_node
 *         cdef list steps = []             # <<<<<<<<<<<<<<
 *         cdef list rolls = []
 * 
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_steps = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":103
 *         cdef NodePtr node = self.final_node
 *         cdef list steps = []
 *         cdef list rolls = []             # <<<<<<<<<<<<<<
 * 
 *         while node.get().parent.use_count() > 0:
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_rolls = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":105
 *         cdef list rolls = []
 * 
 *         while node.get().parent.use_count() > 0:             # <<<<<<<<<<<<<<
 *             steps.append( to_botbowl_Square(node.get().position) )
 *             rolls.append(node.get().rolls)
 */
  while (1) {
    __pyx_t_3 = ((__pyx_v_node.get()->parent.use_count() > 0) != 0);
    if (!__pyx_t_3) break;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":106
 * 
 *         while node.get().parent.use_count() > 0:
 *             steps.append( to_botbowl_Square(node.get().position) )             # <<<<<<<<<<<<<<
 *             rolls.append(node.get().rolls)
 *             node = node.get().parent
 */
    __pyx_t_2 = __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_to_botbowl_Square(__pyx_v_node.get()->position); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_steps, __pyx_t_2); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":107
 *         while node.get().parent.use_count() > 0:
 *             steps.append( to_botbowl_Square(node.get().position) )
 *             rolls.append(node.get().rolls)             # <<<<<<<<<<<<<<
 *             node = node.get().parent
 *         self._steps = list(reversed(steps))
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_node.get()->rolls); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_rolls, __pyx_t_2); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":108
 *             steps.append( to_botbowl_Square(node.get().position) )
 *             rolls.append(node.get().rolls)
 *             node = node.get().parent             # <<<<<<<<<<<<<<
 *         self._steps = list(reversed(steps))
 *         self._rolls = list(reversed(rolls))
 */
    __pyx_t_5 = __pyx_v_node.get()->parent;
    __pyx_v_node = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":109
 *             rolls.append(node.get().rolls)
 *             node = node.get().parent
 *         self._steps = list(reversed(steps))             # <<<<<<<<<<<<<<
 *         self._rolls = list(reversed(rolls))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_reversed, __pyx_v_steps); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PySequence_ListKeepNew(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->_steps);
  __Pyx_DECREF(__pyx_v_self->_steps);
  __pyx_v_self->_steps = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":110
 *             node = node.get().parent
 *         self._steps = list(reversed(steps))
 *         self._rolls = list(reversed(rolls))             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
  __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_reversed, __pyx_v_rolls); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PySequence_ListKeepNew(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_rolls);
  __Pyx_DECREF(__pyx_v_self->_rolls);
  __pyx_v_self->_rolls = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":100
 *         return self.final_node.use_count() == 0
 * 
 *     cdef void _collect_path(self):             # <<<<<<<<<<<<<<
 *         cdef NodePtr node = self.final_node
 *         cdef list steps = []
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("botbowl.core.pathfinding.cython_pathfinding.Path._collect_path", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_steps);
  __Pyx_XDECREF(__pyx_v_rolls);
  __Pyx_RefNannyFinishContext();
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":112
 *         self._rolls = list(reversed(rolls))
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         # Need custom reduce() because built in reduce() can't handle the c++ objects
 *         def recreate_self(steps, rolls, block_dice, foul_roll, handoff_roll, prob):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_7__reduce__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_7__reduce__ = {"__reduce__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_7__reduce__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_7__reduce__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce__", 0))) return NULL;
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6__reduce__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":114
 *     def __reduce__(self):
 *         # Need custom reduce() because built in reduce() can't handle the c++ objects
 *         def recreate_self(steps, rolls, block_dice, foul_roll, handoff_roll, prob):             # <<<<<<<<<<<<<<
 *             path = Path()
 *             path._steps = steps
 */

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10__reduce___1recreate_self(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10__reduce___1recreate_self = {"recreate_self", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10__reduce___1recreate_self, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10__reduce___1recreate_self(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_steps = 0;
  PyObject *__pyx_v_rolls = 0;
  PyObject *__pyx_v_block_dice = 0;
  PyObject *__pyx_v_foul_roll = 0;
  PyObject *__pyx_v_handoff_roll = 0;
  PyObject *__pyx_v_prob = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("recreate_self (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_steps,&__pyx_n_s_rolls,&__pyx_n_s_block_dice,&__pyx_n_s_foul_roll,&__pyx_n_s_handoff_roll,&__pyx_n_s_prob,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_steps,&__pyx_n_s_rolls,&__pyx_n_s_block_dice,&__pyx_n_s_foul_roll,&__pyx_n_s_handoff_roll,&__pyx_n_s_prob,0};
    #endif
    PyObject* values[6] = {0,0,0,0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_steps)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 114, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_rolls)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 114, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("recreate_self", 1, 6, 6, 1); __PYX_ERR(0, 114, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_block_dice)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 114, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("recreate_self", 1, 6, 6, 2); __PYX_ERR(0, 114, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_foul_roll)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 114, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("recreate_self", 1, 6, 6, 3); __PYX_ERR(0, 114, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_handoff_roll)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 114, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("recreate_self", 1, 6, 6, 4); __PYX_ERR(0, 114, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_prob)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 114, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("recreate_self", 1, 6, 6, 5); __PYX_ERR(0, 114, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "recreate_self") < 0)) __PYX_ERR(0, 114, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 6)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
      values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
    }
    __pyx_v_steps = values[0];
    __pyx_v_rolls = values[1];
    __pyx_v_block_dice = values[2];
    __pyx_v_foul_roll = values[3];
    __pyx_v_handoff_roll = values[4];
    __pyx_v_prob = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("recreate_self", 1, 6, 6, __pyx_nargs); __PYX_ERR(0, 114, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Path.__reduce__.recreate_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10__reduce___recreate_self(__pyx_self, __pyx_v_steps, __pyx_v_rolls, __pyx_v_block_dice, __pyx_v_foul_roll, __pyx_v_handoff_roll, __pyx_v_prob);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10__reduce___recreate_self(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_steps, PyObject *__pyx_v_rolls, PyObject *__pyx_v_block_dice, PyObject *__pyx_v_foul_roll, PyObject *__pyx_v_handoff_roll, PyObject *__pyx_v_prob) {
  struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_path = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("recreate_self", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":115
 *         # Need custom reduce() because built in reduce() can't handle the c++ objects
 *         def recreate_self(steps, rolls, block_dice, foul_roll, handoff_roll, prob):
 *             path = Path()             # <<<<<<<<<<<<<<
 *             path._steps = steps
 *             path._rolls = rolls
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_path = ((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":116
 *         def recreate_self(steps, rolls, block_dice, foul_roll, handoff_roll, prob):
 *             path = Path()
 *             path._steps = steps             # <<<<<<<<<<<<<<
 *             path._rolls = rolls
 *             path.block_dice = block_dice
 */
  __Pyx_INCREF(__pyx_v_steps);
  __Pyx_GIVEREF(__pyx_v_steps);
  __Pyx_GOTREF(__pyx_v_path->_steps);
  __Pyx_DECREF(__pyx_v_path->_steps);
  __pyx_v_path->_steps = __pyx_v_steps;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":117
 *             path = Path()
 *             path._steps = steps
 *             path._rolls = rolls             # <<<<<<<<<<<<<<
 *             path.block_dice = block_dice
 *             path.foul_roll = foul_roll
 */
  __Pyx_INCREF(__pyx_v_rolls);
  __Pyx_GIVEREF(__pyx_v_rolls);
  __Pyx_GOTREF(__pyx_v_path->_rolls);
  __Pyx_DECREF(__pyx_v_path->_rolls);
  __pyx_v_path->_rolls = __pyx_v_rolls;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":118
 *             path._steps = steps
 *             path._rolls = rolls
 *             path.block_dice = block_dice             # <<<<<<<<<<<<<<
 *             path.foul_roll = foul_roll
 *             path.handoff_roll = handoff_roll
 */
  __Pyx_INCREF(__pyx_v_block_dice);
  __Pyx_GIVEREF(__pyx_v_block_dice);
  __Pyx_GOTREF(__pyx_v_path->block_dice);
  __Pyx_DECREF(__pyx_v_path->block_dice);
  __pyx_v_path->block_dice = __pyx_v_block_dice;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":119
 *             path._rolls = rolls
 *             path.block_dice = block_dice
 *             path.foul_roll = foul_roll             # <<<<<<<<<<<<<<
 *             path.handoff_roll = handoff_roll
 *             path.prob = prob
 */
  __Pyx_INCREF(__pyx_v_foul_roll);
  __Pyx_GIVEREF(__pyx_v_foul_roll);
  __Pyx_GOTREF(__pyx_v_path->foul_roll);
  __Pyx_DECREF(__pyx_v_path->foul_roll);
  __pyx_v_path->foul_roll = __pyx_v_foul_roll;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":120
 *             path.block_dice = block_dice
 *             path.foul_roll = foul_roll
 *             path.handoff_roll = handoff_roll             # <<<<<<<<<<<<<<
 *             path.prob = prob
 *             return path
 */
  __Pyx_INCREF(__pyx_v_handoff_roll);
  __Pyx_GIVEREF(__pyx_v_handoff_roll);
  __Pyx_GOTREF(__pyx_v_path->handoff_roll);
  __Pyx_DECREF(__pyx_v_path->handoff_roll);
  __pyx_v_path->handoff_roll = __pyx_v_handoff_roll;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":121
 *             path.foul_roll = foul_roll
 *             path.handoff_roll = handoff_roll
 *             path.prob = prob             # <<<<<<<<<<<<<<
 *             return path
 *         return recreate_self, (self.steps, self.rolls, self.block_dice, self.foul_roll, self.handoff_roll, self.prob)
 */
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_prob); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 121, __pyx_L1_error)
  __pyx_v_path->prob = __pyx_t_2;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":122
 *             path.handoff_roll = handoff_roll
 *             path.prob = prob
 *             return path             # <<<<<<<<<<<<<<
 *         return recreate_self, (self.steps, self.rolls, self.block_dice, self.foul_roll, self.handoff_roll, self.prob)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_path);
  __pyx_r = ((PyObject *)__pyx_v_path);
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":114
 *     def __reduce__(self):
 *         # Need custom reduce() because built in reduce() can't handle the c++ objects
 *         def recreate_self(steps, rolls, block_dice, foul_roll, handoff_roll, prob):             # <<<<<<<<<<<<<<
 *             path = Path()
 *             path._steps = steps
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Path.__reduce__.recreate_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":112
 *         self._rolls = list(reversed(rolls))
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         # Need custom reduce() because built in reduce() can't handle the c++ objects
 *         def recreate_self(steps, rolls, block_dice, foul_roll, handoff_roll, prob):
 */

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6__reduce__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  PyObject *__pyx_v_recreate_self = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":114
 *     def __reduce__(self):
 *         # Need custom reduce() because built in reduce() can't handle the c++ objects
 *         def recreate_self(steps, rolls, block_dice, foul_roll, handoff_roll, prob):             # <<<<<<<<<<<<<<
 *             path = Path()
 *             path._steps = steps
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10__reduce___1recreate_self, 0, __pyx_n_s_reduce___locals_recreate_self, NULL, __pyx_n_s_botbowl_core_pathfinding_cython_2, __pyx_d, ((PyObject *)__pyx_codeobj__2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_recreate_self = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":123
 *             path.prob = prob
 *             return path
 *         return recreate_self, (self.steps, self.rolls, self.block_dice, self.foul_roll, self.handoff_roll, self.prob)             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_steps); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rolls); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->prob); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->block_dice);
  __Pyx_GIVEREF(__pyx_v_self->block_dice);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_self->block_dice);
  __Pyx_INCREF(__pyx_v_self->foul_roll);
  __Pyx_GIVEREF(__pyx_v_self->foul_roll);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_v_self->foul_roll);
  __Pyx_INCREF(__pyx_v_self->handoff_roll);
  __Pyx_GIVEREF(__pyx_v_self->handoff_roll);
  PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_v_self->handoff_roll);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_recreate_self);
  __Pyx_GIVEREF(__pyx_v_recreate_self);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_recreate_self);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":112
 *         self._rolls = list(reversed(rolls))
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         # Need custom reduce() because built in reduce() can't handle the c++ objects
 *         def recreate_self(steps, rolls, block_dice, foul_roll, handoff_roll, prob):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Path.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_recreate_self);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":125
 *         return recreate_self, (self.steps, self.rolls, self.block_dice, self.foul_roll, self.handoff_roll, self.prob)
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         return  self.prob == other.prob and \
 *                 self.steps == other.steps and \
 */

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_8__eq__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_8__eq__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":126
 * 
 *     def __eq__(self, other):
 *         return  self.prob == other.prob and \             # <<<<<<<<<<<<<<
 *                 self.steps == other.steps and \
 *                 self.rolls == other.rolls and \
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->prob); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_prob); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 126, __pyx_L1_error)
  if (__pyx_t_5) {
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L3_bool_binop_done;
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":127
 *     def __eq__(self, other):
 *         return  self.prob == other.prob and \
 *                 self.steps == other.steps and \             # <<<<<<<<<<<<<<
 *                 self.rolls == other.rolls and \
 *                 self.block_dice == other.block_dice and \
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_steps); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_steps); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 127, __pyx_L1_error)
  if (__pyx_t_5) {
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3_bool_binop_done;
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":128
 *         return  self.prob == other.prob and \
 *                 self.steps == other.steps and \
 *                 self.rolls == other.rolls and \             # <<<<<<<<<<<<<<
 *                 self.block_dice == other.block_dice and \
 *                 self.handoff_roll == other.handoff_roll and \
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rolls); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_rolls); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 128, __pyx_L1_error)
  if (__pyx_t_5) {
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L3_bool_binop_done;
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":129
 *                 self.steps == other.steps and \
 *                 self.rolls == other.rolls and \
 *                 self.block_dice == other.block_dice and \             # <<<<<<<<<<<<<<
 *                 self.handoff_roll == other.handoff_roll and \
 *                 self.foul_roll == other.foul_roll
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_block_dice); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_self->block_dice, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 129, __pyx_L1_error)
  if (__pyx_t_5) {
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L3_bool_binop_done;
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":130
 *                 self.rolls == other.rolls and \
 *                 self.block_dice == other.block_dice and \
 *                 self.handoff_roll == other.handoff_roll and \             # <<<<<<<<<<<<<<
 *                 self.foul_roll == other.foul_roll
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_handoff_roll); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_self->handoff_roll, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 130, __pyx_L1_error)
  if (__pyx_t_5) {
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L3_bool_binop_done;
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":131
 *                 self.block_dice == other.block_dice and \
 *                 self.handoff_roll == other.handoff_roll and \
 *                 self.foul_roll == other.foul_roll             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_foul_roll); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_self->foul_roll, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_1 = __pyx_t_3;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":125
 *         return recreate_self, (self.steps, self.rolls, self.block_dice, self.foul_roll, self.handoff_roll, self.prob)
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         return  self.prob == other.prob and \
 *                 self.steps == other.steps and \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Path.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":133
 *                 self.foul_roll == other.foul_roll
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         block = f", block_dice={self.block_dice}" if self.block_dice is not None else ""
 *         handoff = f", handoff_roll={self.handoff_roll}" if self.handoff_roll is not None else ""
 */

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_11__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_11__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10__repr__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10__repr__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  PyObject *__pyx_v_block = NULL;
  PyObject *__pyx_v_handoff = NULL;
  PyObject *__pyx_v_foul = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":134
 * 
 *     def __repr__(self):
 *         block = f", block_dice={self.block_dice}" if self.block_dice is not None else ""             # <<<<<<<<<<<<<<
 *         handoff = f", handoff_roll={self.handoff_roll}" if self.handoff_roll is not None else ""
 *         foul = f", foul_roll={self.foul_roll}" if self.foul_roll is not None else ""
 */
  __pyx_t_2 = (__pyx_v_self->block_dice != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_self->block_dice, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_block_dice_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_kp_s__3);
    __pyx_t_1 = __pyx_kp_s__3;
  }
  __pyx_v_block = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":135
 *     def __repr__(self):
 *         block = f", block_dice={self.block_dice}" if self.block_dice is not None else ""
 *         handoff = f", handoff_roll={self.handoff_roll}" if self.handoff_roll is not None else ""             # <<<<<<<<<<<<<<
 *         foul = f", foul_roll={self.foul_roll}" if self.foul_roll is not None else ""
 *         return f"Path(target={self.steps[-1]}, prob={self.prob}, {block}{handoff}{foul})"
 */
  __pyx_t_2 = (__pyx_v_self->handoff_roll != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_self->handoff_roll, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_handoff_roll_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(__pyx_kp_s__3);
    __pyx_t_1 = __pyx_kp_s__3;
  }
  __pyx_v_handoff = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":136
 *         block = f", block_dice={self.block_dice}" if self.block_dice is not None else ""
 *         handoff = f", handoff_roll={self.handoff_roll}" if self.handoff_roll is not None else ""
 *         foul = f", foul_roll={self.foul_roll}" if self.foul_roll is not None else ""             # <<<<<<<<<<<<<<
 *         return f"Path(target={self.steps[-1]}, prob={self.prob}, {block}{handoff}{foul})"
 * 
 */
  __pyx_t_2 = (__pyx_v_self->foul_roll != Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_self->foul_roll, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_foul_roll_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_kp_s__3);
    __pyx_t_1 = __pyx_kp_s__3;
  }
  __pyx_v_foul = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":137
 *         handoff = f", handoff_roll={self.handoff_roll}" if self.handoff_roll is not None else ""
 *         foul = f", foul_roll={self.foul_roll}" if self.foul_roll is not None else ""
 *         return f"Path(target={self.steps[-1]}, prob={self.prob}, {block}{handoff}{foul})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = 0;
  __pyx_t_6 = 127;
  __Pyx_INCREF(__pyx_kp_u_Path_target);
  __pyx_t_5 += 12;
  __Pyx_GIVEREF(__pyx_kp_u_Path_target);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Path_target);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_steps); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_prob_2);
  __pyx_t_5 += 7;
  __Pyx_GIVEREF(__pyx_kp_u_prob_2);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_prob_2);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->prob); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_kp_u__4);
  __pyx_t_5 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__4);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__4);
  __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_block, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_handoff, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_foul, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_kp_u__5);
  __pyx_t_5 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__5);
  PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_u__5);
  __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 9, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":133
 *                 self.foul_roll == other.foul_roll
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         block = f", block_dice={self.block_dice}" if self.block_dice is not None else ""
 *         handoff = f", handoff_roll={self.handoff_roll}" if self.handoff_roll is not None else ""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Path.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_block);
  __Pyx_XDECREF(__pyx_v_handoff);
  __Pyx_XDECREF(__pyx_v_foul);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":65
 *     cdef:
 *         NodePtr final_node
 *         public object _steps, _rolls             # <<<<<<<<<<<<<<
 *         public double prob
 *         public object block_dice, handoff_roll, foul_roll
 */

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_steps_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_steps_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_steps___get__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_steps___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_steps);
  __pyx_r = __pyx_v_self->_steps;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_steps_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_steps_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_steps_2__set__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_steps_2__set__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_steps);
  __Pyx_DECREF(__pyx_v_self->_steps);
  __pyx_v_self->_steps = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_steps_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_steps_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_steps_4__del__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_steps_4__del__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_steps);
  __Pyx_DECREF(__pyx_v_self->_steps);
  __pyx_v_self->_steps = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_rolls_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_rolls_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_rolls___get__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_rolls___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_rolls);
  __pyx_r = __pyx_v_self->_rolls;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_rolls_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_rolls_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_rolls_2__set__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_rolls_2__set__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_rolls);
  __Pyx_DECREF(__pyx_v_self->_rolls);
  __pyx_v_self->_rolls = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_rolls_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_rolls_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_rolls_4__del__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_rolls_4__del__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_rolls);
  __Pyx_DECREF(__pyx_v_self->_rolls);
  __pyx_v_self->_rolls = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":66
 *         NodePtr final_node
 *         public object _steps, _rolls
 *         public double prob             # <<<<<<<<<<<<<<
 *         public object block_dice, handoff_roll, foul_roll
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_4prob_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_4prob_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_4prob___get__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_4prob___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->prob); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Path.prob.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_4prob_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_4prob_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_4prob_2__set__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_4prob_2__set__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L1_error)
  __pyx_v_self->prob = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Path.prob.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":67
 *         public object _steps, _rolls
 *         public double prob
 *         public object block_dice, handoff_roll, foul_roll             # <<<<<<<<<<<<<<
 * 
 *     cdef void set_node(self, NodePtr n):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10block_dice_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10block_dice_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10block_dice___get__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10block_dice___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->block_dice);
  __pyx_r = __pyx_v_self->block_dice;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10block_dice_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10block_dice_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10block_dice_2__set__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10block_dice_2__set__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->block_dice);
  __Pyx_DECREF(__pyx_v_self->block_dice);
  __pyx_v_self->block_dice = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10block_dice_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10block_dice_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10block_dice_4__del__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10block_dice_4__del__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->block_dice);
  __Pyx_DECREF(__pyx_v_self->block_dice);
  __pyx_v_self->block_dice = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_12handoff_roll_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_12handoff_roll_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_12handoff_roll___get__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_12handoff_roll___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->handoff_roll);
  __pyx_r = __pyx_v_self->handoff_roll;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_12handoff_roll_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_12handoff_roll_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_12handoff_roll_2__set__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_12handoff_roll_2__set__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->handoff_roll);
  __Pyx_DECREF(__pyx_v_self->handoff_roll);
  __pyx_v_self->handoff_roll = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_12handoff_roll_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_12handoff_roll_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_12handoff_roll_4__del__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_12handoff_roll_4__del__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->handoff_roll);
  __Pyx_DECREF(__pyx_v_self->handoff_roll);
  __pyx_v_self->handoff_roll = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9foul_roll_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9foul_roll_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9foul_roll___get__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9foul_roll___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->foul_roll);
  __pyx_r = __pyx_v_self->foul_roll;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9foul_roll_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9foul_roll_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9foul_roll_2__set__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9foul_roll_2__set__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->foul_roll);
  __Pyx_DECREF(__pyx_v_self->foul_roll);
  __pyx_v_self->foul_roll = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9foul_roll_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9foul_roll_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9foul_roll_4__del__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9foul_roll_4__del__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->foul_roll);
  __Pyx_DECREF(__pyx_v_self->foul_roll);
  __pyx_v_self->foul_roll = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":143
 * forward_model.immutable_types.add(Path)
 * 
 * cdef Path create_path(NodePtr node):             # <<<<<<<<<<<<<<
 *     cdef Path path = Path()
 *     path.set_node(node)
 */

static struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_create_path(__pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node) {
  struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_v_path = 0;
  struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_path", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":144
 * 
 * cdef Path create_path(NodePtr node):
 *     cdef Path path = Path()             # <<<<<<<<<<<<<<
 *     path.set_node(node)
 *     return path
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_path = ((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":145
 * cdef Path create_path(NodePtr node):
 *     cdef Path path = Path()
 *     path.set_node(node)             # <<<<<<<<<<<<<<
 *     return path
 * 
 */
  ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)__pyx_v_path->__pyx_vtab)->set_node(__pyx_v_path, __pyx_v_node);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":146
 *     cdef Path path = Path()
 *     path.set_node(node)
 *     return path             # <<<<<<<<<<<<<<
 * 
 * cdef class Pathfinder:
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_path);
  __pyx_r = __pyx_v_path;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":143
 * forward_model.immutable_types.add(Path)
 * 
 * cdef Path create_path(NodePtr node):             # <<<<<<<<<<<<<<
 *     cdef Path path = Path()
 *     path.set_node(node)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.create_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_path);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":162
 *     cdef mapcpp[double, vector[NodePtr]] risky_sets
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         cdef NodePtr empty_ptr
 *         for i in range(17):
 */

/* Python wrapper */
static void __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_1__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder___dealloc__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder___dealloc__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self) {
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_empty_ptr;
  long __pyx_v_i;
  long __pyx_v_j;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  long __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":164
 *     def __dealloc__(self):
 *         cdef NodePtr empty_ptr
 *         for i in range(17):             # <<<<<<<<<<<<<<
 *             for j in range(28):
 *                 self.locked_nodes[i][j] = empty_ptr
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 17; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":165
 *         cdef NodePtr empty_ptr
 *         for i in range(17):
 *             for j in range(28):             # <<<<<<<<<<<<<<
 *                 self.locked_nodes[i][j] = empty_ptr
 *                 self.nodes[i][j] = empty_ptr
 */
    for (__pyx_t_2 = 0; __pyx_t_2 < 28; __pyx_t_2+=1) {
      __pyx_v_j = __pyx_t_2;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":166
 *         for i in range(17):
 *             for j in range(28):
 *                 self.locked_nodes[i][j] = empty_ptr             # <<<<<<<<<<<<<<
 *                 self.nodes[i][j] = empty_ptr
 * 
 */
      ((__pyx_v_self->locked_nodes[__pyx_v_i])[__pyx_v_j]) = __pyx_v_empty_ptr;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":167
 *             for j in range(28):
 *                 self.locked_nodes[i][j] = empty_ptr
 *                 self.nodes[i][j] = empty_ptr             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, game, player, trr=False, directly_to_adjacent=False, can_block=False, can_handoff=False, can_foul=False):
 */
      ((__pyx_v_self->nodes[__pyx_v_i])[__pyx_v_j]) = __pyx_v_empty_ptr;
    }
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":162
 *     cdef mapcpp[double, vector[NodePtr]] risky_sets
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         cdef NodePtr empty_ptr
 *         for i in range(17):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":169
 *                 self.nodes[i][j] = empty_ptr
 * 
 *     def __init__(self, game, player, trr=False, directly_to_adjacent=False, can_block=False, can_handoff=False, can_foul=False):             # <<<<<<<<<<<<<<
 * 
 *         self.players_on_pitch = game.state.pitch.board
 */

/* Python wrapper */
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_game = 0;
  PyObject *__pyx_v_player = 0;
  PyObject *__pyx_v_trr = 0;
  PyObject *__pyx_v_directly_to_adjacent = 0;
  PyObject *__pyx_v_can_block = 0;
  PyObject *__pyx_v_can_handoff = 0;
  PyObject *__pyx_v_can_foul = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_game,&__pyx_n_s_player,&__pyx_n_s_trr,&__pyx_n_s_directly_to_adjacent,&__pyx_n_s_can_block,&__pyx_n_s_can_handoff,&__pyx_n_s_can_foul,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_game,&__pyx_n_s_player,&__pyx_n_s_trr,&__pyx_n_s_directly_to_adjacent,&__pyx_n_s_can_block,&__pyx_n_s_can_handoff,&__pyx_n_s_can_foul,0};
    #endif
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[2] = ((PyObject *)Py_False);
    values[3] = ((PyObject *)Py_False);
    values[4] = ((PyObject *)Py_False);
    values[5] = ((PyObject *)Py_False);
    values[6] = ((PyObject *)Py_False);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_VARARGS(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_game)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_player)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 7, 1); __PYX_ERR(0, 169, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trr);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_directly_to_adjacent);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_can_block);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_can_handoff);
          if (value) { values[5] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_can_foul);
          if (value) { values[6] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 169, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_VARARGS(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_VARARGS(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_game = values[0];
    __pyx_v_player = values[1];
    __pyx_v_trr = values[2];
    __pyx_v_directly_to_adjacent = values[3];
    __pyx_v_can_block = values[4];
    __pyx_v_can_handoff = values[5];
    __pyx_v_can_foul = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 7, __pyx_nargs); __PYX_ERR(0, 169, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Pathfinder.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_2__init__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self), __pyx_v_game, __pyx_v_player, __pyx_v_trr, __pyx_v_directly_to_adjacent, __pyx_v_can_block, __pyx_v_can_handoff, __pyx_v_can_foul);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_2__init__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, PyObject *__pyx_v_game, PyObject *__pyx_v_player, PyObject *__pyx_v_trr, PyObject *__pyx_v_directly_to_adjacent, PyObject *__pyx_v_can_block, PyObject *__pyx_v_can_handoff, PyObject *__pyx_v_can_foul) {
  PyObject *__pyx_v_ball = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_square = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  node_ns::Square __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":171
 *     def __init__(self, game, player, trr=False, directly_to_adjacent=False, can_block=False, can_handoff=False, can_foul=False):
 * 
 *         self.players_on_pitch = game.state.pitch.board             # <<<<<<<<<<<<<<
 * 
 *         self.game = game
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_game, __pyx_n_s_state); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_pitch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_board); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->players_on_pitch);
  __Pyx_DECREF(__pyx_v_self->players_on_pitch);
  __pyx_v_self->players_on_pitch = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":173
 *         self.players_on_pitch = game.state.pitch.board
 * 
 *         self.game = game             # <<<<<<<<<<<<<<
 *         self.pitch_width = self.game.arena.width - 1
 *         self.pitch_height = game.arena.height -1
 */
  __Pyx_INCREF(__pyx_v_game);
  __Pyx_GIVEREF(__pyx_v_game);
  __Pyx_GOTREF(__pyx_v_self->game);
  __Pyx_DECREF(__pyx_v_self->game);
  __pyx_v_self->game = __pyx_v_game;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":174
 * 
 *         self.game = game
 *         self.pitch_width = self.game.arena.width - 1             # <<<<<<<<<<<<<<
 *         self.pitch_height = game.arena.height -1
 *         self.start_pos = from_botbowl_Square( player.position )
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->game, __pyx_n_s_arena); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->pitch_width = __pyx_t_3;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":175
 *         self.game = game
 *         self.pitch_width = self.game.arena.width - 1
 *         self.pitch_height = game.arena.height -1             # <<<<<<<<<<<<<<
 *         self.start_pos = from_botbowl_Square( player.position )
 *         ball = self.game.get_ball()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_game, __pyx_n_s_arena); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->pitch_height = __pyx_t_3;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":176
 *         self.pitch_width = self.game.arena.width - 1
 *         self.pitch_height = game.arena.height -1
 *         self.start_pos = from_botbowl_Square( player.position )             # <<<<<<<<<<<<<<
 *         ball = self.game.get_ball()
 *         if ball is not None and ball.on_ground:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_self->start_pos = __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_from_botbowl_Square(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":177
 *         self.pitch_height = game.arena.height -1
 *         self.start_pos = from_botbowl_Square( player.position )
 *         ball = self.game.get_ball()             # <<<<<<<<<<<<<<
 *         if ball is not None and ball.on_ground:
 *             self.ball_pos = from_botbowl_Square(ball.position)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->game, __pyx_n_s_get_ball); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_3 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_3 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_4, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_3, 0+__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_ball = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":178
 *         self.start_pos = from_botbowl_Square( player.position )
 *         ball = self.game.get_ball()
 *         if ball is not None and ball.on_ground:             # <<<<<<<<<<<<<<
 *             self.ball_pos = from_botbowl_Square(ball.position)
 *         else:
 */
  __pyx_t_6 = (__pyx_v_ball != Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ball, __pyx_n_s_on_ground); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":179
 *         ball = self.game.get_ball()
 *         if ball is not None and ball.on_ground:
 *             self.ball_pos = from_botbowl_Square(ball.position)             # <<<<<<<<<<<<<<
 *         else:
 *             self.ball_pos = Square(-1, -1)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ball, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_self->ball_pos = __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_from_botbowl_Square(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":178
 *         self.start_pos = from_botbowl_Square( player.position )
 *         ball = self.game.get_ball()
 *         if ball is not None and ball.on_ground:             # <<<<<<<<<<<<<<
 *             self.ball_pos = from_botbowl_Square(ball.position)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":181
 *             self.ball_pos = from_botbowl_Square(ball.position)
 *         else:
 *             self.ball_pos = Square(-1, -1)             # <<<<<<<<<<<<<<
 * 
 *         self.carries_ball = False
 */
  /*else*/ {
    try {
      __pyx_t_8 = node_ns::Square(-1, -1);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 181, __pyx_L1_error)
    }
    __pyx_v_self->ball_pos = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_8);
  }
  __pyx_L3:;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":183
 *             self.ball_pos = Square(-1, -1)
 * 
 *         self.carries_ball = False             # <<<<<<<<<<<<<<
 *         self.endzone_x = -1
 *         self.has_target = False
 */
  __pyx_v_self->carries_ball = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":184
 * 
 *         self.carries_ball = False
 *         self.endzone_x = -1             # <<<<<<<<<<<<<<
 *         self.has_target = False
 *         self.target_is_int = False
 */
  __pyx_v_self->endzone_x = -1;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":185
 *         self.carries_ball = False
 *         self.endzone_x = -1
 *         self.has_target = False             # <<<<<<<<<<<<<<
 *         self.target_is_int = False
 *         self.target_is_square = False
 */
  __pyx_v_self->has_target = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":186
 *         self.endzone_x = -1
 *         self.has_target = False
 *         self.target_is_int = False             # <<<<<<<<<<<<<<
 *         self.target_is_square = False
 *         self.target_found = False
 */
  __pyx_v_self->target_is_int = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":187
 *         self.has_target = False
 *         self.target_is_int = False
 *         self.target_is_square = False             # <<<<<<<<<<<<<<
 *         self.target_found = False
 * 
 */
  __pyx_v_self->target_is_square = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":188
 *         self.target_is_int = False
 *         self.target_is_square = False
 *         self.target_found = False             # <<<<<<<<<<<<<<
 * 
 *         self.player = player # todo, assert no skills that aren't handled: twitchy, two_heads, break_tackle, etc..
 */
  __pyx_v_self->target_found = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":190
 *         self.target_found = False
 * 
 *         self.player = player # todo, assert no skills that aren't handled: twitchy, two_heads, break_tackle, etc..             # <<<<<<<<<<<<<<
 * 
 *         self.trr = trr
 */
  __Pyx_INCREF(__pyx_v_player);
  __Pyx_GIVEREF(__pyx_v_player);
  __Pyx_GOTREF(__pyx_v_self->player);
  __Pyx_DECREF(__pyx_v_self->player);
  __pyx_v_self->player = __pyx_v_player;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":192
 *         self.player = player # todo, assert no skills that aren't handled: twitchy, two_heads, break_tackle, etc..
 * 
 *         self.trr = trr             # <<<<<<<<<<<<<<
 *         self.can_block = can_block
 *         self.can_handoff = can_handoff
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_trr); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 192, __pyx_L1_error)
  __pyx_v_self->trr = __pyx_t_5;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":193
 * 
 *         self.trr = trr
 *         self.can_block = can_block             # <<<<<<<<<<<<<<
 *         self.can_handoff = can_handoff
 *         self.can_foul = can_foul
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_can_block); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 193, __pyx_L1_error)
  __pyx_v_self->can_block = __pyx_t_5;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":194
 *         self.trr = trr
 *         self.can_block = can_block
 *         self.can_handoff = can_handoff             # <<<<<<<<<<<<<<
 *         self.can_foul = can_foul
 *         self.is_stunty = player.has_skill(table.Skill.STUNTY)
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_can_handoff); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 194, __pyx_L1_error)
  __pyx_v_self->can_handoff = __pyx_t_5;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":195
 *         self.can_block = can_block
 *         self.can_handoff = can_handoff
 *         self.can_foul = can_foul             # <<<<<<<<<<<<<<
 *         self.is_stunty = player.has_skill(table.Skill.STUNTY)
 *         self.directly_to_adjacent = directly_to_adjacent
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_can_foul); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 195, __pyx_L1_error)
  __pyx_v_self->can_foul = __pyx_t_5;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":196
 *         self.can_handoff = can_handoff
 *         self.can_foul = can_foul
 *         self.is_stunty = player.has_skill(table.Skill.STUNTY)             # <<<<<<<<<<<<<<
 *         self.directly_to_adjacent = directly_to_adjacent
 *         self.dodge_target = agi_table[self.player.get_ag()] - 1
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_has_skill); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_table); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Skill); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_STUNTY); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  __pyx_t_3 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_3 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_3, 1+__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->is_stunty = __pyx_t_5;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":197
 *         self.can_foul = can_foul
 *         self.is_stunty = player.has_skill(table.Skill.STUNTY)
 *         self.directly_to_adjacent = directly_to_adjacent             # <<<<<<<<<<<<<<
 *         self.dodge_target = agi_table[self.player.get_ag()] - 1
 *         self.current_prob = 1.0
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_directly_to_adjacent); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 197, __pyx_L1_error)
  __pyx_v_self->directly_to_adjacent = __pyx_t_5;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":198
 *         self.is_stunty = player.has_skill(table.Skill.STUNTY)
 *         self.directly_to_adjacent = directly_to_adjacent
 *         self.dodge_target = agi_table[self.player.get_ag()] - 1             # <<<<<<<<<<<<<<
 *         self.current_prob = 1.0
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->player, __pyx_n_s_get_ag); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_3 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_3 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_4, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_3, 0+__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->dodge_target = ((__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_agi_table[__pyx_t_10]) - 1);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":199
 *         self.directly_to_adjacent = directly_to_adjacent
 *         self.dodge_target = agi_table[self.player.get_ag()] - 1
 *         self.current_prob = 1.0             # <<<<<<<<<<<<<<
 * 
 *         for p in game.get_players_on_pitch():
 */
  __pyx_v_self->current_prob = 1.0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":201
 *         self.current_prob = 1.0
 * 
 *         for p in game.get_players_on_pitch():             # <<<<<<<<<<<<<<
 *             if p.team != player.team and p.has_tackle_zone():
 *                 for square in game.get_adjacent_squares(p.position):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_game, __pyx_n_s_get_players_on_pitch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_3 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_3 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_4, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_3, 0+__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_10 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 201, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_1); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 201, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_1); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 201, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_11(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 201, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":202
 * 
 *         for p in game.get_players_on_pitch():
 *             if p.team != player.team and p.has_tackle_zone():             # <<<<<<<<<<<<<<
 *                 for square in game.get_adjacent_squares(p.position):
 *                     self.tzones[square.y][square.x] += 1
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_p, __pyx_n_s_team); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_team); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_7) {
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_p, __pyx_n_s_has_tackle_zone); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = NULL;
    __pyx_t_3 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_3 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_1, };
      __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_3, 0+__pyx_t_3);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 202, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_5 = __pyx_t_7;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_5) {

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":203
 *         for p in game.get_players_on_pitch():
 *             if p.team != player.team and p.has_tackle_zone():
 *                 for square in game.get_adjacent_squares(p.position):             # <<<<<<<<<<<<<<
 *                     self.tzones[square.y][square.x] += 1
 * 
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_game, __pyx_n_s_get_adjacent_squares); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_p, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = NULL;
      __pyx_t_3 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_3 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_1};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_3, 1+__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 203, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
        __pyx_t_4 = __pyx_t_9; __Pyx_INCREF(__pyx_t_4); __pyx_t_13 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_13 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 203, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 203, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      for (;;) {
        if (likely(!__pyx_t_14)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_9 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_13); __Pyx_INCREF(__pyx_t_9); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 203, __pyx_L1_error)
            #else
            __pyx_t_9 = PySequence_ITEM(__pyx_t_4, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 203, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
          } else {
            if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_13); __Pyx_INCREF(__pyx_t_9); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 203, __pyx_L1_error)
            #else
            __pyx_t_9 = PySequence_ITEM(__pyx_t_4, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 203, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
          }
        } else {
          __pyx_t_9 = __pyx_t_14(__pyx_t_4);
          if (unlikely(!__pyx_t_9)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 203, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_9);
        }
        __Pyx_XDECREF_SET(__pyx_v_square, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":204
 *             if p.team != player.team and p.has_tackle_zone():
 *                 for square in game.get_adjacent_squares(p.position):
 *                     self.tzones[square.y][square.x] += 1             # <<<<<<<<<<<<<<
 * 
 *     cpdef get_path(self, object target):
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_square, __pyx_n_s_y); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 204, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_15 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_15 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 204, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_square, __pyx_n_s_x); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 204, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 204, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        ((__pyx_v_self->tzones[__pyx_t_15])[__pyx_t_16]) = (((__pyx_v_self->tzones[__pyx_t_15])[__pyx_t_16]) + 1);

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":203
 *         for p in game.get_players_on_pitch():
 *             if p.team != player.team and p.has_tackle_zone():
 *                 for square in game.get_adjacent_squares(p.position):             # <<<<<<<<<<<<<<
 *                     self.tzones[square.y][square.x] += 1
 * 
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":202
 * 
 *         for p in game.get_players_on_pitch():
 *             if p.team != player.team and p.has_tackle_zone():             # <<<<<<<<<<<<<<
 *                 for square in game.get_adjacent_squares(p.position):
 *                     self.tzones[square.y][square.x] += 1
 */
    }

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":201
 *         self.current_prob = 1.0
 * 
 *         for p in game.get_players_on_pitch():             # <<<<<<<<<<<<<<
 *             if p.team != player.team and p.has_tackle_zone():
 *                 for square in game.get_adjacent_squares(p.position):
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":169
 *                 self.nodes[i][j] = empty_ptr
 * 
 *     def __init__(self, game, player, trr=False, directly_to_adjacent=False, can_block=False, can_handoff=False, can_foul=False):             # <<<<<<<<<<<<<<
 * 
 *         self.players_on_pitch = game.state.pitch.board
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Pathfinder.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ball);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_square);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":206
 *                     self.tzones[square.y][square.x] += 1
 * 
 *     cpdef get_path(self, object target):             # <<<<<<<<<<<<<<
 *         if type(target) == model.Square:
 *             self.target_square = from_botbowl_Square(target)
 */

static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_5get_path(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_get_path(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, PyObject *__pyx_v_target, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_paths = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_path", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #ifdef __Pyx_CyFunction_USED
      if (!__Pyx_IsCyOrPyCFunction(__pyx_t_1)
      #else
      if (!PyCFunction_Check(__pyx_t_1)
      #endif
              || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_5get_path)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_target};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 206, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":207
 * 
 *     cpdef get_path(self, object target):
 *         if type(target) == model.Square:             # <<<<<<<<<<<<<<
 *             self.target_square = from_botbowl_Square(target)
 *             self.target_is_square = True
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_model); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Square); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_target)), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":208
 *     cpdef get_path(self, object target):
 *         if type(target) == model.Square:
 *             self.target_square = from_botbowl_Square(target)             # <<<<<<<<<<<<<<
 *             self.target_is_square = True
 *             self.has_target = True
 */
    __pyx_v_self->target_square = __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_from_botbowl_Square(__pyx_v_target);

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":209
 *         if type(target) == model.Square:
 *             self.target_square = from_botbowl_Square(target)
 *             self.target_is_square = True             # <<<<<<<<<<<<<<
 *             self.has_target = True
 *         elif type(target) == int:
 */
    __pyx_v_self->target_is_square = 1;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":210
 *             self.target_square = from_botbowl_Square(target)
 *             self.target_is_square = True
 *             self.has_target = True             # <<<<<<<<<<<<<<
 *         elif type(target) == int:
 *             self.target_x = int(target)
 */
    __pyx_v_self->has_target = 1;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":207
 * 
 *     cpdef get_path(self, object target):
 *         if type(target) == model.Square:             # <<<<<<<<<<<<<<
 *             self.target_square = from_botbowl_Square(target)
 *             self.target_is_square = True
 */
    goto __pyx_L3;
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":211
 *             self.target_is_square = True
 *             self.has_target = True
 *         elif type(target) == int:             # <<<<<<<<<<<<<<
 *             self.target_x = int(target)
 *             self.target_is_int = True
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_target)), ((PyObject *)(&PyInt_Type)), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":212
 *             self.has_target = True
 *         elif type(target) == int:
 *             self.target_x = int(target)             # <<<<<<<<<<<<<<
 *             self.target_is_int = True
 *             self.has_target = True
 */
    __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_v_target); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 212, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->target_x = __pyx_t_5;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":213
 *         elif type(target) == int:
 *             self.target_x = int(target)
 *             self.target_is_int = True             # <<<<<<<<<<<<<<
 *             self.has_target = True
 * 
 */
    __pyx_v_self->target_is_int = 1;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":214
 *             self.target_x = int(target)
 *             self.target_is_int = True
 *             self.has_target = True             # <<<<<<<<<<<<<<
 * 
 *         paths = self.get_paths()
 */
    __pyx_v_self->has_target = 1;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":211
 *             self.target_is_square = True
 *             self.has_target = True
 *         elif type(target) == int:             # <<<<<<<<<<<<<<
 *             self.target_x = int(target)
 *             self.target_is_int = True
 */
  }
  __pyx_L3:;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":216
 *             self.has_target = True
 * 
 *         paths = self.get_paths()             # <<<<<<<<<<<<<<
 *         if len(paths) > 0:
 *             return paths[0]
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->get_paths(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_paths = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":217
 * 
 *         paths = self.get_paths()
 *         if len(paths) > 0:             # <<<<<<<<<<<<<<
 *             return paths[0]
 *         return None
 */
  __pyx_t_7 = PyObject_Length(__pyx_v_paths); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 217, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_7 > 0) != 0);
  if (__pyx_t_6) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":218
 *         paths = self.get_paths()
 *         if len(paths) > 0:
 *             return paths[0]             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_paths, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":217
 * 
 *         paths = self.get_paths()
 *         if len(paths) > 0:             # <<<<<<<<<<<<<<
 *             return paths[0]
 *         return None
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":219
 *         if len(paths) > 0:
 *             return paths[0]
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     cpdef object get_paths(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":206
 *                     self.tzones[square.y][square.x] += 1
 * 
 *     cpdef get_path(self, object target):             # <<<<<<<<<<<<<<
 *         if type(target) == model.Square:
 *             self.target_square = from_botbowl_Square(target)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Pathfinder.get_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_paths);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_5get_path(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_5get_path = {"get_path", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_5get_path, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_5get_path(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_target = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_path (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_target,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_target,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_target)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 206, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_path") < 0)) __PYX_ERR(0, 206, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_target = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_path", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 206, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Pathfinder.get_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4get_path(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self), __pyx_v_target);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4get_path(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, PyObject *__pyx_v_target) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_path", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_get_path(__pyx_v_self, __pyx_v_target, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Pathfinder.get_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":221
 *         return None
 * 
 *     cpdef object get_paths(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             Square start_square
 */

static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_7get_paths(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_get_paths(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, int __pyx_skip_dispatch) {
  node_ns::Square __pyx_v_start_square;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node;
  int __pyx_v_can_dodge;
  int __pyx_v_can_sure_feet;
  int __pyx_v_can_sure_hands;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  node_ns::Node *__pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_paths", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_paths); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #ifdef __Pyx_CyFunction_USED
      if (!__Pyx_IsCyOrPyCFunction(__pyx_t_1)
      #else
      if (!PyCFunction_Check(__pyx_t_1)
      #endif
              || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_7get_paths)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_4, };
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":228
 *             bint can_dodge, can_sure_feet, can_sure_hands
 * 
 *         self.carries_ball = self.player is self.game.get_ball_carrier()             # <<<<<<<<<<<<<<
 *         self.endzone_x = 1 if self.player.team is self.game.state.home_team else self.game.arena.width - 2
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->game, __pyx_n_s_get_ball_carrier); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_6 = (__pyx_v_self->player == __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->carries_ball = __pyx_t_6;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":229
 * 
 *         self.carries_ball = self.player is self.game.get_ball_carrier()
 *         self.endzone_x = 1 if self.player.team is self.game.state.home_team else self.game.arena.width - 2             # <<<<<<<<<<<<<<
 * 
 *         self.ma = self.player.num_moves_left()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->player, __pyx_n_s_team); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->game, __pyx_n_s_state); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_home_team); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = (__pyx_t_1 == __pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if ((__pyx_t_6 != 0)) {
    __pyx_t_5 = 1;
  } else {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->game, __pyx_n_s_arena); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_t_1, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __pyx_t_7;
  }
  __pyx_v_self->endzone_x = __pyx_t_5;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":231
 *         self.endzone_x = 1 if self.player.team is self.game.state.home_team else self.game.arena.width - 2
 * 
 *         self.ma = self.player.num_moves_left()             # <<<<<<<<<<<<<<
 *         self.gfis = self.player.num_gfis_left()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->player, __pyx_n_s_num_moves_left); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_2, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->ma = __pyx_t_5;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":232
 * 
 *         self.ma = self.player.num_moves_left()
 *         self.gfis = self.player.num_gfis_left()             # <<<<<<<<<<<<<<
 * 
 *         start_square = from_botbowl_Square(self.player.position)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->player, __pyx_n_s_num_gfis_left); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_2, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->gfis = __pyx_t_5;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":234
 *         self.gfis = self.player.num_gfis_left()
 * 
 *         start_square = from_botbowl_Square(self.player.position)             # <<<<<<<<<<<<<<
 * 
 *         can_dodge = self.player.has_skill(table.Skill.DODGE) and table.Skill.DODGE not in self.player.state.used_skills
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->player, __pyx_n_s_position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_start_square = __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_from_botbowl_Square(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":236
 *         start_square = from_botbowl_Square(self.player.position)
 * 
 *         can_dodge = self.player.has_skill(table.Skill.DODGE) and table.Skill.DODGE not in self.player.state.used_skills             # <<<<<<<<<<<<<<
 *         can_sure_feet = self.player.has_skill(table.Skill.SURE_FEET) and table.Skill.SURE_FEET not in self.player.state.used_skills
 *         can_sure_hands = self.player.has_skill(table.Skill.SURE_HANDS)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->player, __pyx_n_s_has_skill); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_table); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Skill); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_DODGE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_8) {
  } else {
    __pyx_t_6 = __pyx_t_8;
    goto __pyx_L3_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_table); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Skill); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_DODGE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->player, __pyx_n_s_state); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_used_skills); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_t_3, __pyx_t_2, Py_NE)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = (__pyx_t_8 != 0);
  __pyx_t_6 = __pyx_t_9;
  __pyx_L3_bool_binop_done:;
  __pyx_v_can_dodge = __pyx_t_6;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":237
 * 
 *         can_dodge = self.player.has_skill(table.Skill.DODGE) and table.Skill.DODGE not in self.player.state.used_skills
 *         can_sure_feet = self.player.has_skill(table.Skill.SURE_FEET) and table.Skill.SURE_FEET not in self.player.state.used_skills             # <<<<<<<<<<<<<<
 *         can_sure_hands = self.player.has_skill(table.Skill.SURE_HANDS)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->player, __pyx_n_s_has_skill); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_table); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Skill); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_SURE_FEET); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_1};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_9) {
  } else {
    __pyx_t_6 = __pyx_t_9;
    goto __pyx_L5_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_table); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Skill); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_SURE_FEET); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->player, __pyx_n_s_state); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_used_skills); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_t_1, Py_NE)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = (__pyx_t_9 != 0);
  __pyx_t_6 = __pyx_t_8;
  __pyx_L5_bool_binop_done:;
  __pyx_v_can_sure_feet = __pyx_t_6;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":238
 *         can_dodge = self.player.has_skill(table.Skill.DODGE) and table.Skill.DODGE not in self.player.state.used_skills
 *         can_sure_feet = self.player.has_skill(table.Skill.SURE_FEET) and table.Skill.SURE_FEET not in self.player.state.used_skills
 *         can_sure_hands = self.player.has_skill(table.Skill.SURE_HANDS)             # <<<<<<<<<<<<<<
 * 
 *         # Create root node
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->player, __pyx_n_s_has_skill); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_table); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Skill); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_SURE_HANDS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_can_sure_hands = __pyx_t_6;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":241
 * 
 *         # Create root node
 *         node = NodePtr(new Node(start_square, self.ma, self.gfis, 0, self.trr, can_dodge, can_sure_feet, can_sure_hands, self.can_foul, self.can_block, self.can_handoff))             # <<<<<<<<<<<<<<
 * 
 *         if not self.player.state.up:
 */
  try {
    __pyx_t_10 = new node_ns::Node(__pyx_v_start_square, __pyx_v_self->ma, __pyx_v_self->gfis, 0.0, __pyx_v_self->trr, __pyx_v_can_dodge, __pyx_v_can_sure_feet, __pyx_v_can_sure_hands, __pyx_v_self->can_foul, __pyx_v_self->can_block, __pyx_v_self->can_handoff);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 241, __pyx_L1_error)
  }
  __pyx_v_node = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr(__pyx_t_10);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":243
 *         node = NodePtr(new Node(start_square, self.ma, self.gfis, 0, self.trr, can_dodge, can_sure_feet, can_sure_hands, self.can_foul, self.can_block, self.can_handoff))
 * 
 *         if not self.player.state.up:             # <<<<<<<<<<<<<<
 *             node = self._expand_stand_up(node)
 *             self.nodes[node.get().position.y][node.get().position.x] = node
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->player, __pyx_n_s_state); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_up); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = ((!__pyx_t_6) != 0);
  if (__pyx_t_8) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":244
 * 
 *         if not self.player.state.up:
 *             node = self._expand_stand_up(node)             # <<<<<<<<<<<<<<
 *             self.nodes[node.get().position.y][node.get().position.x] = node
 *         self.open_set.push(node)
 */
    __pyx_v_node = ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_expand_stand_up(__pyx_v_self, __pyx_v_node);

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":245
 *         if not self.player.state.up:
 *             node = self._expand_stand_up(node)
 *             self.nodes[node.get().position.y][node.get().position.x] = node             # <<<<<<<<<<<<<<
 *         self.open_set.push(node)
 *         self._expansion()
 */
    ((__pyx_v_self->nodes[__pyx_v_node.get()->position.y])[__pyx_v_node.get()->position.x]) = __pyx_v_node;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":243
 *         node = NodePtr(new Node(start_square, self.ma, self.gfis, 0, self.trr, can_dodge, can_sure_feet, can_sure_hands, self.can_foul, self.can_block, self.can_handoff))
 * 
 *         if not self.player.state.up:             # <<<<<<<<<<<<<<
 *             node = self._expand_stand_up(node)
 *             self.nodes[node.get().position.y][node.get().position.x] = node
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":246
 *             node = self._expand_stand_up(node)
 *             self.nodes[node.get().position.y][node.get().position.x] = node
 *         self.open_set.push(node)             # <<<<<<<<<<<<<<
 *         self._expansion()
 *         self._clear()
 */
  __pyx_v_self->open_set.push(__pyx_v_node);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":247
 *             self.nodes[node.get().position.y][node.get().position.x] = node
 *         self.open_set.push(node)
 *         self._expansion()             # <<<<<<<<<<<<<<
 *         self._clear()
 * 
 */
  ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_expansion(__pyx_v_self);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":248
 *         self.open_set.push(node)
 *         self._expansion()
 *         self._clear()             # <<<<<<<<<<<<<<
 * 
 *         while (not self.target_found) and (not self.risky_sets.empty() ):
 */
  ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_clear(__pyx_v_self);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":250
 *         self._clear()
 * 
 *         while (not self.target_found) and (not self.risky_sets.empty() ):             # <<<<<<<<<<<<<<
 *             self._prepare_nodes()
 *             self._expansion()
 */
  while (1) {
    __pyx_t_6 = ((!(__pyx_v_self->target_found != 0)) != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_8 = __pyx_t_6;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_6 = ((!(__pyx_v_self->risky_sets.empty() != 0)) != 0);
    __pyx_t_8 = __pyx_t_6;
    __pyx_L10_bool_binop_done:;
    if (!__pyx_t_8) break;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":251
 * 
 *         while (not self.target_found) and (not self.risky_sets.empty() ):
 *             self._prepare_nodes()             # <<<<<<<<<<<<<<
 *             self._expansion()
 *             self._clear()
 */
    ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_prepare_nodes(__pyx_v_self);

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":252
 *         while (not self.target_found) and (not self.risky_sets.empty() ):
 *             self._prepare_nodes()
 *             self._expansion()             # <<<<<<<<<<<<<<
 *             self._clear()
 * 
 */
    ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_expansion(__pyx_v_self);

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":253
 *             self._prepare_nodes()
 *             self._expansion()
 *             self._clear()             # <<<<<<<<<<<<<<
 * 
 *         return self._collect_paths()
 */
    ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_clear(__pyx_v_self);
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":255
 *             self._clear()
 * 
 *         return self._collect_paths()             # <<<<<<<<<<<<<<
 * 
 *     cdef int _get_pickup_target(self, Square to_pos):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_collect_paths(__pyx_v_self); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":221
 *         return None
 * 
 *     cpdef object get_paths(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             Square start_square
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Pathfinder.get_paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_7get_paths(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_7get_paths = {"get_paths", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_7get_paths, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_7get_paths(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_paths (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_paths", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_paths", 0))) return NULL;
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6get_paths(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6get_paths(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_paths", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_get_paths(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Pathfinder.get_paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":257
 *         return self._collect_paths()
 * 
 *     cdef int _get_pickup_target(self, Square to_pos):             # <<<<<<<<<<<<<<
 *         cdef int target = self.dodge_target + self.tzones[to_pos.y][to_pos.x]
 *         if self.game.state.weather == table.WeatherType.POURING_RAIN:
 */

static int __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__get_pickup_target(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, node_ns::Square __pyx_v_to_pos) {
  int __pyx_v_target;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_pickup_target", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":258
 * 
 *     cdef int _get_pickup_target(self, Square to_pos):
 *         cdef int target = self.dodge_target + self.tzones[to_pos.y][to_pos.x]             # <<<<<<<<<<<<<<
 *         if self.game.state.weather == table.WeatherType.POURING_RAIN:
 *             target += 1
 */
  __pyx_v_target = (__pyx_v_self->dodge_target + ((__pyx_v_self->tzones[__pyx_v_to_pos.y])[__pyx_v_to_pos.x]));

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":259
 *     cdef int _get_pickup_target(self, Square to_pos):
 *         cdef int target = self.dodge_target + self.tzones[to_pos.y][to_pos.x]
 *         if self.game.state.weather == table.WeatherType.POURING_RAIN:             # <<<<<<<<<<<<<<
 *             target += 1
 *         return min(6, max(2, target))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->game, __pyx_n_s_state); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_weather); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_table); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_WeatherType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_POURING_RAIN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":260
 *         cdef int target = self.dodge_target + self.tzones[to_pos.y][to_pos.x]
 *         if self.game.state.weather == table.WeatherType.POURING_RAIN:
 *             target += 1             # <<<<<<<<<<<<<<
 *         return min(6, max(2, target))
 * 
 */
    __pyx_v_target = (__pyx_v_target + 1);

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":259
 *     cdef int _get_pickup_target(self, Square to_pos):
 *         cdef int target = self.dodge_target + self.tzones[to_pos.y][to_pos.x]
 *         if self.game.state.weather == table.WeatherType.POURING_RAIN:             # <<<<<<<<<<<<<<
 *             target += 1
 *         return min(6, max(2, target))
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":261
 *         if self.game.state.weather == table.WeatherType.POURING_RAIN:
 *             target += 1
 *         return min(6, max(2, target))             # <<<<<<<<<<<<<<
 * 
 *     cdef int _get_handoff_target(self, object catcher):
 */
  __pyx_t_5 = __pyx_v_target;
  __pyx_t_6 = 2;
  if (((__pyx_t_5 > __pyx_t_6) != 0)) {
    __pyx_t_7 = __pyx_t_5;
  } else {
    __pyx_t_7 = __pyx_t_6;
  }
  __pyx_t_6 = __pyx_t_7;
  __pyx_t_7 = 6;
  if (((__pyx_t_6 < __pyx_t_7) != 0)) {
    __pyx_t_8 = __pyx_t_6;
  } else {
    __pyx_t_8 = __pyx_t_7;
  }
  __pyx_r = __pyx_t_8;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":257
 *         return self._collect_paths()
 * 
 *     cdef int _get_pickup_target(self, Square to_pos):             # <<<<<<<<<<<<<<
 *         cdef int target = self.dodge_target + self.tzones[to_pos.y][to_pos.x]
 *         if self.game.state.weather == table.WeatherType.POURING_RAIN:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("botbowl.core.pathfinding.cython_pathfinding.Pathfinder._get_pickup_target", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":263
 *         return min(6, max(2, target))
 * 
 *     cdef int _get_handoff_target(self, object catcher):             # <<<<<<<<<<<<<<
 *         cdef int modifiers = self.game.get_catch_modifiers(catcher, handoff=True)
 *         cdef int target = agi_table[catcher.get_ag()] - modifiers
 */

static int __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__get_handoff_target(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, PyObject *__pyx_v_catcher) {
  int __pyx_v_modifiers;
  int __pyx_v_target;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  long __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_handoff_target", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":264
 * 
 *     cdef int _get_handoff_target(self, object catcher):
 *         cdef int modifiers = self.game.get_catch_modifiers(catcher, handoff=True)             # <<<<<<<<<<<<<<
 *         cdef int target = agi_table[catcher.get_ag()] - modifiers
 *         return min(6, max(2, target))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->game, __pyx_n_s_get_catch_modifiers); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_catcher);
  __Pyx_GIVEREF(__pyx_v_catcher);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_catcher);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_handoff, Py_True) < 0) __PYX_ERR(0, 264, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_modifiers = __pyx_t_5;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":265
 *     cdef int _get_handoff_target(self, object catcher):
 *         cdef int modifiers = self.game.get_catch_modifiers(catcher, handoff=True)
 *         cdef int target = agi_table[catcher.get_ag()] - modifiers             # <<<<<<<<<<<<<<
 *         return min(6, max(2, target))
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_catcher, __pyx_n_s_get_ag); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_2, };
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_target = ((__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_agi_table[__pyx_t_6]) - __pyx_v_modifiers);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":266
 *         cdef int modifiers = self.game.get_catch_modifiers(catcher, handoff=True)
 *         cdef int target = agi_table[catcher.get_ag()] - modifiers
 *         return min(6, max(2, target))             # <<<<<<<<<<<<<<
 * 
 *     cdef int _get_dodge_target(self, Square from_pos, Square to_pos):
 */
  __pyx_t_5 = __pyx_v_target;
  __pyx_t_7 = 2;
  if (((__pyx_t_5 > __pyx_t_7) != 0)) {
    __pyx_t_8 = __pyx_t_5;
  } else {
    __pyx_t_8 = __pyx_t_7;
  }
  __pyx_t_7 = __pyx_t_8;
  __pyx_t_8 = 6;
  if (((__pyx_t_7 < __pyx_t_8) != 0)) {
    __pyx_t_9 = __pyx_t_7;
  } else {
    __pyx_t_9 = __pyx_t_8;
  }
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":263
 *         return min(6, max(2, target))
 * 
 *     cdef int _get_handoff_target(self, object catcher):             # <<<<<<<<<<<<<<
 *         cdef int modifiers = self.game.get_catch_modifiers(catcher, handoff=True)
 *         cdef int target = agi_table[catcher.get_ag()] - modifiers
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("botbowl.core.pathfinding.cython_pathfinding.Pathfinder._get_handoff_target", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":268
 *         return min(6, max(2, target))
 * 
 *     cdef int _get_dodge_target(self, Square from_pos, Square to_pos):             # <<<<<<<<<<<<<<
 *         cdef int target = self.dodge_target + (0 if self.is_stunty else self.tzones[to_pos.y][to_pos.x])
 *         return min(6, max(2, target))
 */

static int __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__get_dodge_target(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, CYTHON_UNUSED node_ns::Square __pyx_v_from_pos, node_ns::Square __pyx_v_to_pos) {
  int __pyx_v_target;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  __Pyx_RefNannySetupContext("_get_dodge_target", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":269
 * 
 *     cdef int _get_dodge_target(self, Square from_pos, Square to_pos):
 *         cdef int target = self.dodge_target + (0 if self.is_stunty else self.tzones[to_pos.y][to_pos.x])             # <<<<<<<<<<<<<<
 *         return min(6, max(2, target))
 * 
 */
  if ((__pyx_v_self->is_stunty != 0)) {
    __pyx_t_1 = 0;
  } else {
    __pyx_t_1 = ((__pyx_v_self->tzones[__pyx_v_to_pos.y])[__pyx_v_to_pos.x]);
  }
  __pyx_v_target = (__pyx_v_self->dodge_target + __pyx_t_1);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":270
 *     cdef int _get_dodge_target(self, Square from_pos, Square to_pos):
 *         cdef int target = self.dodge_target + (0 if self.is_stunty else self.tzones[to_pos.y][to_pos.x])
 *         return min(6, max(2, target))             # <<<<<<<<<<<<<<
 * 
 *     cdef void _expand(self, NodePtr node):
 */
  __pyx_t_2 = __pyx_v_target;
  __pyx_t_1 = 2;
  if (((__pyx_t_2 > __pyx_t_1) != 0)) {
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  __pyx_t_1 = __pyx_t_3;
  __pyx_t_3 = 6;
  if (((__pyx_t_1 < __pyx_t_3) != 0)) {
    __pyx_t_4 = __pyx_t_1;
  } else {
    __pyx_t_4 = __pyx_t_3;
  }
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":268
 *         return min(6, max(2, target))
 * 
 *     cdef int _get_dodge_target(self, Square from_pos, Square to_pos):             # <<<<<<<<<<<<<<
 *         cdef int target = self.dodge_target + (0 if self.is_stunty else self.tzones[to_pos.y][to_pos.x])
 *         return min(6, max(2, target))
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":272
 *         return min(6, max(2, target))
 * 
 *     cdef void _expand(self, NodePtr node):             # <<<<<<<<<<<<<<
 *         cdef bint out_of_moves = node.get().moves_left + node.get().gfis_left <= 0
 *         cdef NodePtr next_node
 */

static void __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node) {
  int __pyx_v_out_of_moves;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_next_node;
  double __pyx_v_rounded_p;
  node_ns::Node *__pyx_v_parent;
  node_ns::Square __pyx_v_to_square;
  node_ns::Square __pyx_v_direction;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  node_ns::Square *__pyx_t_4;
  node_ns::Square *__pyx_t_5;
  node_ns::Square *__pyx_t_6;
  double __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_expand", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":273
 * 
 *     cdef void _expand(self, NodePtr node):
 *         cdef bint out_of_moves = node.get().moves_left + node.get().gfis_left <= 0             # <<<<<<<<<<<<<<
 *         cdef NodePtr next_node
 *         cdef double rounded_p
 */
  __pyx_v_out_of_moves = ((__pyx_v_node.get()->moves_left + __pyx_v_node.get()->gfis_left) <= 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":276
 *         cdef NodePtr next_node
 *         cdef double rounded_p
 *         cdef Node * parent = <Node *> node.get().parent.get()             # <<<<<<<<<<<<<<
 *         cdef Square to_square
 * 
 */
  __pyx_v_parent = ((node_ns::Node *)__pyx_v_node.get()->parent.get());

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":279
 *         cdef Square to_square
 * 
 *         if node.get().parent.use_count() == 0 or node.get().parent.get().position == node.get().position:             # <<<<<<<<<<<<<<
 *             parent = NULL
 * 
 */
  __pyx_t_2 = ((__pyx_v_node.get()->parent.use_count() == 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_node.get()->parent.get()->position == __pyx_v_node.get()->position) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":280
 * 
 *         if node.get().parent.use_count() == 0 or node.get().parent.get().position == node.get().position:
 *             parent = NULL             # <<<<<<<<<<<<<<
 * 
 *         if self.has_target:
 */
    __pyx_v_parent = NULL;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":279
 *         cdef Square to_square
 * 
 *         if node.get().parent.use_count() == 0 or node.get().parent.get().position == node.get().position:             # <<<<<<<<<<<<<<
 *             parent = NULL
 * 
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":282
 *             parent = NULL
 * 
 *         if self.has_target:             # <<<<<<<<<<<<<<
 *             if self.target_is_square and self.target_square.distance(node.get().position) > node.get().moves_left + node.get().gfis_left:
 *                 return
 */
  __pyx_t_1 = (__pyx_v_self->has_target != 0);
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":283
 * 
 *         if self.has_target:
 *             if self.target_is_square and self.target_square.distance(node.get().position) > node.get().moves_left + node.get().gfis_left:             # <<<<<<<<<<<<<<
 *                 return
 *             if self.target_is_int and abs(self.target_x - node.get().position.x) > node.get().moves_left + node.get().gfis_left:
 */
    __pyx_t_2 = (__pyx_v_self->target_is_square != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_self->target_square.distance(__pyx_v_node.get()->position) > (__pyx_v_node.get()->moves_left + __pyx_v_node.get()->gfis_left)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_1) {

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":284
 *         if self.has_target:
 *             if self.target_is_square and self.target_square.distance(node.get().position) > node.get().moves_left + node.get().gfis_left:
 *                 return             # <<<<<<<<<<<<<<
 *             if self.target_is_int and abs(self.target_x - node.get().position.x) > node.get().moves_left + node.get().gfis_left:
 *                 return
 */
      goto __pyx_L0;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":283
 * 
 *         if self.has_target:
 *             if self.target_is_square and self.target_square.distance(node.get().position) > node.get().moves_left + node.get().gfis_left:             # <<<<<<<<<<<<<<
 *                 return
 *             if self.target_is_int and abs(self.target_x - node.get().position.x) > node.get().moves_left + node.get().gfis_left:
 */
    }

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":285
 *             if self.target_is_square and self.target_square.distance(node.get().position) > node.get().moves_left + node.get().gfis_left:
 *                 return
 *             if self.target_is_int and abs(self.target_x - node.get().position.x) > node.get().moves_left + node.get().gfis_left:             # <<<<<<<<<<<<<<
 *                 return
 *             if self.target_is_square and node.get().position == self.target_square:
 */
    __pyx_t_2 = (__pyx_v_self->target_is_int != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_3 = abs((__pyx_v_self->target_x - __pyx_v_node.get()->position.x)); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 285, __pyx_L1_error)
    __pyx_t_2 = ((__pyx_t_3 > (__pyx_v_node.get()->moves_left + __pyx_v_node.get()->gfis_left)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_1) {

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":286
 *                 return
 *             if self.target_is_int and abs(self.target_x - node.get().position.x) > node.get().moves_left + node.get().gfis_left:
 *                 return             # <<<<<<<<<<<<<<
 *             if self.target_is_square and node.get().position == self.target_square:
 *                 self.target_found = True
 */
      goto __pyx_L0;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":285
 *             if self.target_is_square and self.target_square.distance(node.get().position) > node.get().moves_left + node.get().gfis_left:
 *                 return
 *             if self.target_is_int and abs(self.target_x - node.get().position.x) > node.get().moves_left + node.get().gfis_left:             # <<<<<<<<<<<<<<
 *                 return
 *             if self.target_is_square and node.get().position == self.target_square:
 */
    }

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":287
 *             if self.target_is_int and abs(self.target_x - node.get().position.x) > node.get().moves_left + node.get().gfis_left:
 *                 return
 *             if self.target_is_square and node.get().position == self.target_square:             # <<<<<<<<<<<<<<
 *                 self.target_found = True
 *                 return
 */
    __pyx_t_2 = (__pyx_v_self->target_is_square != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_node.get()->position == __pyx_v_self->target_square) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;
    if (__pyx_t_1) {

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":288
 *                 return
 *             if self.target_is_square and node.get().position == self.target_square:
 *                 self.target_found = True             # <<<<<<<<<<<<<<
 *                 return
 *             if self.target_is_int and node.get().position.x == self.target_x:
 */
      __pyx_v_self->target_found = 1;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":289
 *             if self.target_is_square and node.get().position == self.target_square:
 *                 self.target_found = True
 *                 return             # <<<<<<<<<<<<<<
 *             if self.target_is_int and node.get().position.x == self.target_x:
 *                 self.target_found = True
 */
      goto __pyx_L0;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":287
 *             if self.target_is_int and abs(self.target_x - node.get().position.x) > node.get().moves_left + node.get().gfis_left:
 *                 return
 *             if self.target_is_square and node.get().position == self.target_square:             # <<<<<<<<<<<<<<
 *                 self.target_found = True
 *                 return
 */
    }

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":290
 *                 self.target_found = True
 *                 return
 *             if self.target_is_int and node.get().position.x == self.target_x:             # <<<<<<<<<<<<<<
 *                 self.target_found = True
 *                 return
 */
    __pyx_t_2 = (__pyx_v_self->target_is_int != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L17_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_node.get()->position.x == __pyx_v_self->target_x) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L17_bool_binop_done:;
    if (__pyx_t_1) {

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":291
 *                 return
 *             if self.target_is_int and node.get().position.x == self.target_x:
 *                 self.target_found = True             # <<<<<<<<<<<<<<
 *                 return
 * 
 */
      __pyx_v_self->target_found = 1;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":292
 *             if self.target_is_int and node.get().position.x == self.target_x:
 *                 self.target_found = True
 *                 return             # <<<<<<<<<<<<<<
 * 
 *         if node.get().block_dice != 0 or node.get().handoff_roll != 0:
 */
      goto __pyx_L0;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":290
 *                 self.target_found = True
 *                 return
 *             if self.target_is_int and node.get().position.x == self.target_x:             # <<<<<<<<<<<<<<
 *                 self.target_found = True
 *                 return
 */
    }

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":282
 *             parent = NULL
 * 
 *         if self.has_target:             # <<<<<<<<<<<<<<
 *             if self.target_is_square and self.target_square.distance(node.get().position) > node.get().moves_left + node.get().gfis_left:
 *                 return
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":294
 *                 return
 * 
 *         if node.get().block_dice != 0 or node.get().handoff_roll != 0:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_2 = ((__pyx_v_node.get()->block_dice != 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L20_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_node.get()->handoff_roll != 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L20_bool_binop_done:;
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":295
 * 
 *         if node.get().block_dice != 0 or node.get().handoff_roll != 0:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         if self.carries_ball and node.get().position.x == self.endzone_x:
 */
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":294
 *                 return
 * 
 *         if node.get().block_dice != 0 or node.get().handoff_roll != 0:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":297
 *             return
 * 
 *         if self.carries_ball and node.get().position.x == self.endzone_x:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_2 = (__pyx_v_self->carries_ball != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L23_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_node.get()->position.x == __pyx_v_self->endzone_x) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L23_bool_binop_done:;
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":298
 * 
 *         if self.carries_ball and node.get().position.x == self.endzone_x:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         if (not self.carries_ball) and node.get().position == self.ball_pos:
 */
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":297
 *             return
 * 
 *         if self.carries_ball and node.get().position.x == self.endzone_x:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":300
 *             return
 * 
 *         if (not self.carries_ball) and node.get().position == self.ball_pos:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->carries_ball != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L26_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_node.get()->position == __pyx_v_self->ball_pos) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L26_bool_binop_done:;
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":301
 * 
 *         if (not self.carries_ball) and node.get().position == self.ball_pos:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         if out_of_moves and (not node.get().can_handoff) and (not node.get().can_foul):
 */
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":300
 *             return
 * 
 *         if (not self.carries_ball) and node.get().position == self.ball_pos:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":303
 *             return
 * 
 *         if out_of_moves and (not node.get().can_handoff) and (not node.get().can_foul):             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_2 = (__pyx_v_out_of_moves != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L29_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_node.get()->can_handoff != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L29_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_node.get()->can_foul != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L29_bool_binop_done:;
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":304
 * 
 *         if out_of_moves and (not node.get().can_handoff) and (not node.get().can_foul):
 *             return             # <<<<<<<<<<<<<<
 * 
 *         for direction in DIRECTIONS:
 */
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":303
 *             return
 * 
 *         if out_of_moves and (not node.get().can_handoff) and (not node.get().can_foul):             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":306
 *             return
 * 
 *         for direction in DIRECTIONS:             # <<<<<<<<<<<<<<
 *             if parent is not NULL:
 *                 to_square = direction + node.get().position
 */
  __pyx_t_5 = (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_DIRECTIONS + 8);
  for (__pyx_t_6 = __pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_DIRECTIONS; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_direction = (__pyx_t_4[0]);

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":307
 * 
 *         for direction in DIRECTIONS:
 *             if parent is not NULL:             # <<<<<<<<<<<<<<
 *                 to_square = direction + node.get().position
 *                 if parent.position == to_square:
 */
    __pyx_t_1 = ((__pyx_v_parent != NULL) != 0);
    if (__pyx_t_1) {

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":308
 *         for direction in DIRECTIONS:
 *             if parent is not NULL:
 *                 to_square = direction + node.get().position             # <<<<<<<<<<<<<<
 *                 if parent.position == to_square:
 *                     continue
 */
      __pyx_v_to_square = (__pyx_v_direction + __pyx_v_node.get()->position);

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":309
 *             if parent is not NULL:
 *                 to_square = direction + node.get().position
 *                 if parent.position == to_square:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_1 = ((__pyx_v_parent->position == __pyx_v_to_square) != 0);
      if (__pyx_t_1) {

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":310
 *                 to_square = direction + node.get().position
 *                 if parent.position == to_square:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 if parent.position.distance(to_square) < 2 and \
 */
        goto __pyx_L32_continue;

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":309
 *             if parent is not NULL:
 *                 to_square = direction + node.get().position
 *                 if parent.position == to_square:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":312
 *                     continue
 * 
 *                 if parent.position.distance(to_square) < 2 and \             # <<<<<<<<<<<<<<
 *                         (self.tzones[to_square.y][to_square.x] == 0 or \
 *                         self.tzones[parent.position.y][parent.position.x] == 0 ):
 */
      __pyx_t_2 = ((__pyx_v_parent->position.distance(__pyx_v_to_square) < 2) != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L37_bool_binop_done;
      }

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":313
 * 
 *                 if parent.position.distance(to_square) < 2 and \
 *                         (self.tzones[to_square.y][to_square.x] == 0 or \             # <<<<<<<<<<<<<<
 *                         self.tzones[parent.position.y][parent.position.x] == 0 ):
 *                     continue
 */
      __pyx_t_2 = ((((__pyx_v_self->tzones[__pyx_v_to_square.y])[__pyx_v_to_square.x]) == 0) != 0);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L37_bool_binop_done;
      }

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":314
 *                 if parent.position.distance(to_square) < 2 and \
 *                         (self.tzones[to_square.y][to_square.x] == 0 or \
 *                         self.tzones[parent.position.y][parent.position.x] == 0 ):             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_2 = ((((__pyx_v_self->tzones[__pyx_v_parent->position.y])[__pyx_v_parent->position.x]) == 0) != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L37_bool_binop_done:;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":312
 *                     continue
 * 
 *                 if parent.position.distance(to_square) < 2 and \             # <<<<<<<<<<<<<<
 *                         (self.tzones[to_square.y][to_square.x] == 0 or \
 *                         self.tzones[parent.position.y][parent.position.x] == 0 ):
 */
      if (__pyx_t_1) {

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":315
 *                         (self.tzones[to_square.y][to_square.x] == 0 or \
 *                         self.tzones[parent.position.y][parent.position.x] == 0 ):
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *             next_node = self._expand_node(node, direction, out_of_moves)
 */
        goto __pyx_L32_continue;

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":312
 *                     continue
 * 
 *                 if parent.position.distance(to_square) < 2 and \             # <<<<<<<<<<<<<<
 *                         (self.tzones[to_square.y][to_square.x] == 0 or \
 *                         self.tzones[parent.position.y][parent.position.x] == 0 ):
 */
      }

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":307
 * 
 *         for direction in DIRECTIONS:
 *             if parent is not NULL:             # <<<<<<<<<<<<<<
 *                 to_square = direction + node.get().position
 *                 if parent.position == to_square:
 */
    }

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":317
 *                     continue
 * 
 *             next_node = self._expand_node(node, direction, out_of_moves)             # <<<<<<<<<<<<<<
 *             if next_node.use_count() == 0:
 *                 continue
 */
    __pyx_v_next_node = ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_expand_node(__pyx_v_self, __pyx_v_node, __pyx_v_direction, __pyx_v_out_of_moves);

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":318
 * 
 *             next_node = self._expand_node(node, direction, out_of_moves)
 *             if next_node.use_count() == 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             rounded_p = next_node.get().prob
 */
    __pyx_t_1 = ((__pyx_v_next_node.use_count() == 0) != 0);
    if (__pyx_t_1) {

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":319
 *             next_node = self._expand_node(node, direction, out_of_moves)
 *             if next_node.use_count() == 0:
 *                 continue             # <<<<<<<<<<<<<<
 *             rounded_p = next_node.get().prob
 * 
 */
      goto __pyx_L32_continue;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":318
 * 
 *             next_node = self._expand_node(node, direction, out_of_moves)
 *             if next_node.use_count() == 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             rounded_p = next_node.get().prob
 */
    }

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":320
 *             if next_node.use_count() == 0:
 *                 continue
 *             rounded_p = next_node.get().prob             # <<<<<<<<<<<<<<
 * 
 *             if rounded_p < self.current_prob:
 */
    __pyx_t_7 = __pyx_v_next_node.get()->prob;
    __pyx_v_rounded_p = __pyx_t_7;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":322
 *             rounded_p = next_node.get().prob
 * 
 *             if rounded_p < self.current_prob:             # <<<<<<<<<<<<<<
 *                 self.risky_sets[rounded_p].push_back(next_node) #add risky move. if 'prob' is not a key, it's inited with default constructor
 *             else:
 */
    __pyx_t_1 = ((__pyx_v_rounded_p < __pyx_v_self->current_prob) != 0);
    if (__pyx_t_1) {

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":323
 * 
 *             if rounded_p < self.current_prob:
 *                 self.risky_sets[rounded_p].push_back(next_node) #add risky move. if 'prob' is not a key, it's inited with default constructor             # <<<<<<<<<<<<<<
 *             else:
 *                 self.open_set.push(next_node)
 */
      try {
        (__pyx_v_self->risky_sets[__pyx_v_rounded_p]).push_back(__pyx_v_next_node);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 323, __pyx_L1_error)
      }

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":322
 *             rounded_p = next_node.get().prob
 * 
 *             if rounded_p < self.current_prob:             # <<<<<<<<<<<<<<
 *                 self.risky_sets[rounded_p].push_back(next_node) #add risky move. if 'prob' is not a key, it's inited with default constructor
 *             else:
 */
      goto __pyx_L41;
    }

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":325
 *                 self.risky_sets[rounded_p].push_back(next_node) #add risky move. if 'prob' is not a key, it's inited with default constructor
 *             else:
 *                 self.open_set.push(next_node)             # <<<<<<<<<<<<<<
 *                 self.nodes[next_node.get().position.y][next_node.get().position.x] = next_node
 * 
 */
    /*else*/ {
      __pyx_v_self->open_set.push(__pyx_v_next_node);

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":326
 *             else:
 *                 self.open_set.push(next_node)
 *                 self.nodes[next_node.get().position.y][next_node.get().position.x] = next_node             # <<<<<<<<<<<<<<
 * 
 *     cdef NodePtr _expand_node(self, NodePtr node, Square direction, bint out_of_moves):
 */
      ((__pyx_v_self->nodes[__pyx_v_next_node.get()->position.y])[__pyx_v_next_node.get()->position.x]) = __pyx_v_next_node;
    }
    __pyx_L41:;
    __pyx_L32_continue:;
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":272
 *         return min(6, max(2, target))
 * 
 *     cdef void _expand(self, NodePtr node):             # <<<<<<<<<<<<<<
 *         cdef bint out_of_moves = node.get().moves_left + node.get().gfis_left <= 0
 *         cdef NodePtr next_node
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("botbowl.core.pathfinding.cython_pathfinding.Pathfinder._expand", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":328
 *                 self.nodes[next_node.get().position.y][next_node.get().position.x] = next_node
 * 
 *     cdef NodePtr _expand_node(self, NodePtr node, Square direction, bint out_of_moves):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double euclidean_distance
 */

static __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand_node(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node, node_ns::Square __pyx_v_direction, int __pyx_v_out_of_moves) {
  double __pyx_v_euclidean_distance;
  node_ns::Square __pyx_v_to_pos;
  PyObject *__pyx_v_player_at = NULL;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_expand_node", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":333
 *             Square to_pos
 * 
 *         euclidean_distance = node.get().euclidean_distance + 1.0 if direction.x == 0 or direction.y == 0 else node.get().euclidean_distance + 1.41421             # <<<<<<<<<<<<<<
 *         to_pos = node.get().position + direction
 *         if not (1 <= to_pos.x < self.pitch_width and 1 <= to_pos.y < self.pitch_height):
 */
  __pyx_t_3 = ((__pyx_v_direction.x == 0) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_direction.y == 0) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L3_bool_binop_done:;
  if (__pyx_t_2) {
    __pyx_t_1 = (__pyx_v_node.get()->euclidean_distance + 1.0);
  } else {
    __pyx_t_1 = (__pyx_v_node.get()->euclidean_distance + 1.41421);
  }
  __pyx_v_euclidean_distance = __pyx_t_1;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":334
 * 
 *         euclidean_distance = node.get().euclidean_distance + 1.0 if direction.x == 0 or direction.y == 0 else node.get().euclidean_distance + 1.41421
 *         to_pos = node.get().position + direction             # <<<<<<<<<<<<<<
 *         if not (1 <= to_pos.x < self.pitch_width and 1 <= to_pos.y < self.pitch_height):
 *             return NodePtr()
 */
  __pyx_v_to_pos = (__pyx_v_node.get()->position + __pyx_v_direction);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":335
 *         euclidean_distance = node.get().euclidean_distance + 1.0 if direction.x == 0 or direction.y == 0 else node.get().euclidean_distance + 1.41421
 *         to_pos = node.get().position + direction
 *         if not (1 <= to_pos.x < self.pitch_width and 1 <= to_pos.y < self.pitch_height):             # <<<<<<<<<<<<<<
 *             return NodePtr()
 *         player_at = self.players_on_pitch[to_pos.y][to_pos.x]
 */
  __pyx_t_3 = (1 <= __pyx_v_to_pos.x);
  if (__pyx_t_3) {
    __pyx_t_3 = (__pyx_v_to_pos.x < __pyx_v_self->pitch_width);
  }
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = (1 <= __pyx_v_to_pos.y);
  if (__pyx_t_4) {
    __pyx_t_4 = (__pyx_v_to_pos.y < __pyx_v_self->pitch_height);
  }
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L6_bool_binop_done:;
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (__pyx_t_3) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":336
 *         to_pos = node.get().position + direction
 *         if not (1 <= to_pos.x < self.pitch_width and 1 <= to_pos.y < self.pitch_height):
 *             return NodePtr()             # <<<<<<<<<<<<<<
 *         player_at = self.players_on_pitch[to_pos.y][to_pos.x]
 * 
 */
    __pyx_r = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr();
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":335
 *         euclidean_distance = node.get().euclidean_distance + 1.0 if direction.x == 0 or direction.y == 0 else node.get().euclidean_distance + 1.41421
 *         to_pos = node.get().position + direction
 *         if not (1 <= to_pos.x < self.pitch_width and 1 <= to_pos.y < self.pitch_height):             # <<<<<<<<<<<<<<
 *             return NodePtr()
 *         player_at = self.players_on_pitch[to_pos.y][to_pos.x]
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":337
 *         if not (1 <= to_pos.x < self.pitch_width and 1 <= to_pos.y < self.pitch_height):
 *             return NodePtr()
 *         player_at = self.players_on_pitch[to_pos.y][to_pos.x]             # <<<<<<<<<<<<<<
 * 
 *         if player_at is not None:
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_self->players_on_pitch, __pyx_v_to_pos.y, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_5, __pyx_v_to_pos.x, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_player_at = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":339
 *         player_at = self.players_on_pitch[to_pos.y][to_pos.x]
 * 
 *         if player_at is not None:             # <<<<<<<<<<<<<<
 *             if node.get().can_handoff and player_at.team == self.player.team and player_at.can_catch():
 *                 return self._expand_handoff_node(node, to_pos)
 */
  __pyx_t_3 = (__pyx_v_player_at != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":340
 * 
 *         if player_at is not None:
 *             if node.get().can_handoff and player_at.team == self.player.team and player_at.can_catch():             # <<<<<<<<<<<<<<
 *                 return self._expand_handoff_node(node, to_pos)
 *             elif node.get().can_block and player_at.team != self.player.team and player_at.state.up:
 */
    __pyx_t_3 = (__pyx_v_node.get()->can_handoff != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_player_at, __pyx_n_s_team); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->player, __pyx_n_s_team); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_6, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_player_at, __pyx_n_s_can_catch); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_6, };
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_2 = __pyx_t_3;
    __pyx_L10_bool_binop_done:;
    if (__pyx_t_2) {

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":341
 *         if player_at is not None:
 *             if node.get().can_handoff and player_at.team == self.player.team and player_at.can_catch():
 *                 return self._expand_handoff_node(node, to_pos)             # <<<<<<<<<<<<<<
 *             elif node.get().can_block and player_at.team != self.player.team and player_at.state.up:
 *                 return self._expand_block_node(node, euclidean_distance, to_pos, player_at)
 */
      __pyx_r = ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_expand_handoff_node(__pyx_v_self, __pyx_v_node, __pyx_v_to_pos);
      goto __pyx_L0;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":340
 * 
 *         if player_at is not None:
 *             if node.get().can_handoff and player_at.team == self.player.team and player_at.can_catch():             # <<<<<<<<<<<<<<
 *                 return self._expand_handoff_node(node, to_pos)
 *             elif node.get().can_block and player_at.team != self.player.team and player_at.state.up:
 */
    }

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":342
 *             if node.get().can_handoff and player_at.team == self.player.team and player_at.can_catch():
 *                 return self._expand_handoff_node(node, to_pos)
 *             elif node.get().can_block and player_at.team != self.player.team and player_at.state.up:             # <<<<<<<<<<<<<<
 *                 return self._expand_block_node(node, euclidean_distance, to_pos, player_at)
 *             elif node.get().can_foul and player_at.team != self.player.team and not player_at.state.up:
 */
    __pyx_t_3 = (__pyx_v_node.get()->can_block != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_player_at, __pyx_n_s_team); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->player, __pyx_n_s_team); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_7, __pyx_t_5, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_player_at, __pyx_n_s_state); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_up); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = __pyx_t_3;
    __pyx_L13_bool_binop_done:;
    if (__pyx_t_2) {

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":343
 *                 return self._expand_handoff_node(node, to_pos)
 *             elif node.get().can_block and player_at.team != self.player.team and player_at.state.up:
 *                 return self._expand_block_node(node, euclidean_distance, to_pos, player_at)             # <<<<<<<<<<<<<<
 *             elif node.get().can_foul and player_at.team != self.player.team and not player_at.state.up:
 *                 return self._expand_foul_node(node, to_pos, player_at)
 */
      __pyx_r = ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_expand_block_node(__pyx_v_self, __pyx_v_node, __pyx_v_euclidean_distance, __pyx_v_to_pos, __pyx_v_player_at);
      goto __pyx_L0;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":342
 *             if node.get().can_handoff and player_at.team == self.player.team and player_at.can_catch():
 *                 return self._expand_handoff_node(node, to_pos)
 *             elif node.get().can_block and player_at.team != self.player.team and player_at.state.up:             # <<<<<<<<<<<<<<
 *                 return self._expand_block_node(node, euclidean_distance, to_pos, player_at)
 *             elif node.get().can_foul and player_at.team != self.player.team and not player_at.state.up:
 */
    }

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":344
 *             elif node.get().can_block and player_at.team != self.player.team and player_at.state.up:
 *                 return self._expand_block_node(node, euclidean_distance, to_pos, player_at)
 *             elif node.get().can_foul and player_at.team != self.player.team and not player_at.state.up:             # <<<<<<<<<<<<<<
 *                 return self._expand_foul_node(node, to_pos, player_at)
 *             return NodePtr()
 */
    __pyx_t_3 = (__pyx_v_node.get()->can_foul != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_player_at, __pyx_n_s_team); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->player, __pyx_n_s_team); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_5, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_player_at, __pyx_n_s_state); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_up); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_4 = ((!__pyx_t_3) != 0);
    __pyx_t_2 = __pyx_t_4;
    __pyx_L16_bool_binop_done:;
    if (__pyx_t_2) {

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":345
 *                 return self._expand_block_node(node, euclidean_distance, to_pos, player_at)
 *             elif node.get().can_foul and player_at.team != self.player.team and not player_at.state.up:
 *                 return self._expand_foul_node(node, to_pos, player_at)             # <<<<<<<<<<<<<<
 *             return NodePtr()
 *         if not out_of_moves:
 */
      __pyx_r = ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_expand_foul_node(__pyx_v_self, __pyx_v_node, __pyx_v_to_pos, __pyx_v_player_at);
      goto __pyx_L0;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":344
 *             elif node.get().can_block and player_at.team != self.player.team and player_at.state.up:
 *                 return self._expand_block_node(node, euclidean_distance, to_pos, player_at)
 *             elif node.get().can_foul and player_at.team != self.player.team and not player_at.state.up:             # <<<<<<<<<<<<<<
 *                 return self._expand_foul_node(node, to_pos, player_at)
 *             return NodePtr()
 */
    }

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":346
 *             elif node.get().can_foul and player_at.team != self.player.team and not player_at.state.up:
 *                 return self._expand_foul_node(node, to_pos, player_at)
 *             return NodePtr()             # <<<<<<<<<<<<<<
 *         if not out_of_moves:
 *             return self._expand_move_node(node, euclidean_distance, to_pos)
 */
    __pyx_r = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr();
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":339
 *         player_at = self.players_on_pitch[to_pos.y][to_pos.x]
 * 
 *         if player_at is not None:             # <<<<<<<<<<<<<<
 *             if node.get().can_handoff and player_at.team == self.player.team and player_at.can_catch():
 *                 return self._expand_handoff_node(node, to_pos)
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":347
 *                 return self._expand_foul_node(node, to_pos, player_at)
 *             return NodePtr()
 *         if not out_of_moves:             # <<<<<<<<<<<<<<
 *             return self._expand_move_node(node, euclidean_distance, to_pos)
 *         return NodePtr()
 */
  __pyx_t_2 = ((!(__pyx_v_out_of_moves != 0)) != 0);
  if (__pyx_t_2) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":348
 *             return NodePtr()
 *         if not out_of_moves:
 *             return self._expand_move_node(node, euclidean_distance, to_pos)             # <<<<<<<<<<<<<<
 *         return NodePtr()
 * 
 */
    __pyx_r = ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_expand_move_node(__pyx_v_self, __pyx_v_node, __pyx_v_euclidean_distance, __pyx_v_to_pos);
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":347
 *                 return self._expand_foul_node(node, to_pos, player_at)
 *             return NodePtr()
 *         if not out_of_moves:             # <<<<<<<<<<<<<<
 *             return self._expand_move_node(node, euclidean_distance, to_pos)
 *         return NodePtr()
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":349
 *         if not out_of_moves:
 *             return self._expand_move_node(node, euclidean_distance, to_pos)
 *         return NodePtr()             # <<<<<<<<<<<<<<
 * 
 *     cdef NodePtr _expand_move_node(self, NodePtr node, double euclidean_distance, Square to_pos):
 */
  __pyx_r = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr();
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":328
 *                 self.nodes[next_node.get().position.y][next_node.get().position.x] = next_node
 * 
 *     cdef NodePtr _expand_node(self, NodePtr node, Square direction, bint out_of_moves):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double euclidean_distance
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("botbowl.core.pathfinding.cython_pathfinding.Pathfinder._expand_node", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_player_at);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":351
 *         return NodePtr()
 * 
 *     cdef NodePtr _expand_move_node(self, NodePtr node, double euclidean_distance, Square to_pos):             # <<<<<<<<<<<<<<
 *         cdef:
 *             NodePtr best_node, best_before, next_node
 */

static __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand_move_node(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node, double __pyx_v_euclidean_distance, node_ns::Square __pyx_v_to_pos) {
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_best_node;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_best_before;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_next_node;
  int __pyx_v_gfi;
  int __pyx_v_target;
  int __pyx_v_moves_left_next;
  int __pyx_v_gfis_left_next;
  int __pyx_v_total_moves_left;
  int __pyx_v_best_total_moves_left;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  long __pyx_t_2;
  long __pyx_t_3;
  int __pyx_t_4;
  node_ns::Node *__pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_expand_move_node", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":357
 *             int target, moves_left_next, gfis_left_next, total_moves_left
 * 
 *         gfi = node.get().moves_left == 0             # <<<<<<<<<<<<<<
 *         best_node = self.nodes[to_pos.y][to_pos.x]
 *         best_before = self.locked_nodes[to_pos.y][to_pos.x]
 */
  __pyx_v_gfi = (__pyx_v_node.get()->moves_left == 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":358
 * 
 *         gfi = node.get().moves_left == 0
 *         best_node = self.nodes[to_pos.y][to_pos.x]             # <<<<<<<<<<<<<<
 *         best_before = self.locked_nodes[to_pos.y][to_pos.x]
 * 
 */
  __pyx_v_best_node = ((__pyx_v_self->nodes[__pyx_v_to_pos.y])[__pyx_v_to_pos.x]);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":359
 *         gfi = node.get().moves_left == 0
 *         best_node = self.nodes[to_pos.y][to_pos.x]
 *         best_before = self.locked_nodes[to_pos.y][to_pos.x]             # <<<<<<<<<<<<<<
 * 
 *         moves_left_next = max(0, node.get().moves_left - 1)
 */
  __pyx_v_best_before = ((__pyx_v_self->locked_nodes[__pyx_v_to_pos.y])[__pyx_v_to_pos.x]);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":361
 *         best_before = self.locked_nodes[to_pos.y][to_pos.x]
 * 
 *         moves_left_next = max(0, node.get().moves_left - 1)             # <<<<<<<<<<<<<<
 *         gfis_left_next = node.get().gfis_left - 1 if gfi else node.get().gfis_left
 *         total_moves_left = moves_left_next + gfis_left_next
 */
  __pyx_t_1 = (__pyx_v_node.get()->moves_left - 1);
  __pyx_t_2 = 0;
  if (((__pyx_t_1 > __pyx_t_2) != 0)) {
    __pyx_t_3 = __pyx_t_1;
  } else {
    __pyx_t_3 = __pyx_t_2;
  }
  __pyx_v_moves_left_next = __pyx_t_3;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":362
 * 
 *         moves_left_next = max(0, node.get().moves_left - 1)
 *         gfis_left_next = node.get().gfis_left - 1 if gfi else node.get().gfis_left             # <<<<<<<<<<<<<<
 *         total_moves_left = moves_left_next + gfis_left_next
 *         if best_node.use_count()>0:
 */
  if ((__pyx_v_gfi != 0)) {
    __pyx_t_3 = (__pyx_v_node.get()->gfis_left - 1);
  } else {
    __pyx_t_3 = __pyx_v_node.get()->gfis_left;
  }
  __pyx_v_gfis_left_next = __pyx_t_3;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":363
 *         moves_left_next = max(0, node.get().moves_left - 1)
 *         gfis_left_next = node.get().gfis_left - 1 if gfi else node.get().gfis_left
 *         total_moves_left = moves_left_next + gfis_left_next             # <<<<<<<<<<<<<<
 *         if best_node.use_count()>0:
 *             best_total_moves_left = best_node.get().moves_left + best_node.get().gfis_left
 */
  __pyx_v_total_moves_left = (__pyx_v_moves_left_next + __pyx_v_gfis_left_next);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":364
 *         gfis_left_next = node.get().gfis_left - 1 if gfi else node.get().gfis_left
 *         total_moves_left = moves_left_next + gfis_left_next
 *         if best_node.use_count()>0:             # <<<<<<<<<<<<<<
 *             best_total_moves_left = best_node.get().moves_left + best_node.get().gfis_left
 *             if total_moves_left <= best_total_moves_left:
 */
  __pyx_t_4 = ((__pyx_v_best_node.use_count() > 0) != 0);
  if (__pyx_t_4) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":365
 *         total_moves_left = moves_left_next + gfis_left_next
 *         if best_node.use_count()>0:
 *             best_total_moves_left = best_node.get().moves_left + best_node.get().gfis_left             # <<<<<<<<<<<<<<
 *             if total_moves_left <= best_total_moves_left:
 *                 return NodePtr()
 */
    __pyx_v_best_total_moves_left = (__pyx_v_best_node.get()->moves_left + __pyx_v_best_node.get()->gfis_left);

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":366
 *         if best_node.use_count()>0:
 *             best_total_moves_left = best_node.get().moves_left + best_node.get().gfis_left
 *             if total_moves_left <= best_total_moves_left:             # <<<<<<<<<<<<<<
 *                 return NodePtr()
 * 
 */
    __pyx_t_4 = ((__pyx_v_total_moves_left <= __pyx_v_best_total_moves_left) != 0);
    if (__pyx_t_4) {

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":367
 *             best_total_moves_left = best_node.get().moves_left + best_node.get().gfis_left
 *             if total_moves_left <= best_total_moves_left:
 *                 return NodePtr()             # <<<<<<<<<<<<<<
 * 
 *         next_node = NodePtr(new Node(node, to_pos, moves_left_next, gfis_left_next, euclidean_distance))
 */
      __pyx_r = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr();
      goto __pyx_L0;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":366
 *         if best_node.use_count()>0:
 *             best_total_moves_left = best_node.get().moves_left + best_node.get().gfis_left
 *             if total_moves_left <= best_total_moves_left:             # <<<<<<<<<<<<<<
 *                 return NodePtr()
 * 
 */
    }

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":364
 *         gfis_left_next = node.get().gfis_left - 1 if gfi else node.get().gfis_left
 *         total_moves_left = moves_left_next + gfis_left_next
 *         if best_node.use_count()>0:             # <<<<<<<<<<<<<<
 *             best_total_moves_left = best_node.get().moves_left + best_node.get().gfis_left
 *             if total_moves_left <= best_total_moves_left:
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":369
 *                 return NodePtr()
 * 
 *         next_node = NodePtr(new Node(node, to_pos, moves_left_next, gfis_left_next, euclidean_distance))             # <<<<<<<<<<<<<<
 *         if gfi:
 *             next_node.get().apply_gfi()
 */
  try {
    __pyx_t_5 = new node_ns::Node(__pyx_v_node, __pyx_v_to_pos, __pyx_v_moves_left_next, __pyx_v_gfis_left_next, __pyx_v_euclidean_distance);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 369, __pyx_L1_error)
  }
  __pyx_v_next_node = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr(__pyx_t_5);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":370
 * 
 *         next_node = NodePtr(new Node(node, to_pos, moves_left_next, gfis_left_next, euclidean_distance))
 *         if gfi:             # <<<<<<<<<<<<<<
 *             next_node.get().apply_gfi()
 *         if self.tzones[node.get().position.y][node.get().position.x] > 0:
 */
  __pyx_t_4 = (__pyx_v_gfi != 0);
  if (__pyx_t_4) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":371
 *         next_node = NodePtr(new Node(node, to_pos, moves_left_next, gfis_left_next, euclidean_distance))
 *         if gfi:
 *             next_node.get().apply_gfi()             # <<<<<<<<<<<<<<
 *         if self.tzones[node.get().position.y][node.get().position.x] > 0:
 *             target = self._get_dodge_target(node.get().position, to_pos)
 */
    __pyx_v_next_node.get()->apply_gfi();

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":370
 * 
 *         next_node = NodePtr(new Node(node, to_pos, moves_left_next, gfis_left_next, euclidean_distance))
 *         if gfi:             # <<<<<<<<<<<<<<
 *             next_node.get().apply_gfi()
 *         if self.tzones[node.get().position.y][node.get().position.x] > 0:
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":372
 *         if gfi:
 *             next_node.get().apply_gfi()
 *         if self.tzones[node.get().position.y][node.get().position.x] > 0:             # <<<<<<<<<<<<<<
 *             target = self._get_dodge_target(node.get().position, to_pos)
 *             next_node.get().apply_dodge(target)
 */
  __pyx_t_4 = ((((__pyx_v_self->tzones[__pyx_v_node.get()->position.y])[__pyx_v_node.get()->position.x]) > 0) != 0);
  if (__pyx_t_4) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":373
 *             next_node.get().apply_gfi()
 *         if self.tzones[node.get().position.y][node.get().position.x] > 0:
 *             target = self._get_dodge_target(node.get().position, to_pos)             # <<<<<<<<<<<<<<
 *             next_node.get().apply_dodge(target)
 *         if to_pos == self.ball_pos:
 */
    __pyx_v_target = ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_get_dodge_target(__pyx_v_self, __pyx_v_node.get()->position, __pyx_v_to_pos);

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":374
 *         if self.tzones[node.get().position.y][node.get().position.x] > 0:
 *             target = self._get_dodge_target(node.get().position, to_pos)
 *             next_node.get().apply_dodge(target)             # <<<<<<<<<<<<<<
 *         if to_pos == self.ball_pos:
 *             target = self._get_pickup_target(to_pos)
 */
    __pyx_v_next_node.get()->apply_dodge(__pyx_v_target);

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":372
 *         if gfi:
 *             next_node.get().apply_gfi()
 *         if self.tzones[node.get().position.y][node.get().position.x] > 0:             # <<<<<<<<<<<<<<
 *             target = self._get_dodge_target(node.get().position, to_pos)
 *             next_node.get().apply_dodge(target)
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":375
 *             target = self._get_dodge_target(node.get().position, to_pos)
 *             next_node.get().apply_dodge(target)
 *         if to_pos == self.ball_pos:             # <<<<<<<<<<<<<<
 *             target = self._get_pickup_target(to_pos)
 *             next_node.get().apply_pickup(target)
 */
  __pyx_t_4 = ((__pyx_v_to_pos == __pyx_v_self->ball_pos) != 0);
  if (__pyx_t_4) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":376
 *             next_node.get().apply_dodge(target)
 *         if to_pos == self.ball_pos:
 *             target = self._get_pickup_target(to_pos)             # <<<<<<<<<<<<<<
 *             next_node.get().apply_pickup(target)
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 */
    __pyx_v_target = ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_get_pickup_target(__pyx_v_self, __pyx_v_to_pos);

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":377
 *         if to_pos == self.ball_pos:
 *             target = self._get_pickup_target(to_pos)
 *             next_node.get().apply_pickup(target)             # <<<<<<<<<<<<<<
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 *             return NodePtr()
 */
    __pyx_v_next_node.get()->apply_pickup(__pyx_v_target);

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":375
 *             target = self._get_dodge_target(node.get().position, to_pos)
 *             next_node.get().apply_dodge(target)
 *         if to_pos == self.ball_pos:             # <<<<<<<<<<<<<<
 *             target = self._get_pickup_target(to_pos)
 *             next_node.get().apply_pickup(target)
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":378
 *             target = self._get_pickup_target(to_pos)
 *             next_node.get().apply_pickup(target)
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:             # <<<<<<<<<<<<<<
 *             return NodePtr()
 *         return next_node
 */
  __pyx_t_6 = ((__pyx_v_best_before.use_count() > 0) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_6 = ((((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_dominant(__pyx_v_self, __pyx_v_next_node, __pyx_v_best_before) == __pyx_v_best_before) != 0);
  __pyx_t_4 = __pyx_t_6;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_4) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":379
 *             next_node.get().apply_pickup(target)
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 *             return NodePtr()             # <<<<<<<<<<<<<<
 *         return next_node
 * 
 */
    __pyx_r = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr();
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":378
 *             target = self._get_pickup_target(to_pos)
 *             next_node.get().apply_pickup(target)
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:             # <<<<<<<<<<<<<<
 *             return NodePtr()
 *         return next_node
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":380
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 *             return NodePtr()
 *         return next_node             # <<<<<<<<<<<<<<
 * 
 *     cdef NodePtr _expand_foul_node(self, NodePtr node, Square to_pos, object player_at):
 */
  __pyx_r = __pyx_v_next_node;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":351
 *         return NodePtr()
 * 
 *     cdef NodePtr _expand_move_node(self, NodePtr node, double euclidean_distance, Square to_pos):             # <<<<<<<<<<<<<<
 *         cdef:
 *             NodePtr best_node, best_before, next_node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("botbowl.core.pathfinding.cython_pathfinding.Pathfinder._expand_move_node", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":382
 *         return next_node
 * 
 *     cdef NodePtr _expand_foul_node(self, NodePtr node, Square to_pos, object player_at):             # <<<<<<<<<<<<<<
 *         cdef:
 *             NodePtr best_node, best_before, next_node
 */

static __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand_foul_node(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node, node_ns::Square __pyx_v_to_pos, PyObject *__pyx_v_player_at) {
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_best_node;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_best_before;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_next_node;
  int __pyx_v_target;
  int __pyx_v_assists_from;
  int __pyx_v_assists_to;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  int __pyx_t_9;
  node_ns::Node *__pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_expand_foul_node", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":387
 *             int target, assists_from, assists_to
 * 
 *         best_node = self.nodes[to_pos.y][to_pos.x]             # <<<<<<<<<<<<<<
 *         best_before = self.locked_nodes[to_pos.y][to_pos.x]
 *         assists_from, assists_to = self.game.num_assists_at(self.player, player_at, to_botbowl_Square(node.get().position), foul=True)
 */
  __pyx_v_best_node = ((__pyx_v_self->nodes[__pyx_v_to_pos.y])[__pyx_v_to_pos.x]);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":388
 * 
 *         best_node = self.nodes[to_pos.y][to_pos.x]
 *         best_before = self.locked_nodes[to_pos.y][to_pos.x]             # <<<<<<<<<<<<<<
 *         assists_from, assists_to = self.game.num_assists_at(self.player, player_at, to_botbowl_Square(node.get().position), foul=True)
 *         target = min(12, max(2, player_at.get_av() + 1 - assists_from + assists_to))
 */
  __pyx_v_best_before = ((__pyx_v_self->locked_nodes[__pyx_v_to_pos.y])[__pyx_v_to_pos.x]);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":389
 *         best_node = self.nodes[to_pos.y][to_pos.x]
 *         best_before = self.locked_nodes[to_pos.y][to_pos.x]
 *         assists_from, assists_to = self.game.num_assists_at(self.player, player_at, to_botbowl_Square(node.get().position), foul=True)             # <<<<<<<<<<<<<<
 *         target = min(12, max(2, player_at.get_av() + 1 - assists_from + assists_to))
 *         next_node = NodePtr( new Node(node, to_pos, 0, 0, node.get().euclidean_distance) )
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->game, __pyx_n_s_num_assists_at); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_to_botbowl_Square(__pyx_v_node.get()->position); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->player);
  __Pyx_GIVEREF(__pyx_v_self->player);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->player);
  __Pyx_INCREF(__pyx_v_player_at);
  __Pyx_GIVEREF(__pyx_v_player_at);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_player_at);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_foul, Py_True) < 0) __PYX_ERR(0, 389, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
    PyObject* sequence = __pyx_t_4;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 389, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1);
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_1); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_1); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_1), 2) < 0) __PYX_ERR(0, 389, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 389, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_assists_from = __pyx_t_6;
  __pyx_v_assists_to = __pyx_t_7;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":390
 *         best_before = self.locked_nodes[to_pos.y][to_pos.x]
 *         assists_from, assists_to = self.game.num_assists_at(self.player, player_at, to_botbowl_Square(node.get().position), foul=True)
 *         target = min(12, max(2, player_at.get_av() + 1 - assists_from + assists_to))             # <<<<<<<<<<<<<<
 *         next_node = NodePtr( new Node(node, to_pos, 0, 0, node.get().euclidean_distance) )
 *         next_node.get().apply_foul(target)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_player_at, __pyx_n_s_get_av); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_2, };
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_assists_from); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_assists_to); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = 2;
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_9) {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = 12;
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_9) {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_target = __pyx_t_7;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":391
 *         assists_from, assists_to = self.game.num_assists_at(self.player, player_at, to_botbowl_Square(node.get().position), foul=True)
 *         target = min(12, max(2, player_at.get_av() + 1 - assists_from + assists_to))
 *         next_node = NodePtr( new Node(node, to_pos, 0, 0, node.get().euclidean_distance) )             # <<<<<<<<<<<<<<
 *         next_node.get().apply_foul(target)
 * 
 */
  try {
    __pyx_t_10 = new node_ns::Node(__pyx_v_node, __pyx_v_to_pos, 0, 0, __pyx_v_node.get()->euclidean_distance);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 391, __pyx_L1_error)
  }
  __pyx_v_next_node = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr(__pyx_t_10);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":392
 *         target = min(12, max(2, player_at.get_av() + 1 - assists_from + assists_to))
 *         next_node = NodePtr( new Node(node, to_pos, 0, 0, node.get().euclidean_distance) )
 *         next_node.get().apply_foul(target)             # <<<<<<<<<<<<<<
 * 
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:
 */
  __pyx_v_next_node.get()->apply_foul(__pyx_v_target);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":394
 *         next_node.get().apply_foul(target)
 * 
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:             # <<<<<<<<<<<<<<
 *             return NodePtr()
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 */
  __pyx_t_11 = ((__pyx_v_best_node.use_count() > 0) != 0);
  if (__pyx_t_11) {
  } else {
    __pyx_t_9 = __pyx_t_11;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_11 = ((((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_best(__pyx_v_self, __pyx_v_next_node, __pyx_v_best_node) == __pyx_v_best_node) != 0);
  __pyx_t_9 = __pyx_t_11;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_9) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":395
 * 
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:
 *             return NodePtr()             # <<<<<<<<<<<<<<
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 *             return NodePtr()
 */
    __pyx_r = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr();
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":394
 *         next_node.get().apply_foul(target)
 * 
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:             # <<<<<<<<<<<<<<
 *             return NodePtr()
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":396
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:
 *             return NodePtr()
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:             # <<<<<<<<<<<<<<
 *             return NodePtr()
 *         return next_node
 */
  __pyx_t_11 = ((__pyx_v_best_before.use_count() > 0) != 0);
  if (__pyx_t_11) {
  } else {
    __pyx_t_9 = __pyx_t_11;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_11 = ((((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_dominant(__pyx_v_self, __pyx_v_next_node, __pyx_v_best_before) == __pyx_v_best_before) != 0);
  __pyx_t_9 = __pyx_t_11;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_9) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":397
 *             return NodePtr()
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 *             return NodePtr()             # <<<<<<<<<<<<<<
 *         return next_node
 * 
 */
    __pyx_r = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr();
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":396
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:
 *             return NodePtr()
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:             # <<<<<<<<<<<<<<
 *             return NodePtr()
 *         return next_node
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":398
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 *             return NodePtr()
 *         return next_node             # <<<<<<<<<<<<<<
 * 
 *     cdef NodePtr _expand_handoff_node(self, NodePtr node, Square to_pos):
 */
  __pyx_r = __pyx_v_next_node;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":382
 *         return next_node
 * 
 *     cdef NodePtr _expand_foul_node(self, NodePtr node, Square to_pos, object player_at):             # <<<<<<<<<<<<<<
 *         cdef:
 *             NodePtr best_node, best_before, next_node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("botbowl.core.pathfinding.cython_pathfinding.Pathfinder._expand_foul_node", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":400
 *         return next_node
 * 
 *     cdef NodePtr _expand_handoff_node(self, NodePtr node, Square to_pos):             # <<<<<<<<<<<<<<
 *         cdef:
 *             NodePtr best_node, best_before, next_node
 */

static __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand_handoff_node(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node, node_ns::Square __pyx_v_to_pos) {
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_best_node;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_best_before;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_next_node;
  int __pyx_v_target;
  PyObject *__pyx_v_player_at = 0;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  node_ns::Node *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_expand_handoff_node", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":405
 *             int target
 *             object player_at
 *         best_node = self.nodes[to_pos.y][to_pos.x]             # <<<<<<<<<<<<<<
 *         best_before = self.locked_nodes[to_pos.y][to_pos.x]
 *         player_at = self.players_on_pitch[to_pos.y][to_pos.x]
 */
  __pyx_v_best_node = ((__pyx_v_self->nodes[__pyx_v_to_pos.y])[__pyx_v_to_pos.x]);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":406
 *             object player_at
 *         best_node = self.nodes[to_pos.y][to_pos.x]
 *         best_before = self.locked_nodes[to_pos.y][to_pos.x]             # <<<<<<<<<<<<<<
 *         player_at = self.players_on_pitch[to_pos.y][to_pos.x]
 * 
 */
  __pyx_v_best_before = ((__pyx_v_self->locked_nodes[__pyx_v_to_pos.y])[__pyx_v_to_pos.x]);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":407
 *         best_node = self.nodes[to_pos.y][to_pos.x]
 *         best_before = self.locked_nodes[to_pos.y][to_pos.x]
 *         player_at = self.players_on_pitch[to_pos.y][to_pos.x]             # <<<<<<<<<<<<<<
 * 
 *         next_node = NodePtr( new Node(node, to_pos, 0, 0, node.get().euclidean_distance))
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->players_on_pitch, __pyx_v_to_pos.y, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_to_pos.x, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_player_at = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":409
 *         player_at = self.players_on_pitch[to_pos.y][to_pos.x]
 * 
 *         next_node = NodePtr( new Node(node, to_pos, 0, 0, node.get().euclidean_distance))             # <<<<<<<<<<<<<<
 *         target = self._get_handoff_target(player_at)
 *         next_node.get().apply_handoff(target)
 */
  try {
    __pyx_t_3 = new node_ns::Node(__pyx_v_node, __pyx_v_to_pos, 0, 0, __pyx_v_node.get()->euclidean_distance);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 409, __pyx_L1_error)
  }
  __pyx_v_next_node = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr(__pyx_t_3);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":410
 * 
 *         next_node = NodePtr( new Node(node, to_pos, 0, 0, node.get().euclidean_distance))
 *         target = self._get_handoff_target(player_at)             # <<<<<<<<<<<<<<
 *         next_node.get().apply_handoff(target)
 * 
 */
  __pyx_v_target = ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_get_handoff_target(__pyx_v_self, __pyx_v_player_at);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":411
 *         next_node = NodePtr( new Node(node, to_pos, 0, 0, node.get().euclidean_distance))
 *         target = self._get_handoff_target(player_at)
 *         next_node.get().apply_handoff(target)             # <<<<<<<<<<<<<<
 * 
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:
 */
  __pyx_v_next_node.get()->apply_handoff(__pyx_v_target);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":413
 *         next_node.get().apply_handoff(target)
 * 
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:             # <<<<<<<<<<<<<<
 *             return NodePtr()
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 */
  __pyx_t_5 = ((__pyx_v_best_node.use_count() > 0) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = ((((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_best(__pyx_v_self, __pyx_v_next_node, __pyx_v_best_node) == __pyx_v_best_node) != 0);
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":414
 * 
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:
 *             return NodePtr()             # <<<<<<<<<<<<<<
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 *             return NodePtr()
 */
    __pyx_r = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr();
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":413
 *         next_node.get().apply_handoff(target)
 * 
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:             # <<<<<<<<<<<<<<
 *             return NodePtr()
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":415
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:
 *             return NodePtr()
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:             # <<<<<<<<<<<<<<
 *             return NodePtr()
 *         return next_node
 */
  __pyx_t_5 = ((__pyx_v_best_before.use_count() > 0) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_5 = ((((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_dominant(__pyx_v_self, __pyx_v_next_node, __pyx_v_best_before) == __pyx_v_best_before) != 0);
  __pyx_t_4 = __pyx_t_5;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_4) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":416
 *             return NodePtr()
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 *             return NodePtr()             # <<<<<<<<<<<<<<
 *         return next_node
 * 
 */
    __pyx_r = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr();
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":415
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:
 *             return NodePtr()
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:             # <<<<<<<<<<<<<<
 *             return NodePtr()
 *         return next_node
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":417
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 *             return NodePtr()
 *         return next_node             # <<<<<<<<<<<<<<
 * 
 *     cdef NodePtr _expand_block_node(self, NodePtr node, double euclidean_distance, Square to_pos, object player_at):
 */
  __pyx_r = __pyx_v_next_node;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":400
 *         return next_node
 * 
 *     cdef NodePtr _expand_handoff_node(self, NodePtr node, Square to_pos):             # <<<<<<<<<<<<<<
 *         cdef:
 *             NodePtr best_node, best_before, next_node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("botbowl.core.pathfinding.cython_pathfinding.Pathfinder._expand_handoff_node", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_player_at);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":419
 *         return next_node
 * 
 *     cdef NodePtr _expand_block_node(self, NodePtr node, double euclidean_distance, Square to_pos, object player_at):             # <<<<<<<<<<<<<<
 *         cdef:
 *             NodePtr best_node, best_before, next_node
 */

static __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand_block_node(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node, double __pyx_v_euclidean_distance, node_ns::Square __pyx_v_to_pos, PyObject *__pyx_v_player_at) {
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_best_node;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_best_before;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_next_node;
  int __pyx_v_moves_left_next;
  int __pyx_v_gfis_left_next;
  int __pyx_v_block_dice;
  int __pyx_v_gfi;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  long __pyx_t_5;
  node_ns::Node *__pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_expand_block_node", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":425
 *             bint gfi
 * 
 *         best_node = self.nodes[to_pos.y][to_pos.x]             # <<<<<<<<<<<<<<
 *         best_before = self.locked_nodes[to_pos.y][to_pos.x]
 *         block_dice = self.game.num_block_dice_at(attacker=self.player, defender=player_at,
 */
  __pyx_v_best_node = ((__pyx_v_self->nodes[__pyx_v_to_pos.y])[__pyx_v_to_pos.x]);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":426
 * 
 *         best_node = self.nodes[to_pos.y][to_pos.x]
 *         best_before = self.locked_nodes[to_pos.y][to_pos.x]             # <<<<<<<<<<<<<<
 *         block_dice = self.game.num_block_dice_at(attacker=self.player, defender=player_at,
 *                                                  position= to_botbowl_Square( node.get().position), blitz=True)
 */
  __pyx_v_best_before = ((__pyx_v_self->locked_nodes[__pyx_v_to_pos.y])[__pyx_v_to_pos.x]);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":427
 *         best_node = self.nodes[to_pos.y][to_pos.x]
 *         best_before = self.locked_nodes[to_pos.y][to_pos.x]
 *         block_dice = self.game.num_block_dice_at(attacker=self.player, defender=player_at,             # <<<<<<<<<<<<<<
 *                                                  position= to_botbowl_Square( node.get().position), blitz=True)
 *         gfi = node.get().moves_left == 0
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->game, __pyx_n_s_num_block_dice_at); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_attacker, __pyx_v_self->player) < 0) __PYX_ERR(0, 427, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_defender, __pyx_v_player_at) < 0) __PYX_ERR(0, 427, __pyx_L1_error)

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":428
 *         best_before = self.locked_nodes[to_pos.y][to_pos.x]
 *         block_dice = self.game.num_block_dice_at(attacker=self.player, defender=player_at,
 *                                                  position= to_botbowl_Square( node.get().position), blitz=True)             # <<<<<<<<<<<<<<
 *         gfi = node.get().moves_left == 0
 *         moves_left_next = node.get().moves_left - 1 if not gfi else node.get().moves_left
 */
  __pyx_t_3 = __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_to_botbowl_Square(__pyx_v_node.get()->position); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_position, __pyx_t_3) < 0) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_blitz, Py_True) < 0) __PYX_ERR(0, 427, __pyx_L1_error)

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":427
 *         best_node = self.nodes[to_pos.y][to_pos.x]
 *         best_before = self.locked_nodes[to_pos.y][to_pos.x]
 *         block_dice = self.game.num_block_dice_at(attacker=self.player, defender=player_at,             # <<<<<<<<<<<<<<
 *                                                  position= to_botbowl_Square( node.get().position), blitz=True)
 *         gfi = node.get().moves_left == 0
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_block_dice = __pyx_t_4;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":429
 *         block_dice = self.game.num_block_dice_at(attacker=self.player, defender=player_at,
 *                                                  position= to_botbowl_Square( node.get().position), blitz=True)
 *         gfi = node.get().moves_left == 0             # <<<<<<<<<<<<<<
 *         moves_left_next = node.get().moves_left - 1 if not gfi else node.get().moves_left
 *         gfis_left_next = node.get().gfis_left - 1 if gfi else node.get().gfis_left
 */
  __pyx_v_gfi = (__pyx_v_node.get()->moves_left == 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":430
 *                                                  position= to_botbowl_Square( node.get().position), blitz=True)
 *         gfi = node.get().moves_left == 0
 *         moves_left_next = node.get().moves_left - 1 if not gfi else node.get().moves_left             # <<<<<<<<<<<<<<
 *         gfis_left_next = node.get().gfis_left - 1 if gfi else node.get().gfis_left
 *         next_node = NodePtr( new Node(node, to_pos, moves_left_next, gfis_left_next, euclidean_distance, block_dice))
 */
  if (((!(__pyx_v_gfi != 0)) != 0)) {
    __pyx_t_5 = (__pyx_v_node.get()->moves_left - 1);
  } else {
    __pyx_t_5 = __pyx_v_node.get()->moves_left;
  }
  __pyx_v_moves_left_next = __pyx_t_5;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":431
 *         gfi = node.get().moves_left == 0
 *         moves_left_next = node.get().moves_left - 1 if not gfi else node.get().moves_left
 *         gfis_left_next = node.get().gfis_left - 1 if gfi else node.get().gfis_left             # <<<<<<<<<<<<<<
 *         next_node = NodePtr( new Node(node, to_pos, moves_left_next, gfis_left_next, euclidean_distance, block_dice))
 *         next_node.get().can_block = False
 */
  if ((__pyx_v_gfi != 0)) {
    __pyx_t_5 = (__pyx_v_node.get()->gfis_left - 1);
  } else {
    __pyx_t_5 = __pyx_v_node.get()->gfis_left;
  }
  __pyx_v_gfis_left_next = __pyx_t_5;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":432
 *         moves_left_next = node.get().moves_left - 1 if not gfi else node.get().moves_left
 *         gfis_left_next = node.get().gfis_left - 1 if gfi else node.get().gfis_left
 *         next_node = NodePtr( new Node(node, to_pos, moves_left_next, gfis_left_next, euclidean_distance, block_dice))             # <<<<<<<<<<<<<<
 *         next_node.get().can_block = False
 * 
 */
  try {
    __pyx_t_6 = new node_ns::Node(__pyx_v_node, __pyx_v_to_pos, __pyx_v_moves_left_next, __pyx_v_gfis_left_next, __pyx_v_euclidean_distance, __pyx_v_block_dice);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 432, __pyx_L1_error)
  }
  __pyx_v_next_node = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr(__pyx_t_6);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":433
 *         gfis_left_next = node.get().gfis_left - 1 if gfi else node.get().gfis_left
 *         next_node = NodePtr( new Node(node, to_pos, moves_left_next, gfis_left_next, euclidean_distance, block_dice))
 *         next_node.get().can_block = False             # <<<<<<<<<<<<<<
 * 
 *         if gfi:
 */
  __pyx_v_next_node.get()->can_block = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":435
 *         next_node.get().can_block = False
 * 
 *         if gfi:             # <<<<<<<<<<<<<<
 *             node.get().apply_gfi()
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:
 */
  __pyx_t_7 = (__pyx_v_gfi != 0);
  if (__pyx_t_7) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":436
 * 
 *         if gfi:
 *             node.get().apply_gfi()             # <<<<<<<<<<<<<<
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:
 *             return NodePtr()
 */
    __pyx_v_node.get()->apply_gfi();

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":435
 *         next_node.get().can_block = False
 * 
 *         if gfi:             # <<<<<<<<<<<<<<
 *             node.get().apply_gfi()
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":437
 *         if gfi:
 *             node.get().apply_gfi()
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:             # <<<<<<<<<<<<<<
 *             return NodePtr()
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 */
  __pyx_t_8 = ((__pyx_v_best_node.use_count() > 0) != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_8 = ((((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_best(__pyx_v_self, __pyx_v_next_node, __pyx_v_best_node) == __pyx_v_best_node) != 0);
  __pyx_t_7 = __pyx_t_8;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_7) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":438
 *             node.get().apply_gfi()
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:
 *             return NodePtr()             # <<<<<<<<<<<<<<
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 *             return NodePtr()
 */
    __pyx_r = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr();
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":437
 *         if gfi:
 *             node.get().apply_gfi()
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:             # <<<<<<<<<<<<<<
 *             return NodePtr()
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":439
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:
 *             return NodePtr()
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:             # <<<<<<<<<<<<<<
 *             return NodePtr()
 *         return next_node
 */
  __pyx_t_8 = ((__pyx_v_best_before.use_count() > 0) != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_8 = ((((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_dominant(__pyx_v_self, __pyx_v_next_node, __pyx_v_best_before) == __pyx_v_best_before) != 0);
  __pyx_t_7 = __pyx_t_8;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_7) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":440
 *             return NodePtr()
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 *             return NodePtr()             # <<<<<<<<<<<<<<
 *         return next_node
 * 
 */
    __pyx_r = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr();
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":439
 *         if best_node.use_count()>0 and self._best(next_node, best_node) == best_node:
 *             return NodePtr()
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:             # <<<<<<<<<<<<<<
 *             return NodePtr()
 *         return next_node
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":441
 *         if best_before.use_count()>0 and self._dominant(next_node, best_before) == best_before:
 *             return NodePtr()
 *         return next_node             # <<<<<<<<<<<<<<
 * 
 *     cdef NodePtr _expand_stand_up(self, NodePtr node):
 */
  __pyx_r = __pyx_v_next_node;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":419
 *         return next_node
 * 
 *     cdef NodePtr _expand_block_node(self, NodePtr node, double euclidean_distance, Square to_pos, object player_at):             # <<<<<<<<<<<<<<
 *         cdef:
 *             NodePtr best_node, best_before, next_node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("botbowl.core.pathfinding.cython_pathfinding.Pathfinder._expand_block_node", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":443
 *         return next_node
 * 
 *     cdef NodePtr _expand_stand_up(self, NodePtr node):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int target
 */

static __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand_stand_up(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node) {
  int __pyx_v_target;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_next_node;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  node_ns::Node *__pyx_t_7;
  long __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_expand_stand_up", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":448
 *             NodePtr next_node
 * 
 *         if self.player.has_skill(table.Skill.JUMP_UP):             # <<<<<<<<<<<<<<
 *             return NodePtr (new Node(node, from_botbowl_Square(self.player.position), self.ma, self.gfis, 0))
 *         elif self.ma < 3:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->player, __pyx_n_s_has_skill); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_table); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Skill); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_JUMP_UP); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":449
 * 
 *         if self.player.has_skill(table.Skill.JUMP_UP):
 *             return NodePtr (new Node(node, from_botbowl_Square(self.player.position), self.ma, self.gfis, 0))             # <<<<<<<<<<<<<<
 *         elif self.ma < 3:
 *             target = max(2, min(6, 4-self.game.get_stand_up_modifier(self.player)))
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->player, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    try {
      __pyx_t_7 = new node_ns::Node(__pyx_v_node, __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_from_botbowl_Square(__pyx_t_1), __pyx_v_self->ma, __pyx_v_self->gfis, 0.0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 449, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr(__pyx_t_7);
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":448
 *             NodePtr next_node
 * 
 *         if self.player.has_skill(table.Skill.JUMP_UP):             # <<<<<<<<<<<<<<
 *             return NodePtr (new Node(node, from_botbowl_Square(self.player.position), self.ma, self.gfis, 0))
 *         elif self.ma < 3:
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":450
 *         if self.player.has_skill(table.Skill.JUMP_UP):
 *             return NodePtr (new Node(node, from_botbowl_Square(self.player.position), self.ma, self.gfis, 0))
 *         elif self.ma < 3:             # <<<<<<<<<<<<<<
 *             target = max(2, min(6, 4-self.game.get_stand_up_modifier(self.player)))
 *             next_node = NodePtr (new Node(node, from_botbowl_Square(self.player.position), 0, self.gfis, 0))
 */
  __pyx_t_6 = ((__pyx_v_self->ma < 3) != 0);
  if (__pyx_t_6) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":451
 *             return NodePtr (new Node(node, from_botbowl_Square(self.player.position), self.ma, self.gfis, 0))
 *         elif self.ma < 3:
 *             target = max(2, min(6, 4-self.game.get_stand_up_modifier(self.player)))             # <<<<<<<<<<<<<<
 *             next_node = NodePtr (new Node(node, from_botbowl_Square(self.player.position), 0, self.gfis, 0))
 *             node.get().apply_stand_up(target)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->game, __pyx_n_s_get_stand_up_modifier); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_self->player};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = __Pyx_PyInt_SubtractCObj(__pyx_int_4, __pyx_t_1, 4, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = 6;
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_6) {
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_1 = __pyx_t_2;
    } else {
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 451, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __pyx_t_4;
      __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = 2;
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_6) {
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_1 = __pyx_t_2;
    } else {
      __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 451, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __pyx_t_3;
      __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_target = __pyx_t_5;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":452
 *         elif self.ma < 3:
 *             target = max(2, min(6, 4-self.game.get_stand_up_modifier(self.player)))
 *             next_node = NodePtr (new Node(node, from_botbowl_Square(self.player.position), 0, self.gfis, 0))             # <<<<<<<<<<<<<<
 *             node.get().apply_stand_up(target)
 *             return next_node
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->player, __pyx_n_s_position); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    try {
      __pyx_t_7 = new node_ns::Node(__pyx_v_node, __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_from_botbowl_Square(__pyx_t_1), 0, __pyx_v_self->gfis, 0.0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 452, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_next_node = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr(__pyx_t_7);

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":453
 *             target = max(2, min(6, 4-self.game.get_stand_up_modifier(self.player)))
 *             next_node = NodePtr (new Node(node, from_botbowl_Square(self.player.position), 0, self.gfis, 0))
 *             node.get().apply_stand_up(target)             # <<<<<<<<<<<<<<
 *             return next_node
 *         next_node = NodePtr (new Node(node, self.start_pos, self.ma - 3, self.gfis, 0))
 */
    __pyx_v_node.get()->apply_stand_up(__pyx_v_target);

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":454
 *             next_node = NodePtr (new Node(node, from_botbowl_Square(self.player.position), 0, self.gfis, 0))
 *             node.get().apply_stand_up(target)
 *             return next_node             # <<<<<<<<<<<<<<
 *         next_node = NodePtr (new Node(node, self.start_pos, self.ma - 3, self.gfis, 0))
 *         return next_node
 */
    __pyx_r = __pyx_v_next_node;
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":450
 *         if self.player.has_skill(table.Skill.JUMP_UP):
 *             return NodePtr (new Node(node, from_botbowl_Square(self.player.position), self.ma, self.gfis, 0))
 *         elif self.ma < 3:             # <<<<<<<<<<<<<<
 *             target = max(2, min(6, 4-self.game.get_stand_up_modifier(self.player)))
 *             next_node = NodePtr (new Node(node, from_botbowl_Square(self.player.position), 0, self.gfis, 0))
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":455
 *             node.get().apply_stand_up(target)
 *             return next_node
 *         next_node = NodePtr (new Node(node, self.start_pos, self.ma - 3, self.gfis, 0))             # <<<<<<<<<<<<<<
 *         return next_node
 * 
 */
  try {
    __pyx_t_7 = new node_ns::Node(__pyx_v_node, __pyx_v_self->start_pos, (__pyx_v_self->ma - 3), __pyx_v_self->gfis, 0.0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 455, __pyx_L1_error)
  }
  __pyx_v_next_node = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr(__pyx_t_7);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":456
 *             return next_node
 *         next_node = NodePtr (new Node(node, self.start_pos, self.ma - 3, self.gfis, 0))
 *         return next_node             # <<<<<<<<<<<<<<
 * 
 *     cdef NodePtr _best(self, NodePtr a, NodePtr b):
 */
  __pyx_r = __pyx_v_next_node;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":443
 *         return next_node
 * 
 *     cdef NodePtr _expand_stand_up(self, NodePtr node):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int target
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("botbowl.core.pathfinding.cython_pathfinding.Pathfinder._expand_stand_up", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":458
 *         return next_node
 * 
 *     cdef NodePtr _best(self, NodePtr a, NodePtr b):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int a_moves_left, b_moves_left
 */

static __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__best(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_a, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_b) {
  int __pyx_v_a_moves_left;
  int __pyx_v_b_moves_left;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_best", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":463
 * 
 *         # Directly to adjescent
 *         if self.directly_to_adjacent and a.get().position.distance( self.start_pos ) == 1 and a.get().moves_left > b.get().moves_left:             # <<<<<<<<<<<<<<
 *             return a
 *         if self.directly_to_adjacent and b.get().position.distance( self.start_pos ) == 1 and b.get().moves_left > a.get().moves_left:
 */
  __pyx_t_2 = (__pyx_v_self->directly_to_adjacent != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_a.get()->position.distance(__pyx_v_self->start_pos) == 1) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_a.get()->moves_left > __pyx_v_b.get()->moves_left) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":464
 *         # Directly to adjescent
 *         if self.directly_to_adjacent and a.get().position.distance( self.start_pos ) == 1 and a.get().moves_left > b.get().moves_left:
 *             return a             # <<<<<<<<<<<<<<
 *         if self.directly_to_adjacent and b.get().position.distance( self.start_pos ) == 1 and b.get().moves_left > a.get().moves_left:
 *             return b
 */
    __pyx_r = __pyx_v_a;
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":463
 * 
 *         # Directly to adjescent
 *         if self.directly_to_adjacent and a.get().position.distance( self.start_pos ) == 1 and a.get().moves_left > b.get().moves_left:             # <<<<<<<<<<<<<<
 *             return a
 *         if self.directly_to_adjacent and b.get().position.distance( self.start_pos ) == 1 and b.get().moves_left > a.get().moves_left:
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":465
 *         if self.directly_to_adjacent and a.get().position.distance( self.start_pos ) == 1 and a.get().moves_left > b.get().moves_left:
 *             return a
 *         if self.directly_to_adjacent and b.get().position.distance( self.start_pos ) == 1 and b.get().moves_left > a.get().moves_left:             # <<<<<<<<<<<<<<
 *             return b
 * 
 */
  __pyx_t_2 = (__pyx_v_self->directly_to_adjacent != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_b.get()->position.distance(__pyx_v_self->start_pos) == 1) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_b.get()->moves_left > __pyx_v_a.get()->moves_left) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":466
 *             return a
 *         if self.directly_to_adjacent and b.get().position.distance( self.start_pos ) == 1 and b.get().moves_left > a.get().moves_left:
 *             return b             # <<<<<<<<<<<<<<
 * 
 *         if a.get().prob > b.get().prob:
 */
    __pyx_r = __pyx_v_b;
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":465
 *         if self.directly_to_adjacent and a.get().position.distance( self.start_pos ) == 1 and a.get().moves_left > b.get().moves_left:
 *             return a
 *         if self.directly_to_adjacent and b.get().position.distance( self.start_pos ) == 1 and b.get().moves_left > a.get().moves_left:             # <<<<<<<<<<<<<<
 *             return b
 * 
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":468
 *             return b
 * 
 *         if a.get().prob > b.get().prob:             # <<<<<<<<<<<<<<
 *             return a
 *         if b.get().prob > a.get().prob:
 */
  __pyx_t_1 = ((__pyx_v_a.get()->prob > __pyx_v_b.get()->prob) != 0);
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":469
 * 
 *         if a.get().prob > b.get().prob:
 *             return a             # <<<<<<<<<<<<<<
 *         if b.get().prob > a.get().prob:
 *             return b
 */
    __pyx_r = __pyx_v_a;
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":468
 *             return b
 * 
 *         if a.get().prob > b.get().prob:             # <<<<<<<<<<<<<<
 *             return a
 *         if b.get().prob > a.get().prob:
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":470
 *         if a.get().prob > b.get().prob:
 *             return a
 *         if b.get().prob > a.get().prob:             # <<<<<<<<<<<<<<
 *             return b
 * 
 */
  __pyx_t_1 = ((__pyx_v_b.get()->prob > __pyx_v_a.get()->prob) != 0);
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":471
 *             return a
 *         if b.get().prob > a.get().prob:
 *             return b             # <<<<<<<<<<<<<<
 * 
 *         if a.get().foul_roll != 0:
 */
    __pyx_r = __pyx_v_b;
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":470
 *         if a.get().prob > b.get().prob:
 *             return a
 *         if b.get().prob > a.get().prob:             # <<<<<<<<<<<<<<
 *             return b
 * 
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":473
 *             return b
 * 
 *         if a.get().foul_roll != 0:             # <<<<<<<<<<<<<<
 *             if a.get().foul_roll < b.get().foul_roll:
 *                 return a
 */
  __pyx_t_1 = ((__pyx_v_a.get()->foul_roll != 0) != 0);
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":474
 * 
 *         if a.get().foul_roll != 0:
 *             if a.get().foul_roll < b.get().foul_roll:             # <<<<<<<<<<<<<<
 *                 return a
 *             if b.get().foul_roll < a.get().foul_roll:
 */
    __pyx_t_1 = ((__pyx_v_a.get()->foul_roll < __pyx_v_b.get()->foul_roll) != 0);
    if (__pyx_t_1) {

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":475
 *         if a.get().foul_roll != 0:
 *             if a.get().foul_roll < b.get().foul_roll:
 *                 return a             # <<<<<<<<<<<<<<
 *             if b.get().foul_roll < a.get().foul_roll:
 *                 return b
 */
      __pyx_r = __pyx_v_a;
      goto __pyx_L0;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":474
 * 
 *         if a.get().foul_roll != 0:
 *             if a.get().foul_roll < b.get().foul_roll:             # <<<<<<<<<<<<<<
 *                 return a
 *             if b.get().foul_roll < a.get().foul_roll:
 */
    }

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":476
 *             if a.get().foul_roll < b.get().foul_roll:
 *                 return a
 *             if b.get().foul_roll < a.get().foul_roll:             # <<<<<<<<<<<<<<
 *                 return b
 * 
 */
    __pyx_t_1 = ((__pyx_v_b.get()->foul_roll < __pyx_v_a.get()->foul_roll) != 0);
    if (__pyx_t_1) {

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":477
 *                 return a
 *             if b.get().foul_roll < a.get().foul_roll:
 *                 return b             # <<<<<<<<<<<<<<
 * 
 *         if a.get().block_dice != 0:
 */
      __pyx_r = __pyx_v_b;
      goto __pyx_L0;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":476
 *             if a.get().foul_roll < b.get().foul_roll:
 *                 return a
 *             if b.get().foul_roll < a.get().foul_roll:             # <<<<<<<<<<<<<<
 *                 return b
 * 
 */
    }

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":473
 *             return b
 * 
 *         if a.get().foul_roll != 0:             # <<<<<<<<<<<<<<
 *             if a.get().foul_roll < b.get().foul_roll:
 *                 return a
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":479
 *                 return b
 * 
 *         if a.get().block_dice != 0:             # <<<<<<<<<<<<<<
 *             if a.get().block_dice > b.get().block_dice:
 *                 return a
 */
  __pyx_t_1 = ((__pyx_v_a.get()->block_dice != 0) != 0);
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":480
 * 
 *         if a.get().block_dice != 0:
 *             if a.get().block_dice > b.get().block_dice:             # <<<<<<<<<<<<<<
 *                 return a
 *             if b.get().block_dice > a.get().block_dice:
 */
    __pyx_t_1 = ((__pyx_v_a.get()->block_dice > __pyx_v_b.get()->block_dice) != 0);
    if (__pyx_t_1) {

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":481
 *         if a.get().block_dice != 0:
 *             if a.get().block_dice > b.get().block_dice:
 *                 return a             # <<<<<<<<<<<<<<
 *             if b.get().block_dice > a.get().block_dice:
 *                 return b
 */
      __pyx_r = __pyx_v_a;
      goto __pyx_L0;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":480
 * 
 *         if a.get().block_dice != 0:
 *             if a.get().block_dice > b.get().block_dice:             # <<<<<<<<<<<<<<
 *                 return a
 *             if b.get().block_dice > a.get().block_dice:
 */
    }

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":482
 *             if a.get().block_dice > b.get().block_dice:
 *                 return a
 *             if b.get().block_dice > a.get().block_dice:             # <<<<<<<<<<<<<<
 *                 return b
 * 
 */
    __pyx_t_1 = ((__pyx_v_b.get()->block_dice > __pyx_v_a.get()->block_dice) != 0);
    if (__pyx_t_1) {

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":483
 *                 return a
 *             if b.get().block_dice > a.get().block_dice:
 *                 return b             # <<<<<<<<<<<<<<
 * 
 *         a_moves_left = a.get().moves_left + a.get().gfis_left
 */
      __pyx_r = __pyx_v_b;
      goto __pyx_L0;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":482
 *             if a.get().block_dice > b.get().block_dice:
 *                 return a
 *             if b.get().block_dice > a.get().block_dice:             # <<<<<<<<<<<<<<
 *                 return b
 * 
 */
    }

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":479
 *                 return b
 * 
 *         if a.get().block_dice != 0:             # <<<<<<<<<<<<<<
 *             if a.get().block_dice > b.get().block_dice:
 *                 return a
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":485
 *                 return b
 * 
 *         a_moves_left = a.get().moves_left + a.get().gfis_left             # <<<<<<<<<<<<<<
 *         b_moves_left = b.get().moves_left + b.get().gfis_left
 * 
 */
  __pyx_v_a_moves_left = (__pyx_v_a.get()->moves_left + __pyx_v_a.get()->gfis_left);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":486
 * 
 *         a_moves_left = a.get().moves_left + a.get().gfis_left
 *         b_moves_left = b.get().moves_left + b.get().gfis_left             # <<<<<<<<<<<<<<
 * 
 *         if a_moves_left > b_moves_left:
 */
  __pyx_v_b_moves_left = (__pyx_v_b.get()->moves_left + __pyx_v_b.get()->gfis_left);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":488
 *         b_moves_left = b.get().moves_left + b.get().gfis_left
 * 
 *         if a_moves_left > b_moves_left:             # <<<<<<<<<<<<<<
 *             return a
 *         if b_moves_left > a_moves_left:
 */
  __pyx_t_1 = ((__pyx_v_a_moves_left > __pyx_v_b_moves_left) != 0);
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":489
 * 
 *         if a_moves_left > b_moves_left:
 *             return a             # <<<<<<<<<<<<<<
 *         if b_moves_left > a_moves_left:
 *             return b
 */
    __pyx_r = __pyx_v_a;
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":488
 *         b_moves_left = b.get().moves_left + b.get().gfis_left
 * 
 *         if a_moves_left > b_moves_left:             # <<<<<<<<<<<<<<
 *             return a
 *         if b_moves_left > a_moves_left:
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":490
 *         if a_moves_left > b_moves_left:
 *             return a
 *         if b_moves_left > a_moves_left:             # <<<<<<<<<<<<<<
 *             return b
 *         if a.get().euclidean_distance < b.get().euclidean_distance:
 */
  __pyx_t_1 = ((__pyx_v_b_moves_left > __pyx_v_a_moves_left) != 0);
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":491
 *             return a
 *         if b_moves_left > a_moves_left:
 *             return b             # <<<<<<<<<<<<<<
 *         if a.get().euclidean_distance < b.get().euclidean_distance:
 *             return a
 */
    __pyx_r = __pyx_v_b;
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":490
 *         if a_moves_left > b_moves_left:
 *             return a
 *         if b_moves_left > a_moves_left:             # <<<<<<<<<<<<<<
 *             return b
 *         if a.get().euclidean_distance < b.get().euclidean_distance:
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":492
 *         if b_moves_left > a_moves_left:
 *             return b
 *         if a.get().euclidean_distance < b.get().euclidean_distance:             # <<<<<<<<<<<<<<
 *             return a
 *         if b.get().euclidean_distance < a.get().euclidean_distance:
 */
  __pyx_t_1 = ((__pyx_v_a.get()->euclidean_distance < __pyx_v_b.get()->euclidean_distance) != 0);
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":493
 *             return b
 *         if a.get().euclidean_distance < b.get().euclidean_distance:
 *             return a             # <<<<<<<<<<<<<<
 *         if b.get().euclidean_distance < a.get().euclidean_distance:
 *             return b
 */
    __pyx_r = __pyx_v_a;
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":492
 *         if b_moves_left > a_moves_left:
 *             return b
 *         if a.get().euclidean_distance < b.get().euclidean_distance:             # <<<<<<<<<<<<<<
 *             return a
 *         if b.get().euclidean_distance < a.get().euclidean_distance:
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":494
 *         if a.get().euclidean_distance < b.get().euclidean_distance:
 *             return a
 *         if b.get().euclidean_distance < a.get().euclidean_distance:             # <<<<<<<<<<<<<<
 *             return b
 *         return NodePtr()
 */
  __pyx_t_1 = ((__pyx_v_b.get()->euclidean_distance < __pyx_v_a.get()->euclidean_distance) != 0);
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":495
 *             return a
 *         if b.get().euclidean_distance < a.get().euclidean_distance:
 *             return b             # <<<<<<<<<<<<<<
 *         return NodePtr()
 * 
 */
    __pyx_r = __pyx_v_b;
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":494
 *         if a.get().euclidean_distance < b.get().euclidean_distance:
 *             return a
 *         if b.get().euclidean_distance < a.get().euclidean_distance:             # <<<<<<<<<<<<<<
 *             return b
 *         return NodePtr()
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":496
 *         if b.get().euclidean_distance < a.get().euclidean_distance:
 *             return b
 *         return NodePtr()             # <<<<<<<<<<<<<<
 * 
 *     cdef NodePtr _dominant(self, NodePtr a, NodePtr b):
 */
  __pyx_r = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr();
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":458
 *         return next_node
 * 
 *     cdef NodePtr _best(self, NodePtr a, NodePtr b):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int a_moves_left, b_moves_left
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":498
 *         return NodePtr()
 * 
 *     cdef NodePtr _dominant(self, NodePtr a, NodePtr b):             # <<<<<<<<<<<<<<
 *         if self.directly_to_adjacent and a.get().position.distance( self.start_pos ) == 1 and a.get().moves_left > b.get().moves_left:
 *             return a
 */

static __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__dominant(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_a, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_b) {
  int __pyx_v_a_moves_left;
  int __pyx_v_b_moves_left;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_dominant", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":499
 * 
 *     cdef NodePtr _dominant(self, NodePtr a, NodePtr b):
 *         if self.directly_to_adjacent and a.get().position.distance( self.start_pos ) == 1 and a.get().moves_left > b.get().moves_left:             # <<<<<<<<<<<<<<
 *             return a
 *         if self.directly_to_adjacent and b.get().position.distance( self.start_pos ) == 1 and b.get().moves_left > a.get().moves_left:
 */
  __pyx_t_2 = (__pyx_v_self->directly_to_adjacent != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_a.get()->position.distance(__pyx_v_self->start_pos) == 1) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_a.get()->moves_left > __pyx_v_b.get()->moves_left) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":500
 *     cdef NodePtr _dominant(self, NodePtr a, NodePtr b):
 *         if self.directly_to_adjacent and a.get().position.distance( self.start_pos ) == 1 and a.get().moves_left > b.get().moves_left:
 *             return a             # <<<<<<<<<<<<<<
 *         if self.directly_to_adjacent and b.get().position.distance( self.start_pos ) == 1 and b.get().moves_left > a.get().moves_left:
 *             return b
 */
    __pyx_r = __pyx_v_a;
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":499
 * 
 *     cdef NodePtr _dominant(self, NodePtr a, NodePtr b):
 *         if self.directly_to_adjacent and a.get().position.distance( self.start_pos ) == 1 and a.get().moves_left > b.get().moves_left:             # <<<<<<<<<<<<<<
 *             return a
 *         if self.directly_to_adjacent and b.get().position.distance( self.start_pos ) == 1 and b.get().moves_left > a.get().moves_left:
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":501
 *         if self.directly_to_adjacent and a.get().position.distance( self.start_pos ) == 1 and a.get().moves_left > b.get().moves_left:
 *             return a
 *         if self.directly_to_adjacent and b.get().position.distance( self.start_pos ) == 1 and b.get().moves_left > a.get().moves_left:             # <<<<<<<<<<<<<<
 *             return b
 * 
 */
  __pyx_t_2 = (__pyx_v_self->directly_to_adjacent != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_b.get()->position.distance(__pyx_v_self->start_pos) == 1) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_b.get()->moves_left > __pyx_v_a.get()->moves_left) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":502
 *             return a
 *         if self.directly_to_adjacent and b.get().position.distance( self.start_pos ) == 1 and b.get().moves_left > a.get().moves_left:
 *             return b             # <<<<<<<<<<<<<<
 * 
 *         a_moves_left = a.get().moves_left + a.get().gfis_left
 */
    __pyx_r = __pyx_v_b;
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":501
 *         if self.directly_to_adjacent and a.get().position.distance( self.start_pos ) == 1 and a.get().moves_left > b.get().moves_left:
 *             return a
 *         if self.directly_to_adjacent and b.get().position.distance( self.start_pos ) == 1 and b.get().moves_left > a.get().moves_left:             # <<<<<<<<<<<<<<
 *             return b
 * 
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":504
 *             return b
 * 
 *         a_moves_left = a.get().moves_left + a.get().gfis_left             # <<<<<<<<<<<<<<
 *         b_moves_left = b.get().moves_left + b.get().gfis_left
 *         # TODO: Write out as above
 */
  __pyx_v_a_moves_left = (__pyx_v_a.get()->moves_left + __pyx_v_a.get()->gfis_left);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":505
 * 
 *         a_moves_left = a.get().moves_left + a.get().gfis_left
 *         b_moves_left = b.get().moves_left + b.get().gfis_left             # <<<<<<<<<<<<<<
 *         # TODO: Write out as above
 *         if a.get().prob > b.get().prob and (a.get().foul_roll==0 or a.get().foul_roll <= b.get().foul_roll) and (a.get().block_dice==0 or a.get().block_dice >= b.get().block_dice) and (a_moves_left > b_moves_left or (a_moves_left == b_moves_left and a.get().euclidean_distance < b.get().euclidean_distance)):
 */
  __pyx_v_b_moves_left = (__pyx_v_b.get()->moves_left + __pyx_v_b.get()->gfis_left);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":507
 *         b_moves_left = b.get().moves_left + b.get().gfis_left
 *         # TODO: Write out as above
 *         if a.get().prob > b.get().prob and (a.get().foul_roll==0 or a.get().foul_roll <= b.get().foul_roll) and (a.get().block_dice==0 or a.get().block_dice >= b.get().block_dice) and (a_moves_left > b_moves_left or (a_moves_left == b_moves_left and a.get().euclidean_distance < b.get().euclidean_distance)):             # <<<<<<<<<<<<<<
 *             return a
 *         if b.get().prob > a.get().prob and (b.get().foul_roll==0 or b.get().foul_roll <= a.get().foul_roll) and (b.get().block_dice==0 or b.get().block_dice >= a.get().block_dice) and (b_moves_left > a_moves_left or (b_moves_left == a_moves_left and b.get().euclidean_distance < a.get().euclidean_distance)):
 */
  __pyx_t_2 = ((__pyx_v_a.get()->prob > __pyx_v_b.get()->prob) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_a.get()->foul_roll == 0) != 0);
  if (!__pyx_t_2) {
  } else {
    goto __pyx_L14_next_and;
  }
  __pyx_t_2 = ((__pyx_v_a.get()->foul_roll <= __pyx_v_b.get()->foul_roll) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_L14_next_and:;
  __pyx_t_2 = ((__pyx_v_a.get()->block_dice == 0) != 0);
  if (!__pyx_t_2) {
  } else {
    goto __pyx_L16_next_and;
  }
  __pyx_t_2 = ((__pyx_v_a.get()->block_dice >= __pyx_v_b.get()->block_dice) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_L16_next_and:;
  __pyx_t_2 = ((__pyx_v_a_moves_left > __pyx_v_b_moves_left) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_a_moves_left == __pyx_v_b_moves_left) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_a.get()->euclidean_distance < __pyx_v_b.get()->euclidean_distance) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L12_bool_binop_done:;
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":508
 *         # TODO: Write out as above
 *         if a.get().prob > b.get().prob and (a.get().foul_roll==0 or a.get().foul_roll <= b.get().foul_roll) and (a.get().block_dice==0 or a.get().block_dice >= b.get().block_dice) and (a_moves_left > b_moves_left or (a_moves_left == b_moves_left and a.get().euclidean_distance < b.get().euclidean_distance)):
 *             return a             # <<<<<<<<<<<<<<
 *         if b.get().prob > a.get().prob and (b.get().foul_roll==0 or b.get().foul_roll <= a.get().foul_roll) and (b.get().block_dice==0 or b.get().block_dice >= a.get().block_dice) and (b_moves_left > a_moves_left or (b_moves_left == a_moves_left and b.get().euclidean_distance < a.get().euclidean_distance)):
 *             return b
 */
    __pyx_r = __pyx_v_a;
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":507
 *         b_moves_left = b.get().moves_left + b.get().gfis_left
 *         # TODO: Write out as above
 *         if a.get().prob > b.get().prob and (a.get().foul_roll==0 or a.get().foul_roll <= b.get().foul_roll) and (a.get().block_dice==0 or a.get().block_dice >= b.get().block_dice) and (a_moves_left > b_moves_left or (a_moves_left == b_moves_left and a.get().euclidean_distance < b.get().euclidean_distance)):             # <<<<<<<<<<<<<<
 *             return a
 *         if b.get().prob > a.get().prob and (b.get().foul_roll==0 or b.get().foul_roll <= a.get().foul_roll) and (b.get().block_dice==0 or b.get().block_dice >= a.get().block_dice) and (b_moves_left > a_moves_left or (b_moves_left == a_moves_left and b.get().euclidean_distance < a.get().euclidean_distance)):
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":509
 *         if a.get().prob > b.get().prob and (a.get().foul_roll==0 or a.get().foul_roll <= b.get().foul_roll) and (a.get().block_dice==0 or a.get().block_dice >= b.get().block_dice) and (a_moves_left > b_moves_left or (a_moves_left == b_moves_left and a.get().euclidean_distance < b.get().euclidean_distance)):
 *             return a
 *         if b.get().prob > a.get().prob and (b.get().foul_roll==0 or b.get().foul_roll <= a.get().foul_roll) and (b.get().block_dice==0 or b.get().block_dice >= a.get().block_dice) and (b_moves_left > a_moves_left or (b_moves_left == a_moves_left and b.get().euclidean_distance < a.get().euclidean_distance)):             # <<<<<<<<<<<<<<
 *             return b
 *         return NodePtr()
 */
  __pyx_t_2 = ((__pyx_v_b.get()->prob > __pyx_v_a.get()->prob) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L21_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_b.get()->foul_roll == 0) != 0);
  if (!__pyx_t_2) {
  } else {
    goto __pyx_L23_next_and;
  }
  __pyx_t_2 = ((__pyx_v_b.get()->foul_roll <= __pyx_v_a.get()->foul_roll) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L21_bool_binop_done;
  }
  __pyx_L23_next_and:;
  __pyx_t_2 = ((__pyx_v_b.get()->block_dice == 0) != 0);
  if (!__pyx_t_2) {
  } else {
    goto __pyx_L25_next_and;
  }
  __pyx_t_2 = ((__pyx_v_b.get()->block_dice >= __pyx_v_a.get()->block_dice) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L21_bool_binop_done;
  }
  __pyx_L25_next_and:;
  __pyx_t_2 = ((__pyx_v_b_moves_left > __pyx_v_a_moves_left) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L21_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_b_moves_left == __pyx_v_a_moves_left) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L21_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_b.get()->euclidean_distance < __pyx_v_a.get()->euclidean_distance) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L21_bool_binop_done:;
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":510
 *             return a
 *         if b.get().prob > a.get().prob and (b.get().foul_roll==0 or b.get().foul_roll <= a.get().foul_roll) and (b.get().block_dice==0 or b.get().block_dice >= a.get().block_dice) and (b_moves_left > a_moves_left or (b_moves_left == a_moves_left and b.get().euclidean_distance < a.get().euclidean_distance)):
 *             return b             # <<<<<<<<<<<<<<
 *         return NodePtr()
 * 
 */
    __pyx_r = __pyx_v_b;
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":509
 *         if a.get().prob > b.get().prob and (a.get().foul_roll==0 or a.get().foul_roll <= b.get().foul_roll) and (a.get().block_dice==0 or a.get().block_dice >= b.get().block_dice) and (a_moves_left > b_moves_left or (a_moves_left == b_moves_left and a.get().euclidean_distance < b.get().euclidean_distance)):
 *             return a
 *         if b.get().prob > a.get().prob and (b.get().foul_roll==0 or b.get().foul_roll <= a.get().foul_roll) and (b.get().block_dice==0 or b.get().block_dice >= a.get().block_dice) and (b_moves_left > a_moves_left or (b_moves_left == a_moves_left and b.get().euclidean_distance < a.get().euclidean_distance)):             # <<<<<<<<<<<<<<
 *             return b
 *         return NodePtr()
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":511
 *         if b.get().prob > a.get().prob and (b.get().foul_roll==0 or b.get().foul_roll <= a.get().foul_roll) and (b.get().block_dice==0 or b.get().block_dice >= a.get().block_dice) and (b_moves_left > a_moves_left or (b_moves_left == a_moves_left and b.get().euclidean_distance < a.get().euclidean_distance)):
 *             return b
 *         return NodePtr()             # <<<<<<<<<<<<<<
 * 
 *     cdef void _clear(self):
 */
  __pyx_r = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr();
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":498
 *         return NodePtr()
 * 
 *     cdef NodePtr _dominant(self, NodePtr a, NodePtr b):             # <<<<<<<<<<<<<<
 *         if self.directly_to_adjacent and a.get().position.distance( self.start_pos ) == 1 and a.get().moves_left > b.get().moves_left:
 *             return a
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":513
 *         return NodePtr()
 * 
 *     cdef void _clear(self):             # <<<<<<<<<<<<<<
 *         cdef NodePtr node, before
 * 
 */

static void __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__clear(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self) {
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_before;
  long __pyx_v_y;
  long __pyx_v_x;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  long __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  std::priority_queue<__pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr>  __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_clear", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":516
 *         cdef NodePtr node, before
 * 
 *         for y in range(17):             # <<<<<<<<<<<<<<
 *             for x in range(28):
 *                 node = self.nodes[y][x]
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 17; __pyx_t_1+=1) {
    __pyx_v_y = __pyx_t_1;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":517
 * 
 *         for y in range(17):
 *             for x in range(28):             # <<<<<<<<<<<<<<
 *                 node = self.nodes[y][x]
 *                 if node.use_count()>0:
 */
    for (__pyx_t_2 = 0; __pyx_t_2 < 28; __pyx_t_2+=1) {
      __pyx_v_x = __pyx_t_2;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":518
 *         for y in range(17):
 *             for x in range(28):
 *                 node = self.nodes[y][x]             # <<<<<<<<<<<<<<
 *                 if node.use_count()>0:
 *                     before = self.locked_nodes[y][x]
 */
      __pyx_v_node = ((__pyx_v_self->nodes[__pyx_v_y])[__pyx_v_x]);

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":519
 *             for x in range(28):
 *                 node = self.nodes[y][x]
 *                 if node.use_count()>0:             # <<<<<<<<<<<<<<
 *                     before = self.locked_nodes[y][x]
 *                     if before.use_count() == 0 or self._best(node, before) == node:
 */
      __pyx_t_3 = ((__pyx_v_node.use_count() > 0) != 0);
      if (__pyx_t_3) {

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":520
 *                 node = self.nodes[y][x]
 *                 if node.use_count()>0:
 *                     before = self.locked_nodes[y][x]             # <<<<<<<<<<<<<<
 *                     if before.use_count() == 0 or self._best(node, before) == node:
 *                         self.locked_nodes[y][x] = node
 */
        __pyx_v_before = ((__pyx_v_self->locked_nodes[__pyx_v_y])[__pyx_v_x]);

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":521
 *                 if node.use_count()>0:
 *                     before = self.locked_nodes[y][x]
 *                     if before.use_count() == 0 or self._best(node, before) == node:             # <<<<<<<<<<<<<<
 *                         self.locked_nodes[y][x] = node
 *                     self.nodes[y][x] = NodePtr()
 */
        __pyx_t_4 = ((__pyx_v_before.use_count() == 0) != 0);
        if (!__pyx_t_4) {
        } else {
          __pyx_t_3 = __pyx_t_4;
          goto __pyx_L9_bool_binop_done;
        }
        __pyx_t_4 = ((((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_best(__pyx_v_self, __pyx_v_node, __pyx_v_before) == __pyx_v_node) != 0);
        __pyx_t_3 = __pyx_t_4;
        __pyx_L9_bool_binop_done:;
        if (__pyx_t_3) {

          /* "botbowl/core/pathfinding/cython_pathfinding.pyx":522
 *                     before = self.locked_nodes[y][x]
 *                     if before.use_count() == 0 or self._best(node, before) == node:
 *                         self.locked_nodes[y][x] = node             # <<<<<<<<<<<<<<
 *                     self.nodes[y][x] = NodePtr()
 *         self.open_set = priority_queue[NodePtr]()
 */
          ((__pyx_v_self->locked_nodes[__pyx_v_y])[__pyx_v_x]) = __pyx_v_node;

          /* "botbowl/core/pathfinding/cython_pathfinding.pyx":521
 *                 if node.use_count()>0:
 *                     before = self.locked_nodes[y][x]
 *                     if before.use_count() == 0 or self._best(node, before) == node:             # <<<<<<<<<<<<<<
 *                         self.locked_nodes[y][x] = node
 *                     self.nodes[y][x] = NodePtr()
 */
        }

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":523
 *                     if before.use_count() == 0 or self._best(node, before) == node:
 *                         self.locked_nodes[y][x] = node
 *                     self.nodes[y][x] = NodePtr()             # <<<<<<<<<<<<<<
 *         self.open_set = priority_queue[NodePtr]()
 * 
 */
        ((__pyx_v_self->nodes[__pyx_v_y])[__pyx_v_x]) = __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr();

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":519
 *             for x in range(28):
 *                 node = self.nodes[y][x]
 *                 if node.use_count()>0:             # <<<<<<<<<<<<<<
 *                     before = self.locked_nodes[y][x]
 *                     if before.use_count() == 0 or self._best(node, before) == node:
 */
      }
    }
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":524
 *                         self.locked_nodes[y][x] = node
 *                     self.nodes[y][x] = NodePtr()
 *         self.open_set = priority_queue[NodePtr]()             # <<<<<<<<<<<<<<
 * 
 *     cdef void _prepare_nodes(self):
 */
  try {
    __pyx_t_5 = std::priority_queue<__pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 524, __pyx_L1_error)
  }
  __pyx_v_self->open_set = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":513
 *         return NodePtr()
 * 
 *     cdef void _clear(self):             # <<<<<<<<<<<<<<
 *         cdef NodePtr node, before
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("botbowl.core.pathfinding.cython_pathfinding.Pathfinder._clear", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":526
 *         self.open_set = priority_queue[NodePtr]()
 * 
 *     cdef void _prepare_nodes(self):             # <<<<<<<<<<<<<<
 *         cdef NodePtr node, existing_node, best_before
 * 
 */

static void __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__prepare_nodes(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self) {
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_existing_node;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_best_before;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  std::vector<__pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr> ::iterator __pyx_t_3;
  std::vector<__pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr>  *__pyx_t_4;
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("_prepare_nodes", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":529
 *         cdef NodePtr node, existing_node, best_before
 * 
 *         if not self.risky_sets.empty():             # <<<<<<<<<<<<<<
 *             self.current_prob = dereference(self.risky_sets.rbegin()).first # get highest probability in risky_sets
 *             for node in self.risky_sets[self.current_prob]:
 */
  __pyx_t_1 = ((!(__pyx_v_self->risky_sets.empty() != 0)) != 0);
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":530
 * 
 *         if not self.risky_sets.empty():
 *             self.current_prob = dereference(self.risky_sets.rbegin()).first # get highest probability in risky_sets             # <<<<<<<<<<<<<<
 *             for node in self.risky_sets[self.current_prob]:
 *                 best_before = self.locked_nodes[node.get().position.y][node.get().position.x]
 */
    __pyx_t_2 = (*__pyx_v_self->risky_sets.rbegin()).first;
    __pyx_v_self->current_prob = __pyx_t_2;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":531
 *         if not self.risky_sets.empty():
 *             self.current_prob = dereference(self.risky_sets.rbegin()).first # get highest probability in risky_sets
 *             for node in self.risky_sets[self.current_prob]:             # <<<<<<<<<<<<<<
 *                 best_before = self.locked_nodes[node.get().position.y][node.get().position.x]
 *                 if best_before.use_count()>0 and self._dominant(best_before, node) == best_before:
 */
    __pyx_t_4 = &(__pyx_v_self->risky_sets[__pyx_v_self->current_prob]);
    __pyx_t_3 = __pyx_t_4->begin();
    for (;;) {
      if (!(__pyx_t_3 != __pyx_t_4->end())) break;
      __pyx_t_5 = *__pyx_t_3;
      ++__pyx_t_3;
      __pyx_v_node = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":532
 *             self.current_prob = dereference(self.risky_sets.rbegin()).first # get highest probability in risky_sets
 *             for node in self.risky_sets[self.current_prob]:
 *                 best_before = self.locked_nodes[node.get().position.y][node.get().position.x]             # <<<<<<<<<<<<<<
 *                 if best_before.use_count()>0 and self._dominant(best_before, node) == best_before:
 *                     continue
 */
      __pyx_v_best_before = ((__pyx_v_self->locked_nodes[__pyx_v_node.get()->position.y])[__pyx_v_node.get()->position.x]);

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":533
 *             for node in self.risky_sets[self.current_prob]:
 *                 best_before = self.locked_nodes[node.get().position.y][node.get().position.x]
 *                 if best_before.use_count()>0 and self._dominant(best_before, node) == best_before:             # <<<<<<<<<<<<<<
 *                     continue
 *                 existing_node = self.nodes[node.get().position.y][node.get().position.x]
 */
      __pyx_t_6 = ((__pyx_v_best_before.use_count() > 0) != 0);
      if (__pyx_t_6) {
      } else {
        __pyx_t_1 = __pyx_t_6;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_6 = ((((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_dominant(__pyx_v_self, __pyx_v_best_before, __pyx_v_node) == __pyx_v_best_before) != 0);
      __pyx_t_1 = __pyx_t_6;
      __pyx_L7_bool_binop_done:;
      if (__pyx_t_1) {

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":534
 *                 best_before = self.locked_nodes[node.get().position.y][node.get().position.x]
 *                 if best_before.use_count()>0 and self._dominant(best_before, node) == best_before:
 *                     continue             # <<<<<<<<<<<<<<
 *                 existing_node = self.nodes[node.get().position.y][node.get().position.x]
 *                 if existing_node.use_count() == 0 or self._best(existing_node, node) == node:
 */
        goto __pyx_L4_continue;

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":533
 *             for node in self.risky_sets[self.current_prob]:
 *                 best_before = self.locked_nodes[node.get().position.y][node.get().position.x]
 *                 if best_before.use_count()>0 and self._dominant(best_before, node) == best_before:             # <<<<<<<<<<<<<<
 *                     continue
 *                 existing_node = self.nodes[node.get().position.y][node.get().position.x]
 */
      }

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":535
 *                 if best_before.use_count()>0 and self._dominant(best_before, node) == best_before:
 *                     continue
 *                 existing_node = self.nodes[node.get().position.y][node.get().position.x]             # <<<<<<<<<<<<<<
 *                 if existing_node.use_count() == 0 or self._best(existing_node, node) == node:
 *                     self.open_set.push(node)
 */
      __pyx_v_existing_node = ((__pyx_v_self->nodes[__pyx_v_node.get()->position.y])[__pyx_v_node.get()->position.x]);

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":536
 *                     continue
 *                 existing_node = self.nodes[node.get().position.y][node.get().position.x]
 *                 if existing_node.use_count() == 0 or self._best(existing_node, node) == node:             # <<<<<<<<<<<<<<
 *                     self.open_set.push(node)
 *                     self.nodes[node.get().position.y][node.get().position.x] = node
 */
      __pyx_t_6 = ((__pyx_v_existing_node.use_count() == 0) != 0);
      if (!__pyx_t_6) {
      } else {
        __pyx_t_1 = __pyx_t_6;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_6 = ((((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_best(__pyx_v_self, __pyx_v_existing_node, __pyx_v_node) == __pyx_v_node) != 0);
      __pyx_t_1 = __pyx_t_6;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_1) {

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":537
 *                 existing_node = self.nodes[node.get().position.y][node.get().position.x]
 *                 if existing_node.use_count() == 0 or self._best(existing_node, node) == node:
 *                     self.open_set.push(node)             # <<<<<<<<<<<<<<
 *                     self.nodes[node.get().position.y][node.get().position.x] = node
 *             self.risky_sets.erase(self.current_prob)
 */
        __pyx_v_self->open_set.push(__pyx_v_node);

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":538
 *                 if existing_node.use_count() == 0 or self._best(existing_node, node) == node:
 *                     self.open_set.push(node)
 *                     self.nodes[node.get().position.y][node.get().position.x] = node             # <<<<<<<<<<<<<<
 *             self.risky_sets.erase(self.current_prob)
 * 
 */
        ((__pyx_v_self->nodes[__pyx_v_node.get()->position.y])[__pyx_v_node.get()->position.x]) = __pyx_v_node;

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":536
 *                     continue
 *                 existing_node = self.nodes[node.get().position.y][node.get().position.x]
 *                 if existing_node.use_count() == 0 or self._best(existing_node, node) == node:             # <<<<<<<<<<<<<<
 *                     self.open_set.push(node)
 *                     self.nodes[node.get().position.y][node.get().position.x] = node
 */
      }

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":531
 *         if not self.risky_sets.empty():
 *             self.current_prob = dereference(self.risky_sets.rbegin()).first # get highest probability in risky_sets
 *             for node in self.risky_sets[self.current_prob]:             # <<<<<<<<<<<<<<
 *                 best_before = self.locked_nodes[node.get().position.y][node.get().position.x]
 *                 if best_before.use_count()>0 and self._dominant(best_before, node) == best_before:
 */
      __pyx_L4_continue:;
    }

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":539
 *                     self.open_set.push(node)
 *                     self.nodes[node.get().position.y][node.get().position.x] = node
 *             self.risky_sets.erase(self.current_prob)             # <<<<<<<<<<<<<<
 * 
 *     cdef void _expansion(self):
 */
    (void)(__pyx_v_self->risky_sets.erase(__pyx_v_self->current_prob));

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":529
 *         cdef NodePtr node, existing_node, best_before
 * 
 *         if not self.risky_sets.empty():             # <<<<<<<<<<<<<<
 *             self.current_prob = dereference(self.risky_sets.rbegin()).first # get highest probability in risky_sets
 *             for node in self.risky_sets[self.current_prob]:
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":526
 *         self.open_set = priority_queue[NodePtr]()
 * 
 *     cdef void _prepare_nodes(self):             # <<<<<<<<<<<<<<
 *         cdef NodePtr node, existing_node, best_before
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":541
 *             self.risky_sets.erase(self.current_prob)
 * 
 *     cdef void _expansion(self):             # <<<<<<<<<<<<<<
 *         cdef NodePtr best_node
 *         while not self.open_set.empty():
 */

static void __pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expansion(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self) {
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_best_node;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_expansion", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":543
 *     cdef void _expansion(self):
 *         cdef NodePtr best_node
 *         while not self.open_set.empty():             # <<<<<<<<<<<<<<
 *             best_node = self.open_set.top()
 *             self.open_set.pop()
 */
  while (1) {
    __pyx_t_1 = ((!(__pyx_v_self->open_set.empty() != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":544
 *         cdef NodePtr best_node
 *         while not self.open_set.empty():
 *             best_node = self.open_set.top()             # <<<<<<<<<<<<<<
 *             self.open_set.pop()
 *             self._expand(best_node)
 */
    __pyx_v_best_node = __pyx_v_self->open_set.top();

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":545
 *         while not self.open_set.empty():
 *             best_node = self.open_set.top()
 *             self.open_set.pop()             # <<<<<<<<<<<<<<
 *             self._expand(best_node)
 * 
 */
    __pyx_v_self->open_set.pop();

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":546
 *             best_node = self.open_set.top()
 *             self.open_set.pop()
 *             self._expand(best_node)             # <<<<<<<<<<<<<<
 * 
 *     cdef object _collect_paths(self):
 */
    ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self->__pyx_vtab)->_expand(__pyx_v_self, __pyx_v_best_node);
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":541
 *             self.risky_sets.erase(self.current_prob)
 * 
 *     cdef void _expansion(self):             # <<<<<<<<<<<<<<
 *         cdef NodePtr best_node
 *         while not self.open_set.empty():
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":548
 *             self._expand(best_node)
 * 
 *     cdef object _collect_paths(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             NodePtr node
 */

static PyObject *__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__collect_paths(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self) {
  __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr __pyx_v_node;
  PyObject *__pyx_v_paths = 0;
  long __pyx_v_y;
  long __pyx_v_x;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  long __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_collect_paths", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":554
 *             list paths
 * 
 *         if self.target_is_square:             # <<<<<<<<<<<<<<
 *             node = self.locked_nodes[self.target_square.y][self.target_square.x]
 *             if node.use_count()>0:
 */
  __pyx_t_1 = (__pyx_v_self->target_is_square != 0);
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":555
 * 
 *         if self.target_is_square:
 *             node = self.locked_nodes[self.target_square.y][self.target_square.x]             # <<<<<<<<<<<<<<
 *             if node.use_count()>0:
 *                 return [create_path(node)]
 */
    __pyx_v_node = ((__pyx_v_self->locked_nodes[__pyx_v_self->target_square.y])[__pyx_v_self->target_square.x]);

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":556
 *         if self.target_is_square:
 *             node = self.locked_nodes[self.target_square.y][self.target_square.x]
 *             if node.use_count()>0:             # <<<<<<<<<<<<<<
 *                 return [create_path(node)]
 *             return []
 */
    __pyx_t_1 = ((__pyx_v_node.use_count() > 0) != 0);
    if (__pyx_t_1) {

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":557
 *             node = self.locked_nodes[self.target_square.y][self.target_square.x]
 *             if node.use_count()>0:
 *                 return [create_path(node)]             # <<<<<<<<<<<<<<
 *             return []
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = ((PyObject *)__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_create_path(__pyx_v_node)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 557, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 557, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":556
 *         if self.target_is_square:
 *             node = self.locked_nodes[self.target_square.y][self.target_square.x]
 *             if node.use_count()>0:             # <<<<<<<<<<<<<<
 *                 return [create_path(node)]
 *             return []
 */
    }

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":558
 *             if node.use_count()>0:
 *                 return [create_path(node)]
 *             return []             # <<<<<<<<<<<<<<
 * 
 *         paths = []
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":554
 *             list paths
 * 
 *         if self.target_is_square:             # <<<<<<<<<<<<<<
 *             node = self.locked_nodes[self.target_square.y][self.target_square.x]
 *             if node.use_count()>0:
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":560
 *             return []
 * 
 *         paths = []             # <<<<<<<<<<<<<<
 *         for y in range(17):
 *             for x in range(28):
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_paths = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":561
 * 
 *         paths = []
 *         for y in range(17):             # <<<<<<<<<<<<<<
 *             for x in range(28):
 *                 if self.start_pos.x == x and self.start_pos.y == y:
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 17; __pyx_t_4+=1) {
    __pyx_v_y = __pyx_t_4;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":562
 *         paths = []
 *         for y in range(17):
 *             for x in range(28):             # <<<<<<<<<<<<<<
 *                 if self.start_pos.x == x and self.start_pos.y == y:
 *                     continue
 */
    for (__pyx_t_5 = 0; __pyx_t_5 < 28; __pyx_t_5+=1) {
      __pyx_v_x = __pyx_t_5;

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":563
 *         for y in range(17):
 *             for x in range(28):
 *                 if self.start_pos.x == x and self.start_pos.y == y:             # <<<<<<<<<<<<<<
 *                     continue
 *                 node = self.locked_nodes[y][x]
 */
      __pyx_t_6 = ((__pyx_v_self->start_pos.x == __pyx_v_x) != 0);
      if (__pyx_t_6) {
      } else {
        __pyx_t_1 = __pyx_t_6;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_6 = ((__pyx_v_self->start_pos.y == __pyx_v_y) != 0);
      __pyx_t_1 = __pyx_t_6;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_1) {

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":564
 *             for x in range(28):
 *                 if self.start_pos.x == x and self.start_pos.y == y:
 *                     continue             # <<<<<<<<<<<<<<
 *                 node = self.locked_nodes[y][x]
 *                 if node.use_count()> 0:
 */
        goto __pyx_L7_continue;

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":563
 *         for y in range(17):
 *             for x in range(28):
 *                 if self.start_pos.x == x and self.start_pos.y == y:             # <<<<<<<<<<<<<<
 *                     continue
 *                 node = self.locked_nodes[y][x]
 */
      }

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":565
 *                 if self.start_pos.x == x and self.start_pos.y == y:
 *                     continue
 *                 node = self.locked_nodes[y][x]             # <<<<<<<<<<<<<<
 *                 if node.use_count()> 0:
 *                     paths.append(create_path(node))
 */
      __pyx_v_node = ((__pyx_v_self->locked_nodes[__pyx_v_y])[__pyx_v_x]);

      /* "botbowl/core/pathfinding/cython_pathfinding.pyx":566
 *                     continue
 *                 node = self.locked_nodes[y][x]
 *                 if node.use_count()> 0:             # <<<<<<<<<<<<<<
 *                     paths.append(create_path(node))
 *         return paths
 */
      __pyx_t_1 = ((__pyx_v_node.use_count() > 0) != 0);
      if (__pyx_t_1) {

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":567
 *                 node = self.locked_nodes[y][x]
 *                 if node.use_count()> 0:
 *                     paths.append(create_path(node))             # <<<<<<<<<<<<<<
 *         return paths
 * 
 */
        __pyx_t_3 = ((PyObject *)__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_create_path(__pyx_v_node)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 567, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_paths, __pyx_t_3); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 567, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "botbowl/core/pathfinding/cython_pathfinding.pyx":566
 *                     continue
 *                 node = self.locked_nodes[y][x]
 *                 if node.use_count()> 0:             # <<<<<<<<<<<<<<
 *                     paths.append(create_path(node))
 *         return paths
 */
      }
      __pyx_L7_continue:;
    }
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":568
 *                 if node.use_count()> 0:
 *                     paths.append(create_path(node))
 *         return paths             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_paths);
  __pyx_r = __pyx_v_paths;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":548
 *             self._expand(best_node)
 * 
 *     cdef object _collect_paths(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             NodePtr node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Pathfinder._collect_paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_paths);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":149
 * 
 * cdef class Pathfinder:
 *     cdef public object game, player, players_on_pitch             # <<<<<<<<<<<<<<
 *     cdef bint trr, can_block, can_handoff, can_foul, target_found, target_is_int, target_is_square, has_target, directly_to_adjacent, is_stunty, carries_ball
 *     cdef int ma, gfis, dodge_target, pitch_width, pitch_height, endzone_x
 */

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4game_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4game___get__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4game___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->game);
  __pyx_r = __pyx_v_self->game;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4game_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4game_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4game_2__set__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4game_2__set__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->game);
  __Pyx_DECREF(__pyx_v_self->game);
  __pyx_v_self->game = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4game_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4game_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4game_4__del__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4game_4__del__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->game);
  __Pyx_DECREF(__pyx_v_self->game);
  __pyx_v_self->game = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6player_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6player_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6player___get__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6player___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->player);
  __pyx_r = __pyx_v_self->player;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6player_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6player_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6player_2__set__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6player_2__set__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->player);
  __Pyx_DECREF(__pyx_v_self->player);
  __pyx_v_self->player = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6player_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6player_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6player_4__del__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6player_4__del__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->player);
  __Pyx_DECREF(__pyx_v_self->player);
  __pyx_v_self->player = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_16players_on_pitch_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_16players_on_pitch_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_16players_on_pitch___get__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_16players_on_pitch___get__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->players_on_pitch);
  __pyx_r = __pyx_v_self->players_on_pitch;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_16players_on_pitch_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_16players_on_pitch_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_16players_on_pitch_2__set__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_16players_on_pitch_2__set__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->players_on_pitch);
  __Pyx_DECREF(__pyx_v_self->players_on_pitch);
  __pyx_v_self->players_on_pitch = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_16players_on_pitch_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_16players_on_pitch_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_16players_on_pitch_4__del__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_16players_on_pitch_4__del__(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->players_on_pitch);
  __Pyx_DECREF(__pyx_v_self->players_on_pitch);
  __pyx_v_self->players_on_pitch = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.ball_pos,self.locked_nodes,self.nodes,self.open_set,self.risky_sets,self.start_pos,self.target_square cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_9__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_8__reduce_cython__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.ball_pos,self.locked_nodes,self.nodes,self.open_set,self.risky_sets,self.start_pos,self.target_square cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.ball_pos,self.locked_nodes,self.nodes,self.open_set,self.risky_sets,self.start_pos,self.target_square cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_ball_pos_self_locked_nodes, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.ball_pos,self.locked_nodes,self.nodes,self.open_set,self.risky_sets,self.start_pos,self.target_square cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Pathfinder.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.ball_pos,self.locked_nodes,self.nodes,self.open_set,self.risky_sets,self.start_pos,self.target_square cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.ball_pos,self.locked_nodes,self.nodes,self.open_set,self.risky_sets,self.start_pos,self.target_square cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_11__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Pathfinder.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_10__setstate_cython__(((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self.ball_pos,self.locked_nodes,self.nodes,self.open_set,self.risky_sets,self.start_pos,self.target_square cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.ball_pos,self.locked_nodes,self.nodes,self.open_set,self.risky_sets,self.start_pos,self.target_square cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_ball_pos_self_locked_nodes, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.ball_pos,self.locked_nodes,self.nodes,self.open_set,self.risky_sets,self.start_pos,self.target_square cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.ball_pos,self.locked_nodes,self.nodes,self.open_set,self.risky_sets,self.start_pos,self.target_square cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.Pathfinder.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":571
 * 
 * 
 * def get_safest_path(game, player, position, from_position=None, allow_team_reroll=False, num_moves_used=0, blitz=False):             # <<<<<<<<<<<<<<
 *     """
 *     :param game:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_1get_safest_path(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7botbowl_4core_11pathfinding_18cython_pathfinding_get_safest_path, "\n    :param game:\n    :param player: the player to move\n    :param position: the location to move to\n    :param num_moves_used: the number of moves already used by the player. If None, it will use the player's current number of used moves.\n    :param allow_team_reroll: allow team rerolls to be used.\n    :return a path containing the list of squares that forms the safest (and thereafter shortest) path for the given player to the\n    given position and the probability of success.\n    ");
static PyMethodDef __pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_1get_safest_path = {"get_safest_path", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_1get_safest_path, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7botbowl_4core_11pathfinding_18cython_pathfinding_get_safest_path};
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_1get_safest_path(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_game = 0;
  PyObject *__pyx_v_player = 0;
  PyObject *__pyx_v_position = 0;
  PyObject *__pyx_v_from_position = 0;
  PyObject *__pyx_v_allow_team_reroll = 0;
  PyObject *__pyx_v_num_moves_used = 0;
  PyObject *__pyx_v_blitz = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_safest_path (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_game,&__pyx_n_s_player,&__pyx_n_s_position,&__pyx_n_s_from_position,&__pyx_n_s_allow_team_reroll,&__pyx_n_s_num_moves_used,&__pyx_n_s_blitz,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_game,&__pyx_n_s_player,&__pyx_n_s_position,&__pyx_n_s_from_position,&__pyx_n_s_allow_team_reroll,&__pyx_n_s_num_moves_used,&__pyx_n_s_blitz,0};
    #endif
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[3] = ((PyObject *)((PyObject *)Py_None));
    values[4] = ((PyObject *)((PyObject *)Py_False));
    values[5] = ((PyObject *)((PyObject *)__pyx_int_0));
    values[6] = ((PyObject *)((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_game)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 571, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_player)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 571, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_safest_path", 0, 3, 7, 1); __PYX_ERR(0, 571, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_position)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 571, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_safest_path", 0, 3, 7, 2); __PYX_ERR(0, 571, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_from_position);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 571, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_allow_team_reroll);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 571, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_num_moves_used);
          if (value) { values[5] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 571, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_blitz);
          if (value) { values[6] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 571, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_safest_path") < 0)) __PYX_ERR(0, 571, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_game = values[0];
    __pyx_v_player = values[1];
    __pyx_v_position = values[2];
    __pyx_v_from_position = values[3];
    __pyx_v_allow_team_reroll = values[4];
    __pyx_v_num_moves_used = values[5];
    __pyx_v_blitz = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_safest_path", 0, 3, 7, __pyx_nargs); __PYX_ERR(0, 571, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.get_safest_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_get_safest_path(__pyx_self, __pyx_v_game, __pyx_v_player, __pyx_v_position, __pyx_v_from_position, __pyx_v_allow_team_reroll, __pyx_v_num_moves_used, __pyx_v_blitz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_get_safest_path(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_game, PyObject *__pyx_v_player, PyObject *__pyx_v_position, PyObject *__pyx_v_from_position, PyObject *__pyx_v_allow_team_reroll, PyObject *__pyx_v_num_moves_used, PyObject *__pyx_v_blitz) {
  PyObject *__pyx_v_orig_player = NULL;
  PyObject *__pyx_v_orig_ball = NULL;
  PyObject *__pyx_v_can_handoff = NULL;
  struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_finder = NULL;
  PyObject *__pyx_v_path = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_safest_path", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":581
 *     given position and the probability of success.
 *     """
 *     if from_position is not None and num_moves_used != 0:             # <<<<<<<<<<<<<<
 *         orig_player, orig_ball = _alter_state(game, player, from_position, num_moves_used)
 *     can_handoff = game.is_handoff_available() and game.get_ball_carrier() == player
 */
  __pyx_t_2 = (__pyx_v_from_position != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyInt_NeObjC(__pyx_v_num_moves_used, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":582
 *     """
 *     if from_position is not None and num_moves_used != 0:
 *         orig_player, orig_ball = _alter_state(game, player, from_position, num_moves_used)             # <<<<<<<<<<<<<<
 *     can_handoff = game.is_handoff_available() and game.get_ball_carrier() == player
 *     finder = Pathfinder(game, player, trr=allow_team_reroll, can_block=blitz, can_handoff=can_handoff)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_alter_state); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[5] = {__pyx_t_6, __pyx_v_game, __pyx_v_player, __pyx_v_from_position, __pyx_v_num_moves_used};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 4+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 582, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 582, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 582, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 582, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 582, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
      index = 0; __pyx_t_5 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 582, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 582, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __pyx_v_orig_player = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_v_orig_ball = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":581
 *     given position and the probability of success.
 *     """
 *     if from_position is not None and num_moves_used != 0:             # <<<<<<<<<<<<<<
 *         orig_player, orig_ball = _alter_state(game, player, from_position, num_moves_used)
 *     can_handoff = game.is_handoff_available() and game.get_ball_carrier() == player
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":583
 *     if from_position is not None and num_moves_used != 0:
 *         orig_player, orig_ball = _alter_state(game, player, from_position, num_moves_used)
 *     can_handoff = game.is_handoff_available() and game.get_ball_carrier() == player             # <<<<<<<<<<<<<<
 *     finder = Pathfinder(game, player, trr=allow_team_reroll, can_block=blitz, can_handoff=can_handoff)
 *     path = finder.get_path(target=position)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_game, __pyx_n_s_is_handoff_available); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_8, };
    __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 583, __pyx_L1_error)
  if (__pyx_t_1) {
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_6);
    __pyx_t_4 = __pyx_t_6;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_game, __pyx_n_s_get_ball_carrier); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_8, };
    __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_6, __pyx_v_player, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_4 = __pyx_t_5;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_L8_bool_binop_done:;
  __pyx_v_can_handoff = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":584
 *         orig_player, orig_ball = _alter_state(game, player, from_position, num_moves_used)
 *     can_handoff = game.is_handoff_available() and game.get_ball_carrier() == player
 *     finder = Pathfinder(game, player, trr=allow_team_reroll, can_block=blitz, can_handoff=can_handoff)             # <<<<<<<<<<<<<<
 *     path = finder.get_path(target=position)
 *     if from_position is not None and num_moves_used != 0:
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_game);
  __Pyx_GIVEREF(__pyx_v_game);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_game);
  __Pyx_INCREF(__pyx_v_player);
  __Pyx_GIVEREF(__pyx_v_player);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_player);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_trr, __pyx_v_allow_team_reroll) < 0) __PYX_ERR(0, 584, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_can_block, __pyx_v_blitz) < 0) __PYX_ERR(0, 584, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_can_handoff, __pyx_v_can_handoff) < 0) __PYX_ERR(0, 584, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder), __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_finder = ((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":585
 *     can_handoff = game.is_handoff_available() and game.get_ball_carrier() == player
 *     finder = Pathfinder(game, player, trr=allow_team_reroll, can_block=blitz, can_handoff=can_handoff)
 *     path = finder.get_path(target=position)             # <<<<<<<<<<<<<<
 *     if from_position is not None and num_moves_used != 0:
 *         _reset_state(game, player, orig_player, orig_ball)
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_finder->__pyx_vtab)->get_path(__pyx_v_finder, __pyx_v_position, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_path = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":586
 *     finder = Pathfinder(game, player, trr=allow_team_reroll, can_block=blitz, can_handoff=can_handoff)
 *     path = finder.get_path(target=position)
 *     if from_position is not None and num_moves_used != 0:             # <<<<<<<<<<<<<<
 *         _reset_state(game, player, orig_player, orig_ball)
 *     return path
 */
  __pyx_t_3 = (__pyx_v_from_position != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_PyInt_NeObjC(__pyx_v_num_moves_used, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L11_bool_binop_done:;
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":587
 *     path = finder.get_path(target=position)
 *     if from_position is not None and num_moves_used != 0:
 *         _reset_state(game, player, orig_player, orig_ball)             # <<<<<<<<<<<<<<
 *     return path
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_reset_state); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(!__pyx_v_orig_player)) { __Pyx_RaiseUnboundLocalError("orig_player"); __PYX_ERR(0, 587, __pyx_L1_error) }
    if (unlikely(!__pyx_v_orig_ball)) { __Pyx_RaiseUnboundLocalError("orig_ball"); __PYX_ERR(0, 587, __pyx_L1_error) }
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[5] = {__pyx_t_4, __pyx_v_game, __pyx_v_player, __pyx_v_orig_player, __pyx_v_orig_ball};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 4+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 587, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":586
 *     finder = Pathfinder(game, player, trr=allow_team_reroll, can_block=blitz, can_handoff=can_handoff)
 *     path = finder.get_path(target=position)
 *     if from_position is not None and num_moves_used != 0:             # <<<<<<<<<<<<<<
 *         _reset_state(game, player, orig_player, orig_ball)
 *     return path
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":588
 *     if from_position is not None and num_moves_used != 0:
 *         _reset_state(game, player, orig_player, orig_ball)
 *     return path             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_path);
  __pyx_r = __pyx_v_path;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":571
 * 
 * 
 * def get_safest_path(game, player, position, from_position=None, allow_team_reroll=False, num_moves_used=0, blitz=False):             # <<<<<<<<<<<<<<
 *     """
 *     :param game:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.get_safest_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_orig_player);
  __Pyx_XDECREF(__pyx_v_orig_ball);
  __Pyx_XDECREF(__pyx_v_can_handoff);
  __Pyx_XDECREF((PyObject *)__pyx_v_finder);
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":591
 * 
 * 
 * def get_safest_path_to_endzone(game, player, from_position=None, allow_team_reroll=False, num_moves_used=None):             # <<<<<<<<<<<<<<
 *     """
 *     :param game:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_3get_safest_path_to_endzone(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7botbowl_4core_11pathfinding_18cython_pathfinding_2get_safest_path_to_endzone, "\n    :param game:\n    :param player:\n    :param from_position: position to start movement from. If None, it will start from the player's current position.\n    :param num_moves_used: the number of moves already used by the player. If None, it will use the player's current number of used moves.\n    :param allow_team_reroll: allow team rerolls to be used.\302\264\n    :return: a path containing the list of squares that forms the safest (and thereafter shortest) path for the given player to\n    a position in the opponent endzone.\n    ");
static PyMethodDef __pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_3get_safest_path_to_endzone = {"get_safest_path_to_endzone", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_3get_safest_path_to_endzone, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7botbowl_4core_11pathfinding_18cython_pathfinding_2get_safest_path_to_endzone};
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_3get_safest_path_to_endzone(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_game = 0;
  PyObject *__pyx_v_player = 0;
  PyObject *__pyx_v_from_position = 0;
  PyObject *__pyx_v_allow_team_reroll = 0;
  PyObject *__pyx_v_num_moves_used = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_safest_path_to_endzone (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_game,&__pyx_n_s_player,&__pyx_n_s_from_position,&__pyx_n_s_allow_team_reroll,&__pyx_n_s_num_moves_used,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_game,&__pyx_n_s_player,&__pyx_n_s_from_position,&__pyx_n_s_allow_team_reroll,&__pyx_n_s_num_moves_used,0};
    #endif
    PyObject* values[5] = {0,0,0,0,0};
    values[2] = ((PyObject *)((PyObject *)Py_None));
    values[3] = ((PyObject *)((PyObject *)Py_False));
    values[4] = ((PyObject *)((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_game)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 591, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_player)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 591, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_safest_path_to_endzone", 0, 2, 5, 1); __PYX_ERR(0, 591, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_from_position);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 591, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_allow_team_reroll);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 591, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_num_moves_used);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 591, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_safest_path_to_endzone") < 0)) __PYX_ERR(0, 591, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_game = values[0];
    __pyx_v_player = values[1];
    __pyx_v_from_position = values[2];
    __pyx_v_allow_team_reroll = values[3];
    __pyx_v_num_moves_used = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_safest_path_to_endzone", 0, 2, 5, __pyx_nargs); __PYX_ERR(0, 591, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.get_safest_path_to_endzone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_2get_safest_path_to_endzone(__pyx_self, __pyx_v_game, __pyx_v_player, __pyx_v_from_position, __pyx_v_allow_team_reroll, __pyx_v_num_moves_used);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_2get_safest_path_to_endzone(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_game, PyObject *__pyx_v_player, PyObject *__pyx_v_from_position, PyObject *__pyx_v_allow_team_reroll, PyObject *__pyx_v_num_moves_used) {
  PyObject *__pyx_v_orig_player = NULL;
  PyObject *__pyx_v_orig_ball = NULL;
  PyObject *__pyx_v_x = NULL;
  struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_finder = NULL;
  PyObject *__pyx_v_path = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_safest_path_to_endzone", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":601
 *     a position in the opponent endzone.
 *     """
 *     if from_position is not None and num_moves_used != 0:             # <<<<<<<<<<<<<<
 *         orig_player, orig_ball = _alter_state(game, player, from_position, num_moves_used)
 *     x = game.get_opp_endzone_x(player.team)
 */
  __pyx_t_2 = (__pyx_v_from_position != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyInt_NeObjC(__pyx_v_num_moves_used, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":602
 *     """
 *     if from_position is not None and num_moves_used != 0:
 *         orig_player, orig_ball = _alter_state(game, player, from_position, num_moves_used)             # <<<<<<<<<<<<<<
 *     x = game.get_opp_endzone_x(player.team)
 *     finder = Pathfinder(game, player, trr=allow_team_reroll)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_alter_state); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[5] = {__pyx_t_6, __pyx_v_game, __pyx_v_player, __pyx_v_from_position, __pyx_v_num_moves_used};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 4+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 602, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
      index = 0; __pyx_t_5 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 602, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 602, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __pyx_v_orig_player = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_v_orig_ball = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":601
 *     a position in the opponent endzone.
 *     """
 *     if from_position is not None and num_moves_used != 0:             # <<<<<<<<<<<<<<
 *         orig_player, orig_ball = _alter_state(game, player, from_position, num_moves_used)
 *     x = game.get_opp_endzone_x(player.team)
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":603
 *     if from_position is not None and num_moves_used != 0:
 *         orig_player, orig_ball = _alter_state(game, player, from_position, num_moves_used)
 *     x = game.get_opp_endzone_x(player.team)             # <<<<<<<<<<<<<<
 *     finder = Pathfinder(game, player, trr=allow_team_reroll)
 *     path = finder.get_path(target=x)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_game, __pyx_n_s_get_opp_endzone_x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_team); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_5};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_v_x = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":604
 *         orig_player, orig_ball = _alter_state(game, player, from_position, num_moves_used)
 *     x = game.get_opp_endzone_x(player.team)
 *     finder = Pathfinder(game, player, trr=allow_team_reroll)             # <<<<<<<<<<<<<<
 *     path = finder.get_path(target=x)
 *     if from_position is not None and num_moves_used != 0:
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_game);
  __Pyx_GIVEREF(__pyx_v_game);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_game);
  __Pyx_INCREF(__pyx_v_player);
  __Pyx_GIVEREF(__pyx_v_player);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_player);
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_trr, __pyx_v_allow_team_reroll) < 0) __PYX_ERR(0, 604, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder), __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_finder = ((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":605
 *     x = game.get_opp_endzone_x(player.team)
 *     finder = Pathfinder(game, player, trr=allow_team_reroll)
 *     path = finder.get_path(target=x)             # <<<<<<<<<<<<<<
 *     if from_position is not None and num_moves_used != 0:
 *         _reset_state(game, player, orig_player, orig_ball)
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_finder->__pyx_vtab)->get_path(__pyx_v_finder, __pyx_v_x, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_path = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":606
 *     finder = Pathfinder(game, player, trr=allow_team_reroll)
 *     path = finder.get_path(target=x)
 *     if from_position is not None and num_moves_used != 0:             # <<<<<<<<<<<<<<
 *         _reset_state(game, player, orig_player, orig_ball)
 *     return path
 */
  __pyx_t_3 = (__pyx_v_from_position != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_PyInt_NeObjC(__pyx_v_num_moves_used, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":607
 *     path = finder.get_path(target=x)
 *     if from_position is not None and num_moves_used != 0:
 *         _reset_state(game, player, orig_player, orig_ball)             # <<<<<<<<<<<<<<
 *     return path
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_reset_state); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(!__pyx_v_orig_player)) { __Pyx_RaiseUnboundLocalError("orig_player"); __PYX_ERR(0, 607, __pyx_L1_error) }
    if (unlikely(!__pyx_v_orig_ball)) { __Pyx_RaiseUnboundLocalError("orig_ball"); __PYX_ERR(0, 607, __pyx_L1_error) }
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[5] = {__pyx_t_4, __pyx_v_game, __pyx_v_player, __pyx_v_orig_player, __pyx_v_orig_ball};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 4+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":606
 *     finder = Pathfinder(game, player, trr=allow_team_reroll)
 *     path = finder.get_path(target=x)
 *     if from_position is not None and num_moves_used != 0:             # <<<<<<<<<<<<<<
 *         _reset_state(game, player, orig_player, orig_ball)
 *     return path
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":608
 *     if from_position is not None and num_moves_used != 0:
 *         _reset_state(game, player, orig_player, orig_ball)
 *     return path             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_path);
  __pyx_r = __pyx_v_path;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":591
 * 
 * 
 * def get_safest_path_to_endzone(game, player, from_position=None, allow_team_reroll=False, num_moves_used=None):             # <<<<<<<<<<<<<<
 *     """
 *     :param game:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.get_safest_path_to_endzone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_orig_player);
  __Pyx_XDECREF(__pyx_v_orig_ball);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF((PyObject *)__pyx_v_finder);
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "botbowl/core/pathfinding/cython_pathfinding.pyx":611
 * 
 * 
 * def get_all_paths(game, player, from_position=None, allow_team_reroll=False, num_moves_used=None, blitz=False):             # <<<<<<<<<<<<<<
 *     """
 *     :param game:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_5get_all_paths(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7botbowl_4core_11pathfinding_18cython_pathfinding_4get_all_paths, "\n    :param game:\n    :param player: the player to move\n    :param from_position: position to start movement from. If None, it will start from the player's current position.\n    :param num_moves_used: the number of moves already used by the player. If None, it will use the player's current number of used moves.\n    :param allow_team_reroll: allow team rerolls to be used.\n    :param blitz: only finds blitz moves if True.\n    :return a path containing the list of squares that forms the safest (and thereafter shortest) path for the given player to\n    a position that is adjacent to the other player and the probability of success.\n    ");
static PyMethodDef __pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_5get_all_paths = {"get_all_paths", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_5get_all_paths, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7botbowl_4core_11pathfinding_18cython_pathfinding_4get_all_paths};
static PyObject *__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_5get_all_paths(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_game = 0;
  PyObject *__pyx_v_player = 0;
  PyObject *__pyx_v_from_position = 0;
  PyObject *__pyx_v_allow_team_reroll = 0;
  PyObject *__pyx_v_num_moves_used = 0;
  PyObject *__pyx_v_blitz = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_all_paths (wrapper)", 0);
  {
    #if CYTHON_USE_MODULE_STATE
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_game,&__pyx_n_s_player,&__pyx_n_s_from_position,&__pyx_n_s_allow_team_reroll,&__pyx_n_s_num_moves_used,&__pyx_n_s_blitz,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_game,&__pyx_n_s_player,&__pyx_n_s_from_position,&__pyx_n_s_allow_team_reroll,&__pyx_n_s_num_moves_used,&__pyx_n_s_blitz,0};
    #endif
    PyObject* values[6] = {0,0,0,0,0,0};
    values[2] = ((PyObject *)((PyObject *)Py_None));
    values[3] = ((PyObject *)((PyObject *)Py_False));
    values[4] = ((PyObject *)((PyObject *)Py_None));
    values[5] = ((PyObject *)((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_game)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 611, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_player)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 611, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_all_paths", 0, 2, 6, 1); __PYX_ERR(0, 611, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_from_position);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 611, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_allow_team_reroll);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 611, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_num_moves_used);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 611, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_blitz);
          if (value) { values[5] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 611, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_all_paths") < 0)) __PYX_ERR(0, 611, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_game = values[0];
    __pyx_v_player = values[1];
    __pyx_v_from_position = values[2];
    __pyx_v_allow_team_reroll = values[3];
    __pyx_v_num_moves_used = values[4];
    __pyx_v_blitz = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_all_paths", 0, 2, 6, __pyx_nargs); __PYX_ERR(0, 611, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.get_all_paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4get_all_paths(__pyx_self, __pyx_v_game, __pyx_v_player, __pyx_v_from_position, __pyx_v_allow_team_reroll, __pyx_v_num_moves_used, __pyx_v_blitz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7botbowl_4core_11pathfinding_18cython_pathfinding_4get_all_paths(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_game, PyObject *__pyx_v_player, PyObject *__pyx_v_from_position, PyObject *__pyx_v_allow_team_reroll, PyObject *__pyx_v_num_moves_used, PyObject *__pyx_v_blitz) {
  PyObject *__pyx_v_orig_player = NULL;
  PyObject *__pyx_v_orig_ball = NULL;
  struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *__pyx_v_finder = NULL;
  PyObject *__pyx_v_paths = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_all_paths", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":622
 *     a position that is adjacent to the other player and the probability of success.
 *     """
 *     if from_position is not None and num_moves_used != 0:             # <<<<<<<<<<<<<<
 *         orig_player, orig_ball = _alter_state(game, player, from_position, num_moves_used)
 *     finder = Pathfinder(game, player, trr=allow_team_reroll, can_block=blitz)
 */
  __pyx_t_2 = (__pyx_v_from_position != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyInt_NeObjC(__pyx_v_num_moves_used, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":623
 *     """
 *     if from_position is not None and num_moves_used != 0:
 *         orig_player, orig_ball = _alter_state(game, player, from_position, num_moves_used)             # <<<<<<<<<<<<<<
 *     finder = Pathfinder(game, player, trr=allow_team_reroll, can_block=blitz)
 *     paths = finder.get_paths()
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_alter_state); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[5] = {__pyx_t_6, __pyx_v_game, __pyx_v_player, __pyx_v_from_position, __pyx_v_num_moves_used};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 4+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 623, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
      index = 0; __pyx_t_5 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 623, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 623, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __pyx_v_orig_player = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_v_orig_ball = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":622
 *     a position that is adjacent to the other player and the probability of success.
 *     """
 *     if from_position is not None and num_moves_used != 0:             # <<<<<<<<<<<<<<
 *         orig_player, orig_ball = _alter_state(game, player, from_position, num_moves_used)
 *     finder = Pathfinder(game, player, trr=allow_team_reroll, can_block=blitz)
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":624
 *     if from_position is not None and num_moves_used != 0:
 *         orig_player, orig_ball = _alter_state(game, player, from_position, num_moves_used)
 *     finder = Pathfinder(game, player, trr=allow_team_reroll, can_block=blitz)             # <<<<<<<<<<<<<<
 *     paths = finder.get_paths()
 *     if from_position is not None and num_moves_used != 0:
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_game);
  __Pyx_GIVEREF(__pyx_v_game);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_game);
  __Pyx_INCREF(__pyx_v_player);
  __Pyx_GIVEREF(__pyx_v_player);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_player);
  __pyx_t_6 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_trr, __pyx_v_allow_team_reroll) < 0) __PYX_ERR(0, 624, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_can_block, __pyx_v_blitz) < 0) __PYX_ERR(0, 624, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder), __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_finder = ((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":625
 *         orig_player, orig_ball = _alter_state(game, player, from_position, num_moves_used)
 *     finder = Pathfinder(game, player, trr=allow_team_reroll, can_block=blitz)
 *     paths = finder.get_paths()             # <<<<<<<<<<<<<<
 *     if from_position is not None and num_moves_used != 0:
 *         _reset_state(game, player, orig_player, orig_ball)
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)__pyx_v_finder->__pyx_vtab)->get_paths(__pyx_v_finder, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_paths = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":626
 *     finder = Pathfinder(game, player, trr=allow_team_reroll, can_block=blitz)
 *     paths = finder.get_paths()
 *     if from_position is not None and num_moves_used != 0:             # <<<<<<<<<<<<<<
 *         _reset_state(game, player, orig_player, orig_ball)
 * 
 */
  __pyx_t_3 = (__pyx_v_from_position != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_PyInt_NeObjC(__pyx_v_num_moves_used, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":627
 *     paths = finder.get_paths()
 *     if from_position is not None and num_moves_used != 0:
 *         _reset_state(game, player, orig_player, orig_ball)             # <<<<<<<<<<<<<<
 * 
 *     return paths
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_reset_state); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(!__pyx_v_orig_player)) { __Pyx_RaiseUnboundLocalError("orig_player"); __PYX_ERR(0, 627, __pyx_L1_error) }
    if (unlikely(!__pyx_v_orig_ball)) { __Pyx_RaiseUnboundLocalError("orig_ball"); __PYX_ERR(0, 627, __pyx_L1_error) }
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[5] = {__pyx_t_4, __pyx_v_game, __pyx_v_player, __pyx_v_orig_player, __pyx_v_orig_ball};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 4+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "botbowl/core/pathfinding/cython_pathfinding.pyx":626
 *     finder = Pathfinder(game, player, trr=allow_team_reroll, can_block=blitz)
 *     paths = finder.get_paths()
 *     if from_position is not None and num_moves_used != 0:             # <<<<<<<<<<<<<<
 *         _reset_state(game, player, orig_player, orig_ball)
 * 
 */
  }

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":629
 *         _reset_state(game, player, orig_player, orig_ball)
 * 
 *     return paths             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_paths);
  __pyx_r = __pyx_v_paths;
  goto __pyx_L0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":611
 * 
 * 
 * def get_all_paths(game, player, from_position=None, allow_team_reroll=False, num_moves_used=None, blitz=False):             # <<<<<<<<<<<<<<
 *     """
 *     :param game:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("botbowl.core.pathfinding.cython_pathfinding.get_all_paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_orig_player);
  __Pyx_XDECREF(__pyx_v_orig_ball);
  __Pyx_XDECREF((PyObject *)__pyx_v_finder);
  __Pyx_XDECREF(__pyx_v_paths);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

static PyObject *__pyx_convert_vector_to_py_int(std::vector<int>  const &__pyx_v_v) {
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 * 
 */
  __pyx_t_1 = ((__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(<Py_ssize_t> v.size())
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 * 
 */
  }

  /* "vector.to_py":70
 *         raise MemoryError()
 * 
 *     o = PyList_New(<Py_ssize_t> v.size())             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(((Py_ssize_t)__pyx_v_v.size())); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":75
 *     cdef object item
 * 
 *     for i in range(v.size()):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v.size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":76
 * 
 *     for i in range(v.size()):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":77
 *     for i in range(v.size()):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":78
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":80
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Path __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Path;

static PyObject *__pyx_tp_new_7botbowl_4core_11pathfinding_18cython_pathfinding_Path(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)o);
  p->__pyx_vtab = __pyx_vtabptr_7botbowl_4core_11pathfinding_18cython_pathfinding_Path;
  new((void*)&(p->final_node)) __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr();
  p->_steps = Py_None; Py_INCREF(Py_None);
  p->_rolls = Py_None; Py_INCREF(Py_None);
  p->block_dice = Py_None; Py_INCREF(Py_None);
  p->handoff_roll = Py_None; Py_INCREF(Py_None);
  p->foul_roll = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7botbowl_4core_11pathfinding_18cython_pathfinding_Path(PyObject *o) {
  struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *p = (struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !_PyGC_FINALIZED(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7botbowl_4core_11pathfinding_18cython_pathfinding_Path) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->final_node);
  Py_CLEAR(p->_steps);
  Py_CLEAR(p->_rolls);
  Py_CLEAR(p->block_dice);
  Py_CLEAR(p->handoff_roll);
  Py_CLEAR(p->foul_roll);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7botbowl_4core_11pathfinding_18cython_pathfinding_Path(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *p = (struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)o;
  if (p->_steps) {
    e = (*v)(p->_steps, a); if (e) return e;
  }
  if (p->_rolls) {
    e = (*v)(p->_rolls, a); if (e) return e;
  }
  if (p->block_dice) {
    e = (*v)(p->block_dice, a); if (e) return e;
  }
  if (p->handoff_roll) {
    e = (*v)(p->handoff_roll, a); if (e) return e;
  }
  if (p->foul_roll) {
    e = (*v)(p->foul_roll, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7botbowl_4core_11pathfinding_18cython_pathfinding_Path(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *p = (struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *)o;
  tmp = ((PyObject*)p->_steps);
  p->_steps = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_rolls);
  p->_rolls = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->block_dice);
  p->block_dice = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->handoff_roll);
  p->handoff_roll = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->foul_roll);
  p->foul_roll = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_tp_richcompare_7botbowl_4core_11pathfinding_18cython_pathfinding_Path(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret);
        Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_steps(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_5steps_1__get__(o);
}

static PyObject *__pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_rolls(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_5rolls_1__get__(o);
}

static PyObject *__pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path__steps(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_steps_1__get__(o);
}

static int __pyx_setprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path__steps(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_steps_3__set__(o, v);
  }
  else {
    return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_steps_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path__rolls(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_rolls_1__get__(o);
}

static int __pyx_setprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path__rolls(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_rolls_3__set__(o, v);
  }
  else {
    return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_6_rolls_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_prob(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_4prob_1__get__(o);
}

static int __pyx_setprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_prob(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_4prob_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_block_dice(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10block_dice_1__get__(o);
}

static int __pyx_setprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_block_dice(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10block_dice_3__set__(o, v);
  }
  else {
    return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_10block_dice_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_handoff_roll(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_12handoff_roll_1__get__(o);
}

static int __pyx_setprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_handoff_roll(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_12handoff_roll_3__set__(o, v);
  }
  else {
    return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_12handoff_roll_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_foul_roll(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9foul_roll_1__get__(o);
}

static int __pyx_setprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_foul_roll(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9foul_roll_3__set__(o, v);
  }
  else {
    return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_9foul_roll_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_7botbowl_4core_11pathfinding_18cython_pathfinding_Path[] = {
  {"is_empty", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_5is_empty, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_7__reduce__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7botbowl_4core_11pathfinding_18cython_pathfinding_Path[] = {
  {(char *)"steps", __pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_steps, 0, (char *)0, 0},
  {(char *)"rolls", __pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_rolls, 0, (char *)0, 0},
  {(char *)"_steps", __pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path__steps, __pyx_setprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path__steps, (char *)0, 0},
  {(char *)"_rolls", __pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path__rolls, __pyx_setprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path__rolls, (char *)0, 0},
  {(char *)"prob", __pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_prob, __pyx_setprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_prob, (char *)0, 0},
  {(char *)"block_dice", __pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_block_dice, __pyx_setprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_block_dice, (char *)0, 0},
  {(char *)"handoff_roll", __pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_handoff_roll, __pyx_setprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_handoff_roll, (char *)0, 0},
  {(char *)"foul_roll", __pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_foul_roll, __pyx_setprop_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_foul_roll, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Path_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7botbowl_4core_11pathfinding_18cython_pathfinding_Path},
  {Py_tp_repr, (void *)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_11__repr__},
  {Py_sq_length, (void *)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_3__len__},
  {Py_mp_length, (void *)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_3__len__},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7botbowl_4core_11pathfinding_18cython_pathfinding_Path},
  {Py_tp_clear, (void *)__pyx_tp_clear_7botbowl_4core_11pathfinding_18cython_pathfinding_Path},
  {Py_tp_richcompare, (void *)__pyx_tp_richcompare_7botbowl_4core_11pathfinding_18cython_pathfinding_Path},
  {Py_tp_methods, (void *)__pyx_methods_7botbowl_4core_11pathfinding_18cython_pathfinding_Path},
  {Py_tp_getset, (void *)__pyx_getsets_7botbowl_4core_11pathfinding_18cython_pathfinding_Path},
  {Py_tp_new, (void *)__pyx_tp_new_7botbowl_4core_11pathfinding_18cython_pathfinding_Path},
  {0, 0},
};
static PyType_Spec __pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Path_spec = {
  "botbowl.core.pathfinding.cython_pathfinding.Path",
  sizeof(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Path_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence_Path = {
  __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Path = {
  __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_3__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Path = {
  PyVarObject_HEAD_INIT(0, 0)
  "botbowl.core.pathfinding.cython_pathfinding.""Path", /*tp_name*/
  sizeof(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7botbowl_4core_11pathfinding_18cython_pathfinding_Path, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_11__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Path, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Path, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7botbowl_4core_11pathfinding_18cython_pathfinding_Path, /*tp_traverse*/
  __pyx_tp_clear_7botbowl_4core_11pathfinding_18cython_pathfinding_Path, /*tp_clear*/
  __pyx_tp_richcompare_7botbowl_4core_11pathfinding_18cython_pathfinding_Path, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7botbowl_4core_11pathfinding_18cython_pathfinding_Path, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7botbowl_4core_11pathfinding_18cython_pathfinding_Path, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7botbowl_4core_11pathfinding_18cython_pathfinding_Path, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder;

static PyObject *__pyx_tp_new_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)o);
  p->__pyx_vtab = __pyx_vtabptr_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder;
  new((void*)&(p->ball_pos)) node_ns::Square();
  new((void*)&(p->start_pos)) node_ns::Square();
  new((void*)&(p->target_square)) node_ns::Square();
  new((void*)&(p->open_set)) std::priority_queue<__pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr> ();
  new((void*)&(p->risky_sets)) std::map<double,std::vector<__pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr> > ();
  p->game = Py_None; Py_INCREF(Py_None);
  p->player = Py_None; Py_INCREF(Py_None);
  p->players_on_pitch = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder(PyObject *o) {
  struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *p = (struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !_PyGC_FINALIZED(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_1__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->ball_pos);
  __Pyx_call_destructor(p->start_pos);
  __Pyx_call_destructor(p->target_square);
  __Pyx_call_destructor(p->open_set);
  __Pyx_call_destructor(p->risky_sets);
  Py_CLEAR(p->game);
  Py_CLEAR(p->player);
  Py_CLEAR(p->players_on_pitch);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *p = (struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)o;
  if (p->game) {
    e = (*v)(p->game, a); if (e) return e;
  }
  if (p->player) {
    e = (*v)(p->player, a); if (e) return e;
  }
  if (p->players_on_pitch) {
    e = (*v)(p->players_on_pitch, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *p = (struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *)o;
  tmp = ((PyObject*)p->game);
  p->game = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->player);
  p->player = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->players_on_pitch);
  p->players_on_pitch = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4game_1__get__(o);
}

static int __pyx_setprop_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_game(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4game_3__set__(o, v);
  }
  else {
    return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_4game_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_player(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6player_1__get__(o);
}

static int __pyx_setprop_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_player(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6player_3__set__(o, v);
  }
  else {
    return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_6player_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_players_on_pitch(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_16players_on_pitch_1__get__(o);
}

static int __pyx_setprop_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_players_on_pitch(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_16players_on_pitch_3__set__(o, v);
  }
  else {
    return __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_16players_on_pitch_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder[] = {
  {(char *)"game", __pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_game, __pyx_setprop_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_game, (char *)0, 0},
  {(char *)"player", __pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_player, __pyx_setprop_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_player, (char *)0, 0},
  {(char *)"players_on_pitch", __pyx_getprop_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_players_on_pitch, __pyx_setprop_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_players_on_pitch, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder},
  {Py_tp_clear, (void *)__pyx_tp_clear_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder},
  {Py_tp_methods, (void *)__pyx_methods_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder},
  {Py_tp_getset, (void *)__pyx_getsets_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder},
  {Py_tp_init, (void *)__pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder},
  {0, 0},
};
static PyType_Spec __pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder_spec = {
  "botbowl.core.pathfinding.cython_pathfinding.Pathfinder",
  sizeof(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder_slots,
};
#else

static PyTypeObject __pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder = {
  PyVarObject_HEAD_INIT(0, 0)
  "botbowl.core.pathfinding.cython_pathfinding.""Pathfinder", /*tp_name*/
  sizeof(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder, /*tp_traverse*/
  __pyx_tp_clear_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  #if CYTHON_USE_MODULE_STATE
  {0, __pyx_k_DODGE, sizeof(__pyx_k_DODGE), 0, 0, 1, 1},
  {0, __pyx_k_JUMP_UP, sizeof(__pyx_k_JUMP_UP), 0, 0, 1, 1},
  {0, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {0, __pyx_k_POURING_RAIN, sizeof(__pyx_k_POURING_RAIN), 0, 0, 1, 1},
  {0, __pyx_k_Path, sizeof(__pyx_k_Path), 0, 0, 1, 1},
  {0, __pyx_k_Path___reduce, sizeof(__pyx_k_Path___reduce), 0, 0, 1, 1},
  {0, __pyx_k_Path_get_last_step, sizeof(__pyx_k_Path_get_last_step), 0, 0, 1, 1},
  {0, __pyx_k_Path_is_empty, sizeof(__pyx_k_Path_is_empty), 0, 0, 1, 1},
  {0, __pyx_k_Path_target, sizeof(__pyx_k_Path_target), 0, 1, 0, 0},
  {0, __pyx_k_Pathfinder, sizeof(__pyx_k_Pathfinder), 0, 0, 1, 1},
  {0, __pyx_k_Pathfinder___reduce_cython, sizeof(__pyx_k_Pathfinder___reduce_cython), 0, 0, 1, 1},
  {0, __pyx_k_Pathfinder___setstate_cython, sizeof(__pyx_k_Pathfinder___setstate_cython), 0, 0, 1, 1},
  {0, __pyx_k_Pathfinder_get_path, sizeof(__pyx_k_Pathfinder_get_path), 0, 0, 1, 1},
  {0, __pyx_k_Pathfinder_get_paths, sizeof(__pyx_k_Pathfinder_get_paths), 0, 0, 1, 1},
  {0, __pyx_k_STUNTY, sizeof(__pyx_k_STUNTY), 0, 0, 1, 1},
  {0, __pyx_k_SURE_FEET, sizeof(__pyx_k_SURE_FEET), 0, 0, 1, 1},
  {0, __pyx_k_SURE_HANDS, sizeof(__pyx_k_SURE_HANDS), 0, 0, 1, 1},
  {0, __pyx_k_Skill, sizeof(__pyx_k_Skill), 0, 0, 1, 1},
  {0, __pyx_k_Square, sizeof(__pyx_k_Square), 0, 0, 1, 1},
  {0, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {0, __pyx_k_WeatherType, sizeof(__pyx_k_WeatherType), 0, 0, 1, 1},
  {0, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 0},
  {0, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {0, __pyx_k__31, sizeof(__pyx_k__31), 0, 0, 1, 1},
  {0, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
  {0, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
  {0, __pyx_k__7, sizeof(__pyx_k__7), 0, 0, 1, 1},
  {0, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {0, __pyx_k_allow_team_reroll, sizeof(__pyx_k_allow_team_reroll), 0, 0, 1, 1},
  {0, __pyx_k_alter_state, sizeof(__pyx_k_alter_state), 0, 0, 1, 1},
  {0, __pyx_k_arena, sizeof(__pyx_k_arena), 0, 0, 1, 1},
  {0, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {0, __pyx_k_attacker, sizeof(__pyx_k_attacker), 0, 0, 1, 1},
  {0, __pyx_k_blitz, sizeof(__pyx_k_blitz), 0, 0, 1, 1},
  {0, __pyx_k_block_dice, sizeof(__pyx_k_block_dice), 0, 0, 1, 1},
  {0, __pyx_k_block_dice_2, sizeof(__pyx_k_block_dice_2), 0, 1, 0, 0},
  {0, __pyx_k_board, sizeof(__pyx_k_board), 0, 0, 1, 1},
  {0, __pyx_k_botbowl, sizeof(__pyx_k_botbowl), 0, 0, 1, 1},
  {0, __pyx_k_botbowl_core_forward_model, sizeof(__pyx_k_botbowl_core_forward_model), 0, 0, 1, 1},
  {0, __pyx_k_botbowl_core_model, sizeof(__pyx_k_botbowl_core_model), 0, 0, 1, 1},
  {0, __pyx_k_botbowl_core_pathfinding_cython, sizeof(__pyx_k_botbowl_core_pathfinding_cython), 0, 0, 1, 0},
  {0, __pyx_k_botbowl_core_pathfinding_cython_2, sizeof(__pyx_k_botbowl_core_pathfinding_cython_2), 0, 0, 1, 1},
  {0, __pyx_k_botbowl_core_table, sizeof(__pyx_k_botbowl_core_table), 0, 0, 1, 1},
  {0, __pyx_k_can_block, sizeof(__pyx_k_can_block), 0, 0, 1, 1},
  {0, __pyx_k_can_catch, sizeof(__pyx_k_can_catch), 0, 0, 1, 1},
  {0, __pyx_k_can_foul, sizeof(__pyx_k_can_foul), 0, 0, 1, 1},
  {0, __pyx_k_can_handoff, sizeof(__pyx_k_can_handoff), 0, 0, 1, 1},
  {0, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {0, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {0, __pyx_k_core, sizeof(__pyx_k_core), 0, 0, 1, 1},
  {0, __pyx_k_defender, sizeof(__pyx_k_defender), 0, 0, 1, 1},
  {0, __pyx_k_directly_to_adjacent, sizeof(__pyx_k_directly_to_adjacent), 0, 0, 1, 1},
  {0, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
  {0, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
  {0, __pyx_k_finder, sizeof(__pyx_k_finder), 0, 0, 1, 1},
  {0, __pyx_k_forward_model, sizeof(__pyx_k_forward_model), 0, 0, 1, 1},
  {0, __pyx_k_foul, sizeof(__pyx_k_foul), 0, 0, 1, 1},
  {0, __pyx_k_foul_roll, sizeof(__pyx_k_foul_roll), 0, 0, 1, 1},
  {0, __pyx_k_foul_roll_2, sizeof(__pyx_k_foul_roll_2), 0, 1, 0, 0},
  {0, __pyx_k_from_position, sizeof(__pyx_k_from_position), 0, 0, 1, 1},
  {0, __pyx_k_game, sizeof(__pyx_k_game), 0, 0, 1, 1},
  {0, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
  {0, __pyx_k_get_adjacent_squares, sizeof(__pyx_k_get_adjacent_squares), 0, 0, 1, 1},
  {0, __pyx_k_get_ag, sizeof(__pyx_k_get_ag), 0, 0, 1, 1},
  {0, __pyx_k_get_all_paths, sizeof(__pyx_k_get_all_paths), 0, 0, 1, 1},
  {0, __pyx_k_get_av, sizeof(__pyx_k_get_av), 0, 0, 1, 1},
  {0, __pyx_k_get_ball, sizeof(__pyx_k_get_ball), 0, 0, 1, 1},
  {0, __pyx_k_get_ball_carrier, sizeof(__pyx_k_get_ball_carrier), 0, 0, 1, 1},
  {0, __pyx_k_get_catch_modifiers, sizeof(__pyx_k_get_catch_modifiers), 0, 0, 1, 1},
  {0, __pyx_k_get_last_step, sizeof(__pyx_k_get_last_step), 0, 0, 1, 1},
  {0, __pyx_k_get_opp_endzone_x, sizeof(__pyx_k_get_opp_endzone_x), 0, 0, 1, 1},
  {0, __pyx_k_get_path, sizeof(__pyx_k_get_path), 0, 0, 1, 1},
  {0, __pyx_k_get_paths, sizeof(__pyx_k_get_paths), 0, 0, 1, 1},
  {0, __pyx_k_get_players_on_pitch, sizeof(__pyx_k_get_players_on_pitch), 0, 0, 1, 1},
  {0, __pyx_k_get_safest_path, sizeof(__pyx_k_get_safest_path), 0, 0, 1, 1},
  {0, __pyx_k_get_safest_path_to_endzone, sizeof(__pyx_k_get_safest_path_to_endzone), 0, 0, 1, 1},
  {0, __pyx_k_get_stand_up_modifier, sizeof(__pyx_k_get_stand_up_modifier), 0, 0, 1, 1},
  {0, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {0, __pyx_k_handoff, sizeof(__pyx_k_handoff), 0, 0, 1, 1},
  {0, __pyx_k_handoff_roll, sizeof(__pyx_k_handoff_roll), 0, 0, 1, 1},
  {0, __pyx_k_handoff_roll_2, sizeof(__pyx_k_handoff_roll_2), 0, 1, 0, 0},
  {0, __pyx_k_has_skill, sizeof(__pyx_k_has_skill), 0, 0, 1, 1},
  {0, __pyx_k_has_tackle_zone, sizeof(__pyx_k_has_tackle_zone), 0, 0, 1, 1},
  {0, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {0, __pyx_k_home_team, sizeof(__pyx_k_home_team), 0, 0, 1, 1},
  {0, __pyx_k_immutable_types, sizeof(__pyx_k_immutable_types), 0, 0, 1, 1},
  {0, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {0, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {0, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {0, __pyx_k_is_empty, sizeof(__pyx_k_is_empty), 0, 0, 1, 1},
  {0, __pyx_k_is_handoff_available, sizeof(__pyx_k_is_handoff_available), 0, 0, 1, 1},
  {0, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
  {0, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {0, __pyx_k_model, sizeof(__pyx_k_model), 0, 0, 1, 1},
  {0, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {0, __pyx_k_num_assists_at, sizeof(__pyx_k_num_assists_at), 0, 0, 1, 1},
  {0, __pyx_k_num_block_dice_at, sizeof(__pyx_k_num_block_dice_at), 0, 0, 1, 1},
  {0, __pyx_k_num_gfis_left, sizeof(__pyx_k_num_gfis_left), 0, 0, 1, 1},
  {0, __pyx_k_num_moves_left, sizeof(__pyx_k_num_moves_left), 0, 0, 1, 1},
  {0, __pyx_k_num_moves_used, sizeof(__pyx_k_num_moves_used), 0, 0, 1, 1},
  {0, __pyx_k_on_ground, sizeof(__pyx_k_on_ground), 0, 0, 1, 1},
  {0, __pyx_k_orig_ball, sizeof(__pyx_k_orig_ball), 0, 0, 1, 1},
  {0, __pyx_k_orig_player, sizeof(__pyx_k_orig_player), 0, 0, 1, 1},
  {0, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {0, __pyx_k_paths, sizeof(__pyx_k_paths), 0, 0, 1, 1},
  {0, __pyx_k_pitch, sizeof(__pyx_k_pitch), 0, 0, 1, 1},
  {0, __pyx_k_player, sizeof(__pyx_k_player), 0, 0, 1, 1},
  {0, __pyx_k_position, sizeof(__pyx_k_position), 0, 0, 1, 1},
  {0, __pyx_k_prob, sizeof(__pyx_k_prob), 0, 0, 1, 1},
  {0, __pyx_k_prob_2, sizeof(__pyx_k_prob_2), 0, 1, 0, 0},
  {0, __pyx_k_python_pathfinding, sizeof(__pyx_k_python_pathfinding), 0, 0, 1, 1},
  {0, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {0, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {0, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {0, __pyx_k_recreate_self, sizeof(__pyx_k_recreate_self), 0, 0, 1, 1},
  {0, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {0, __pyx_k_reduce___locals_recreate_self, sizeof(__pyx_k_reduce___locals_recreate_self), 0, 0, 1, 1},
  {0, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {0, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {0, __pyx_k_reset_state, sizeof(__pyx_k_reset_state), 0, 0, 1, 1},
  {0, __pyx_k_reversed, sizeof(__pyx_k_reversed), 0, 0, 1, 1},
  {0, __pyx_k_rolls, sizeof(__pyx_k_rolls), 0, 0, 1, 1},
  {0, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {0, __pyx_k_self_ball_pos_self_locked_nodes, sizeof(__pyx_k_self_ball_pos_self_locked_nodes), 0, 0, 1, 0},
  {0, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {0, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {0, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {0, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
  {0, __pyx_k_steps, sizeof(__pyx_k_steps), 0, 0, 1, 1},
  {0, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {0, __pyx_k_table, sizeof(__pyx_k_table), 0, 0, 1, 1},
  {0, __pyx_k_target, sizeof(__pyx_k_target), 0, 0, 1, 1},
  {0, __pyx_k_team, sizeof(__pyx_k_team), 0, 0, 1, 1},
  {0, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, __pyx_k_trr, sizeof(__pyx_k_trr), 0, 0, 1, 1},
  {0, __pyx_k_up, sizeof(__pyx_k_up), 0, 0, 1, 1},
  {0, __pyx_k_used_skills, sizeof(__pyx_k_used_skills), 0, 0, 1, 1},
  {0, __pyx_k_weather, sizeof(__pyx_k_weather), 0, 0, 1, 1},
  {0, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {0, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {0, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  #else
  {&__pyx_n_s_DODGE, __pyx_k_DODGE, sizeof(__pyx_k_DODGE), 0, 0, 1, 1},
  {&__pyx_n_s_JUMP_UP, __pyx_k_JUMP_UP, sizeof(__pyx_k_JUMP_UP), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s_POURING_RAIN, __pyx_k_POURING_RAIN, sizeof(__pyx_k_POURING_RAIN), 0, 0, 1, 1},
  {&__pyx_n_s_Path, __pyx_k_Path, sizeof(__pyx_k_Path), 0, 0, 1, 1},
  {&__pyx_n_s_Path___reduce, __pyx_k_Path___reduce, sizeof(__pyx_k_Path___reduce), 0, 0, 1, 1},
  {&__pyx_n_s_Path_get_last_step, __pyx_k_Path_get_last_step, sizeof(__pyx_k_Path_get_last_step), 0, 0, 1, 1},
  {&__pyx_n_s_Path_is_empty, __pyx_k_Path_is_empty, sizeof(__pyx_k_Path_is_empty), 0, 0, 1, 1},
  {&__pyx_kp_u_Path_target, __pyx_k_Path_target, sizeof(__pyx_k_Path_target), 0, 1, 0, 0},
  {&__pyx_n_s_Pathfinder, __pyx_k_Pathfinder, sizeof(__pyx_k_Pathfinder), 0, 0, 1, 1},
  {&__pyx_n_s_Pathfinder___reduce_cython, __pyx_k_Pathfinder___reduce_cython, sizeof(__pyx_k_Pathfinder___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_Pathfinder___setstate_cython, __pyx_k_Pathfinder___setstate_cython, sizeof(__pyx_k_Pathfinder___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_Pathfinder_get_path, __pyx_k_Pathfinder_get_path, sizeof(__pyx_k_Pathfinder_get_path), 0, 0, 1, 1},
  {&__pyx_n_s_Pathfinder_get_paths, __pyx_k_Pathfinder_get_paths, sizeof(__pyx_k_Pathfinder_get_paths), 0, 0, 1, 1},
  {&__pyx_n_s_STUNTY, __pyx_k_STUNTY, sizeof(__pyx_k_STUNTY), 0, 0, 1, 1},
  {&__pyx_n_s_SURE_FEET, __pyx_k_SURE_FEET, sizeof(__pyx_k_SURE_FEET), 0, 0, 1, 1},
  {&__pyx_n_s_SURE_HANDS, __pyx_k_SURE_HANDS, sizeof(__pyx_k_SURE_HANDS), 0, 0, 1, 1},
  {&__pyx_n_s_Skill, __pyx_k_Skill, sizeof(__pyx_k_Skill), 0, 0, 1, 1},
  {&__pyx_n_s_Square, __pyx_k_Square, sizeof(__pyx_k_Square), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_WeatherType, __pyx_k_WeatherType, sizeof(__pyx_k_WeatherType), 0, 0, 1, 1},
  {&__pyx_kp_u__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 0},
  {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {&__pyx_n_s__31, __pyx_k__31, sizeof(__pyx_k__31), 0, 0, 1, 1},
  {&__pyx_kp_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
  {&__pyx_kp_u__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
  {&__pyx_n_s__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 0, 1, 1},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_allow_team_reroll, __pyx_k_allow_team_reroll, sizeof(__pyx_k_allow_team_reroll), 0, 0, 1, 1},
  {&__pyx_n_s_alter_state, __pyx_k_alter_state, sizeof(__pyx_k_alter_state), 0, 0, 1, 1},
  {&__pyx_n_s_arena, __pyx_k_arena, sizeof(__pyx_k_arena), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {&__pyx_n_s_attacker, __pyx_k_attacker, sizeof(__pyx_k_attacker), 0, 0, 1, 1},
  {&__pyx_n_s_blitz, __pyx_k_blitz, sizeof(__pyx_k_blitz), 0, 0, 1, 1},
  {&__pyx_n_s_block_dice, __pyx_k_block_dice, sizeof(__pyx_k_block_dice), 0, 0, 1, 1},
  {&__pyx_kp_u_block_dice_2, __pyx_k_block_dice_2, sizeof(__pyx_k_block_dice_2), 0, 1, 0, 0},
  {&__pyx_n_s_board, __pyx_k_board, sizeof(__pyx_k_board), 0, 0, 1, 1},
  {&__pyx_n_s_botbowl, __pyx_k_botbowl, sizeof(__pyx_k_botbowl), 0, 0, 1, 1},
  {&__pyx_n_s_botbowl_core_forward_model, __pyx_k_botbowl_core_forward_model, sizeof(__pyx_k_botbowl_core_forward_model), 0, 0, 1, 1},
  {&__pyx_n_s_botbowl_core_model, __pyx_k_botbowl_core_model, sizeof(__pyx_k_botbowl_core_model), 0, 0, 1, 1},
  {&__pyx_kp_s_botbowl_core_pathfinding_cython, __pyx_k_botbowl_core_pathfinding_cython, sizeof(__pyx_k_botbowl_core_pathfinding_cython), 0, 0, 1, 0},
  {&__pyx_n_s_botbowl_core_pathfinding_cython_2, __pyx_k_botbowl_core_pathfinding_cython_2, sizeof(__pyx_k_botbowl_core_pathfinding_cython_2), 0, 0, 1, 1},
  {&__pyx_n_s_botbowl_core_table, __pyx_k_botbowl_core_table, sizeof(__pyx_k_botbowl_core_table), 0, 0, 1, 1},
  {&__pyx_n_s_can_block, __pyx_k_can_block, sizeof(__pyx_k_can_block), 0, 0, 1, 1},
  {&__pyx_n_s_can_catch, __pyx_k_can_catch, sizeof(__pyx_k_can_catch), 0, 0, 1, 1},
  {&__pyx_n_s_can_foul, __pyx_k_can_foul, sizeof(__pyx_k_can_foul), 0, 0, 1, 1},
  {&__pyx_n_s_can_handoff, __pyx_k_can_handoff, sizeof(__pyx_k_can_handoff), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_core, __pyx_k_core, sizeof(__pyx_k_core), 0, 0, 1, 1},
  {&__pyx_n_s_defender, __pyx_k_defender, sizeof(__pyx_k_defender), 0, 0, 1, 1},
  {&__pyx_n_s_directly_to_adjacent, __pyx_k_directly_to_adjacent, sizeof(__pyx_k_directly_to_adjacent), 0, 0, 1, 1},
  {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
  {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
  {&__pyx_n_s_finder, __pyx_k_finder, sizeof(__pyx_k_finder), 0, 0, 1, 1},
  {&__pyx_n_s_forward_model, __pyx_k_forward_model, sizeof(__pyx_k_forward_model), 0, 0, 1, 1},
  {&__pyx_n_s_foul, __pyx_k_foul, sizeof(__pyx_k_foul), 0, 0, 1, 1},
  {&__pyx_n_s_foul_roll, __pyx_k_foul_roll, sizeof(__pyx_k_foul_roll), 0, 0, 1, 1},
  {&__pyx_kp_u_foul_roll_2, __pyx_k_foul_roll_2, sizeof(__pyx_k_foul_roll_2), 0, 1, 0, 0},
  {&__pyx_n_s_from_position, __pyx_k_from_position, sizeof(__pyx_k_from_position), 0, 0, 1, 1},
  {&__pyx_n_s_game, __pyx_k_game, sizeof(__pyx_k_game), 0, 0, 1, 1},
  {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
  {&__pyx_n_s_get_adjacent_squares, __pyx_k_get_adjacent_squares, sizeof(__pyx_k_get_adjacent_squares), 0, 0, 1, 1},
  {&__pyx_n_s_get_ag, __pyx_k_get_ag, sizeof(__pyx_k_get_ag), 0, 0, 1, 1},
  {&__pyx_n_s_get_all_paths, __pyx_k_get_all_paths, sizeof(__pyx_k_get_all_paths), 0, 0, 1, 1},
  {&__pyx_n_s_get_av, __pyx_k_get_av, sizeof(__pyx_k_get_av), 0, 0, 1, 1},
  {&__pyx_n_s_get_ball, __pyx_k_get_ball, sizeof(__pyx_k_get_ball), 0, 0, 1, 1},
  {&__pyx_n_s_get_ball_carrier, __pyx_k_get_ball_carrier, sizeof(__pyx_k_get_ball_carrier), 0, 0, 1, 1},
  {&__pyx_n_s_get_catch_modifiers, __pyx_k_get_catch_modifiers, sizeof(__pyx_k_get_catch_modifiers), 0, 0, 1, 1},
  {&__pyx_n_s_get_last_step, __pyx_k_get_last_step, sizeof(__pyx_k_get_last_step), 0, 0, 1, 1},
  {&__pyx_n_s_get_opp_endzone_x, __pyx_k_get_opp_endzone_x, sizeof(__pyx_k_get_opp_endzone_x), 0, 0, 1, 1},
  {&__pyx_n_s_get_path, __pyx_k_get_path, sizeof(__pyx_k_get_path), 0, 0, 1, 1},
  {&__pyx_n_s_get_paths, __pyx_k_get_paths, sizeof(__pyx_k_get_paths), 0, 0, 1, 1},
  {&__pyx_n_s_get_players_on_pitch, __pyx_k_get_players_on_pitch, sizeof(__pyx_k_get_players_on_pitch), 0, 0, 1, 1},
  {&__pyx_n_s_get_safest_path, __pyx_k_get_safest_path, sizeof(__pyx_k_get_safest_path), 0, 0, 1, 1},
  {&__pyx_n_s_get_safest_path_to_endzone, __pyx_k_get_safest_path_to_endzone, sizeof(__pyx_k_get_safest_path_to_endzone), 0, 0, 1, 1},
  {&__pyx_n_s_get_stand_up_modifier, __pyx_k_get_stand_up_modifier, sizeof(__pyx_k_get_stand_up_modifier), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_handoff, __pyx_k_handoff, sizeof(__pyx_k_handoff), 0, 0, 1, 1},
  {&__pyx_n_s_handoff_roll, __pyx_k_handoff_roll, sizeof(__pyx_k_handoff_roll), 0, 0, 1, 1},
  {&__pyx_kp_u_handoff_roll_2, __pyx_k_handoff_roll_2, sizeof(__pyx_k_handoff_roll_2), 0, 1, 0, 0},
  {&__pyx_n_s_has_skill, __pyx_k_has_skill, sizeof(__pyx_k_has_skill), 0, 0, 1, 1},
  {&__pyx_n_s_has_tackle_zone, __pyx_k_has_tackle_zone, sizeof(__pyx_k_has_tackle_zone), 0, 0, 1, 1},
  {&__pyx_n_s_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {&__pyx_n_s_home_team, __pyx_k_home_team, sizeof(__pyx_k_home_team), 0, 0, 1, 1},
  {&__pyx_n_s_immutable_types, __pyx_k_immutable_types, sizeof(__pyx_k_immutable_types), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {&__pyx_n_s_is_empty, __pyx_k_is_empty, sizeof(__pyx_k_is_empty), 0, 0, 1, 1},
  {&__pyx_n_s_is_handoff_available, __pyx_k_is_handoff_available, sizeof(__pyx_k_is_handoff_available), 0, 0, 1, 1},
  {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_model, __pyx_k_model, sizeof(__pyx_k_model), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_num_assists_at, __pyx_k_num_assists_at, sizeof(__pyx_k_num_assists_at), 0, 0, 1, 1},
  {&__pyx_n_s_num_block_dice_at, __pyx_k_num_block_dice_at, sizeof(__pyx_k_num_block_dice_at), 0, 0, 1, 1},
  {&__pyx_n_s_num_gfis_left, __pyx_k_num_gfis_left, sizeof(__pyx_k_num_gfis_left), 0, 0, 1, 1},
  {&__pyx_n_s_num_moves_left, __pyx_k_num_moves_left, sizeof(__pyx_k_num_moves_left), 0, 0, 1, 1},
  {&__pyx_n_s_num_moves_used, __pyx_k_num_moves_used, sizeof(__pyx_k_num_moves_used), 0, 0, 1, 1},
  {&__pyx_n_s_on_ground, __pyx_k_on_ground, sizeof(__pyx_k_on_ground), 0, 0, 1, 1},
  {&__pyx_n_s_orig_ball, __pyx_k_orig_ball, sizeof(__pyx_k_orig_ball), 0, 0, 1, 1},
  {&__pyx_n_s_orig_player, __pyx_k_orig_player, sizeof(__pyx_k_orig_player), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_paths, __pyx_k_paths, sizeof(__pyx_k_paths), 0, 0, 1, 1},
  {&__pyx_n_s_pitch, __pyx_k_pitch, sizeof(__pyx_k_pitch), 0, 0, 1, 1},
  {&__pyx_n_s_player, __pyx_k_player, sizeof(__pyx_k_player), 0, 0, 1, 1},
  {&__pyx_n_s_position, __pyx_k_position, sizeof(__pyx_k_position), 0, 0, 1, 1},
  {&__pyx_n_s_prob, __pyx_k_prob, sizeof(__pyx_k_prob), 0, 0, 1, 1},
  {&__pyx_kp_u_prob_2, __pyx_k_prob_2, sizeof(__pyx_k_prob_2), 0, 1, 0, 0},
  {&__pyx_n_s_python_pathfinding, __pyx_k_python_pathfinding, sizeof(__pyx_k_python_pathfinding), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_recreate_self, __pyx_k_recreate_self, sizeof(__pyx_k_recreate_self), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce___locals_recreate_self, __pyx_k_reduce___locals_recreate_self, sizeof(__pyx_k_reduce___locals_recreate_self), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_reset_state, __pyx_k_reset_state, sizeof(__pyx_k_reset_state), 0, 0, 1, 1},
  {&__pyx_n_s_reversed, __pyx_k_reversed, sizeof(__pyx_k_reversed), 0, 0, 1, 1},
  {&__pyx_n_s_rolls, __pyx_k_rolls, sizeof(__pyx_k_rolls), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self_ball_pos_self_locked_nodes, __pyx_k_self_ball_pos_self_locked_nodes, sizeof(__pyx_k_self_ball_pos_self_locked_nodes), 0, 0, 1, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
  {&__pyx_n_s_steps, __pyx_k_steps, sizeof(__pyx_k_steps), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_table, __pyx_k_table, sizeof(__pyx_k_table), 0, 0, 1, 1},
  {&__pyx_n_s_target, __pyx_k_target, sizeof(__pyx_k_target), 0, 0, 1, 1},
  {&__pyx_n_s_team, __pyx_k_team, sizeof(__pyx_k_team), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_trr, __pyx_k_trr, sizeof(__pyx_k_trr), 0, 0, 1, 1},
  {&__pyx_n_s_up, __pyx_k_up, sizeof(__pyx_k_up), 0, 0, 1, 1},
  {&__pyx_n_s_used_skills, __pyx_k_used_skills, sizeof(__pyx_k_used_skills), 0, 0, 1, 1},
  {&__pyx_n_s_weather, __pyx_k_weather, sizeof(__pyx_k_weather), 0, 0, 1, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  #endif
  {0, 0, 0, 0, 0, 0, 0}
};
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_reversed = __Pyx_GetBuiltinName(__pyx_n_s_reversed); if (!__pyx_builtin_reversed) __PYX_ERR(0, 109, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 68, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":114
 *     def __reduce__(self):
 *         # Need custom reduce() because built in reduce() can't handle the c++ objects
 *         def recreate_self(steps, rolls, block_dice, foul_roll, handoff_roll, prob):             # <<<<<<<<<<<<<<
 *             path = Path()
 *             path._steps = steps
 */
  __pyx_tuple_ = PyTuple_Pack(7, __pyx_n_s_steps, __pyx_n_s_rolls, __pyx_n_s_block_dice, __pyx_n_s_foul_roll, __pyx_n_s_handoff_roll, __pyx_n_s_prob, __pyx_n_s_path); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_botbowl_core_pathfinding_cython, __pyx_n_s_recreate_self, 114, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 114, __pyx_L1_error)

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":13
 * """
 * 
 * import botbowl.core.table as table             # <<<<<<<<<<<<<<
 * import botbowl.core.model as model
 * import botbowl.core.forward_model as forward_model
 */
  __pyx_tuple__6 = PyTuple_Pack(3, __pyx_n_s_botbowl, __pyx_n_s_core, __pyx_n_s_table); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":14
 * 
 * import botbowl.core.table as table
 * import botbowl.core.model as model             # <<<<<<<<<<<<<<
 * import botbowl.core.forward_model as forward_model
 * from .python_pathfinding import _alter_state, _reset_state
 */
  __pyx_tuple__8 = PyTuple_Pack(3, __pyx_n_s_botbowl, __pyx_n_s_core, __pyx_n_s_model); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":15
 * import botbowl.core.table as table
 * import botbowl.core.model as model
 * import botbowl.core.forward_model as forward_model             # <<<<<<<<<<<<<<
 * from .python_pathfinding import _alter_state, _reset_state
 * import copy
 */
  __pyx_tuple__9 = PyTuple_Pack(3, __pyx_n_s_botbowl, __pyx_n_s_core, __pyx_n_s_forward_model); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":76
 *         self.foul_roll = None if n.get().foul_roll == 0 else n.get().foul_roll
 * 
 *     cpdef object get_last_step(self):             # <<<<<<<<<<<<<<
 *         if self._steps is None:
 *             return to_botbowl_Square( self.final_node.get().position )
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_botbowl_core_pathfinding_cython, __pyx_n_s_get_last_step, 76, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 76, __pyx_L1_error)

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":97
 *         return len(self.steps)
 * 
 *     def is_empty(self):             # <<<<<<<<<<<<<<
 *         return self.final_node.use_count() == 0
 * 
 */
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_botbowl_core_pathfinding_cython, __pyx_n_s_is_empty, 97, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 97, __pyx_L1_error)

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":112
 *         self._rolls = list(reversed(rolls))
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         # Need custom reduce() because built in reduce() can't handle the c++ objects
 *         def recreate_self(steps, rolls, block_dice, foul_roll, handoff_roll, prob):
 */
  __pyx_tuple__14 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_recreate_self, __pyx_n_s_recreate_self); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_botbowl_core_pathfinding_cython, __pyx_n_s_reduce, 112, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 112, __pyx_L1_error)

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":206
 *                     self.tzones[square.y][square.x] += 1
 * 
 *     cpdef get_path(self, object target):             # <<<<<<<<<<<<<<
 *         if type(target) == model.Square:
 *             self.target_square = from_botbowl_Square(target)
 */
  __pyx_tuple__16 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_target); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_botbowl_core_pathfinding_cython, __pyx_n_s_get_path, 206, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 206, __pyx_L1_error)

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":221
 *         return None
 * 
 *     cpdef object get_paths(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             Square start_square
 */
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_botbowl_core_pathfinding_cython, __pyx_n_s_get_paths, 221, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 221, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.ball_pos,self.locked_nodes,self.nodes,self.open_set,self.risky_sets,self.start_pos,self.target_square cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.ball_pos,self.locked_nodes,self.nodes,self.open_set,self.risky_sets,self.start_pos,self.target_square cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.ball_pos,self.locked_nodes,self.nodes,self.open_set,self.risky_sets,self.start_pos,self.target_square cannot be converted to a Python object for pickling"
 */
  __pyx_tuple__20 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":571
 * 
 * 
 * def get_safest_path(game, player, position, from_position=None, allow_team_reroll=False, num_moves_used=0, blitz=False):             # <<<<<<<<<<<<<<
 *     """
 *     :param game:
 */
  __pyx_tuple__22 = PyTuple_Pack(12, __pyx_n_s_game, __pyx_n_s_player, __pyx_n_s_position, __pyx_n_s_from_position, __pyx_n_s_allow_team_reroll, __pyx_n_s_num_moves_used, __pyx_n_s_blitz, __pyx_n_s_orig_player, __pyx_n_s_orig_ball, __pyx_n_s_can_handoff, __pyx_n_s_finder, __pyx_n_s_path); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_botbowl_core_pathfinding_cython, __pyx_n_s_get_safest_path, 571, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 571, __pyx_L1_error)
  __pyx_tuple__24 = PyTuple_Pack(4, ((PyObject *)Py_None), ((PyObject *)Py_False), ((PyObject *)__pyx_int_0), ((PyObject *)Py_False)); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":591
 * 
 * 
 * def get_safest_path_to_endzone(game, player, from_position=None, allow_team_reroll=False, num_moves_used=None):             # <<<<<<<<<<<<<<
 *     """
 *     :param game:
 */
  __pyx_tuple__25 = PyTuple_Pack(10, __pyx_n_s_game, __pyx_n_s_player, __pyx_n_s_from_position, __pyx_n_s_allow_team_reroll, __pyx_n_s_num_moves_used, __pyx_n_s_orig_player, __pyx_n_s_orig_ball, __pyx_n_s_x, __pyx_n_s_finder, __pyx_n_s_path); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_botbowl_core_pathfinding_cython, __pyx_n_s_get_safest_path_to_endzone, 591, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 591, __pyx_L1_error)
  __pyx_tuple__27 = PyTuple_Pack(3, ((PyObject *)Py_None), ((PyObject *)Py_False), ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":611
 * 
 * 
 * def get_all_paths(game, player, from_position=None, allow_team_reroll=False, num_moves_used=None, blitz=False):             # <<<<<<<<<<<<<<
 *     """
 *     :param game:
 */
  __pyx_tuple__28 = PyTuple_Pack(10, __pyx_n_s_game, __pyx_n_s_player, __pyx_n_s_from_position, __pyx_n_s_allow_team_reroll, __pyx_n_s_num_moves_used, __pyx_n_s_blitz, __pyx_n_s_orig_player, __pyx_n_s_orig_ball, __pyx_n_s_finder, __pyx_n_s_paths); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_botbowl_core_pathfinding_cython, __pyx_n_s_get_all_paths, 611, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 611, __pyx_L1_error)
  __pyx_tuple__30 = PyTuple_Pack(4, ((PyObject *)Py_None), ((PyObject *)Py_False), ((PyObject *)Py_None), ((PyObject *)Py_False)); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  #if CYTHON_USE_MODULE_STATE
  if (__Pyx_InitString(__pyx_string_tab[0], &__pyx_n_s_DODGE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[1], &__pyx_n_s_JUMP_UP) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[2], &__pyx_n_s_MemoryError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[3], &__pyx_n_s_POURING_RAIN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[4], &__pyx_n_s_Path) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[5], &__pyx_n_s_Path___reduce) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[6], &__pyx_n_s_Path_get_last_step) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[7], &__pyx_n_s_Path_is_empty) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[8], &__pyx_kp_u_Path_target) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[9], &__pyx_n_s_Pathfinder) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[10], &__pyx_n_s_Pathfinder___reduce_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[11], &__pyx_n_s_Pathfinder___setstate_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[12], &__pyx_n_s_Pathfinder_get_path) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[13], &__pyx_n_s_Pathfinder_get_paths) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[14], &__pyx_n_s_STUNTY) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[15], &__pyx_n_s_SURE_FEET) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[16], &__pyx_n_s_SURE_HANDS) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[17], &__pyx_n_s_Skill) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[18], &__pyx_n_s_Square) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[19], &__pyx_n_s_TypeError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[20], &__pyx_n_s_WeatherType) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[21], &__pyx_kp_u__10) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[22], &__pyx_kp_s__3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[23], &__pyx_n_s__31) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[24], &__pyx_kp_u__4) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[25], &__pyx_kp_u__5) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[26], &__pyx_n_s__7) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[27], &__pyx_n_s_add) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[28], &__pyx_n_s_allow_team_reroll) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[29], &__pyx_n_s_alter_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[30], &__pyx_n_s_arena) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[31], &__pyx_n_s_asyncio_coroutines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[32], &__pyx_n_s_attacker) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[33], &__pyx_n_s_blitz) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[34], &__pyx_n_s_block_dice) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[35], &__pyx_kp_u_block_dice_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[36], &__pyx_n_s_board) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[37], &__pyx_n_s_botbowl) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[38], &__pyx_n_s_botbowl_core_forward_model) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[39], &__pyx_n_s_botbowl_core_model) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[40], &__pyx_kp_s_botbowl_core_pathfinding_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[41], &__pyx_n_s_botbowl_core_pathfinding_cython_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[42], &__pyx_n_s_botbowl_core_table) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[43], &__pyx_n_s_can_block) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[44], &__pyx_n_s_can_catch) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[45], &__pyx_n_s_can_foul) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[46], &__pyx_n_s_can_handoff) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[47], &__pyx_n_s_cline_in_traceback) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[48], &__pyx_n_s_copy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[49], &__pyx_n_s_core) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[50], &__pyx_n_s_defender) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[51], &__pyx_n_s_directly_to_adjacent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[52], &__pyx_kp_u_disable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[53], &__pyx_kp_u_enable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[54], &__pyx_n_s_finder) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[55], &__pyx_n_s_forward_model) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[56], &__pyx_n_s_foul) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[57], &__pyx_n_s_foul_roll) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[58], &__pyx_kp_u_foul_roll_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[59], &__pyx_n_s_from_position) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[60], &__pyx_n_s_game) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[61], &__pyx_kp_u_gc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[62], &__pyx_n_s_get_adjacent_squares) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[63], &__pyx_n_s_get_ag) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[64], &__pyx_n_s_get_all_paths) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[65], &__pyx_n_s_get_av) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[66], &__pyx_n_s_get_ball) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[67], &__pyx_n_s_get_ball_carrier) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[68], &__pyx_n_s_get_catch_modifiers) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[69], &__pyx_n_s_get_last_step) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[70], &__pyx_n_s_get_opp_endzone_x) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[71], &__pyx_n_s_get_path) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[72], &__pyx_n_s_get_paths) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[73], &__pyx_n_s_get_players_on_pitch) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[74], &__pyx_n_s_get_safest_path) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[75], &__pyx_n_s_get_safest_path_to_endzone) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[76], &__pyx_n_s_get_stand_up_modifier) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[77], &__pyx_n_s_getstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[78], &__pyx_n_s_handoff) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[79], &__pyx_n_s_handoff_roll) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[80], &__pyx_kp_u_handoff_roll_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[81], &__pyx_n_s_has_skill) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[82], &__pyx_n_s_has_tackle_zone) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[83], &__pyx_n_s_height) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[84], &__pyx_n_s_home_team) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[85], &__pyx_n_s_immutable_types) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[86], &__pyx_n_s_import) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[87], &__pyx_n_s_initializing) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[88], &__pyx_n_s_is_coroutine) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[89], &__pyx_n_s_is_empty) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[90], &__pyx_n_s_is_handoff_available) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[91], &__pyx_kp_u_isenabled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[92], &__pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[93], &__pyx_n_s_model) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[94], &__pyx_n_s_name) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[95], &__pyx_n_s_num_assists_at) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[96], &__pyx_n_s_num_block_dice_at) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[97], &__pyx_n_s_num_gfis_left) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[98], &__pyx_n_s_num_moves_left) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[99], &__pyx_n_s_num_moves_used) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[100], &__pyx_n_s_on_ground) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[101], &__pyx_n_s_orig_ball) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[102], &__pyx_n_s_orig_player) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[103], &__pyx_n_s_path) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[104], &__pyx_n_s_paths) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[105], &__pyx_n_s_pitch) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[106], &__pyx_n_s_player) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[107], &__pyx_n_s_position) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[108], &__pyx_n_s_prob) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[109], &__pyx_kp_u_prob_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[110], &__pyx_n_s_python_pathfinding) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[111], &__pyx_n_s_pyx_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[112], &__pyx_n_s_pyx_vtable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[113], &__pyx_n_s_range) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[114], &__pyx_n_s_recreate_self) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[115], &__pyx_n_s_reduce) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[116], &__pyx_n_s_reduce___locals_recreate_self) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[117], &__pyx_n_s_reduce_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[118], &__pyx_n_s_reduce_ex) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[119], &__pyx_n_s_reset_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[120], &__pyx_n_s_reversed) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[121], &__pyx_n_s_rolls) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[122], &__pyx_n_s_self) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[123], &__pyx_kp_s_self_ball_pos_self_locked_nodes) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[124], &__pyx_n_s_setstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[125], &__pyx_n_s_setstate_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[126], &__pyx_n_s_spec) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[127], &__pyx_n_s_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[128], &__pyx_n_s_steps) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[129], &__pyx_kp_s_stringsource) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[130], &__pyx_n_s_table) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[131], &__pyx_n_s_target) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[132], &__pyx_n_s_team) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[133], &__pyx_n_s_test) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[134], &__pyx_n_s_trr) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[135], &__pyx_n_s_up) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[136], &__pyx_n_s_used_skills) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[137], &__pyx_n_s_weather) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[138], &__pyx_n_s_width) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[139], &__pyx_n_s_x) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[140], &__pyx_n_s_y) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  #if !CYTHON_USE_MODULE_STATE
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_7botbowl_4core_11pathfinding_18cython_pathfinding_Path = &__pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Path;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Path.set_node = (void (*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_set_node;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Path.get_last_step = (PyObject *(*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *, int __pyx_skip_dispatch))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_get_last_step;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Path._collect_path = (void (*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Path *))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path__collect_path;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Path_spec, NULL); if (unlikely(!__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path)) __PYX_ERR(0, 62, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Path_spec, __pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  #else
  __pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path = &__pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Path;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path->tp_dictoffset && __pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path, __pyx_vtabptr_7botbowl_4core_11pathfinding_18cython_pathfinding_Path) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Path, (PyObject *) __pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __pyx_vtabptr_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder = &__pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder.get_path = (PyObject *(*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_get_path;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder.get_paths = (PyObject *(*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, int __pyx_skip_dispatch))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_get_paths;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder._get_pickup_target = (int (*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, node_ns::Square))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__get_pickup_target;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder._get_handoff_target = (int (*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, PyObject *))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__get_handoff_target;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder._get_dodge_target = (int (*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, node_ns::Square, node_ns::Square))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__get_dodge_target;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder._expand = (void (*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder._expand_node = (__pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr (*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr, node_ns::Square, int))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand_node;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder._expand_move_node = (__pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr (*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr, double, node_ns::Square))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand_move_node;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder._expand_foul_node = (__pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr (*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr, node_ns::Square, PyObject *))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand_foul_node;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder._expand_handoff_node = (__pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr (*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr, node_ns::Square))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand_handoff_node;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder._expand_block_node = (__pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr (*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr, double, node_ns::Square, PyObject *))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand_block_node;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder._expand_stand_up = (__pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr (*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expand_stand_up;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder._best = (__pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr (*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__best;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder._dominant = (__pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr (*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr, __pyx_t_7botbowl_4core_11pathfinding_18cython_pathfinding_NodePtr))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__dominant;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder._clear = (void (*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__clear;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder._prepare_nodes = (void (*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__prepare_nodes;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder._expansion = (void (*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__expansion;
  __pyx_vtable_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder._collect_paths = (PyObject *(*)(struct __pyx_obj_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder *))__pyx_f_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder__collect_paths;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder_spec, NULL); if (unlikely(!__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder)) __PYX_ERR(0, 148, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder_spec, __pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  #else
  __pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder = &__pyx_type_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder->tp_dictoffset && __pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder, __pyx_vtabptr_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Pathfinder, (PyObject *) __pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_cython_pathfinding(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_cython_pathfinding},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "cython_pathfinding",
      __pyx_k_Author_Mattias_Bermell_Year_202, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcython_pathfinding(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcython_pathfinding(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_cython_pathfinding(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_cython_pathfinding(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_cython_pathfinding(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  node_ns::Square __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'cython_pathfinding' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cython_pathfinding", __pyx_methods, __pyx_k_Author_Mattias_Bermell_Year_202, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_cython_pathfinding(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_botbowl__core__pathfinding__cython_pathfinding) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "botbowl.core.pathfinding.cython_pathfinding")) {
      if (unlikely((PyDict_SetItemString(modules, "botbowl.core.pathfinding.cython_pathfinding", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":13
 * """
 * 
 * import botbowl.core.table as table             # <<<<<<<<<<<<<<
 * import botbowl.core.model as model
 * import botbowl.core.forward_model as forward_model
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_botbowl_core_table, __pyx_tuple__6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_table, __pyx_t_2) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":14
 * 
 * import botbowl.core.table as table
 * import botbowl.core.model as model             # <<<<<<<<<<<<<<
 * import botbowl.core.forward_model as forward_model
 * from .python_pathfinding import _alter_state, _reset_state
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_botbowl_core_model, __pyx_tuple__8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_model, __pyx_t_2) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":15
 * import botbowl.core.table as table
 * import botbowl.core.model as model
 * import botbowl.core.forward_model as forward_model             # <<<<<<<<<<<<<<
 * from .python_pathfinding import _alter_state, _reset_state
 * import copy
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_botbowl_core_forward_model, __pyx_tuple__9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_forward_model, __pyx_t_2) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":16
 * import botbowl.core.model as model
 * import botbowl.core.forward_model as forward_model
 * from .python_pathfinding import _alter_state, _reset_state             # <<<<<<<<<<<<<<
 * import copy
 * 
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_alter_state);
  __Pyx_GIVEREF(__pyx_n_s_alter_state);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_alter_state);
  __Pyx_INCREF(__pyx_n_s_reset_state);
  __Pyx_GIVEREF(__pyx_n_s_reset_state);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_reset_state);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_python_pathfinding, __pyx_t_2, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_alter_state); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_alter_state, __pyx_t_2) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_reset_state); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reset_state, __pyx_t_2) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":17
 * import botbowl.core.forward_model as forward_model
 * from .python_pathfinding import _alter_state, _reset_state
 * import copy             # <<<<<<<<<<<<<<
 * 
 * from libcpp.map cimport map as mapcpp
 */
  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_n_s_copy, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copy, __pyx_t_3) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":39
 * 
 * cdef Square DIRECTIONS[8]
 * DIRECTIONS[0] = Square(-1,-1)             # <<<<<<<<<<<<<<
 * DIRECTIONS[1] = Square(-1, 0)
 * DIRECTIONS[2] = Square(-1, 1)
 */
  try {
    __pyx_t_4 = node_ns::Square(-1, -1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 39, __pyx_L1_error)
  }
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_DIRECTIONS[0]) = __pyx_t_4;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":40
 * cdef Square DIRECTIONS[8]
 * DIRECTIONS[0] = Square(-1,-1)
 * DIRECTIONS[1] = Square(-1, 0)             # <<<<<<<<<<<<<<
 * DIRECTIONS[2] = Square(-1, 1)
 * DIRECTIONS[3] = Square( 0,-1)
 */
  try {
    __pyx_t_4 = node_ns::Square(-1, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 40, __pyx_L1_error)
  }
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_DIRECTIONS[1]) = __pyx_t_4;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":41
 * DIRECTIONS[0] = Square(-1,-1)
 * DIRECTIONS[1] = Square(-1, 0)
 * DIRECTIONS[2] = Square(-1, 1)             # <<<<<<<<<<<<<<
 * DIRECTIONS[3] = Square( 0,-1)
 * DIRECTIONS[4] = Square( 0, 1)
 */
  try {
    __pyx_t_4 = node_ns::Square(-1, 1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 41, __pyx_L1_error)
  }
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_DIRECTIONS[2]) = __pyx_t_4;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":42
 * DIRECTIONS[1] = Square(-1, 0)
 * DIRECTIONS[2] = Square(-1, 1)
 * DIRECTIONS[3] = Square( 0,-1)             # <<<<<<<<<<<<<<
 * DIRECTIONS[4] = Square( 0, 1)
 * DIRECTIONS[5] = Square( 1,-1)
 */
  try {
    __pyx_t_4 = node_ns::Square(0, -1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 42, __pyx_L1_error)
  }
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_DIRECTIONS[3]) = __pyx_t_4;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":43
 * DIRECTIONS[2] = Square(-1, 1)
 * DIRECTIONS[3] = Square( 0,-1)
 * DIRECTIONS[4] = Square( 0, 1)             # <<<<<<<<<<<<<<
 * DIRECTIONS[5] = Square( 1,-1)
 * DIRECTIONS[6] = Square( 1, 0)
 */
  try {
    __pyx_t_4 = node_ns::Square(0, 1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 43, __pyx_L1_error)
  }
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_DIRECTIONS[4]) = __pyx_t_4;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":44
 * DIRECTIONS[3] = Square( 0,-1)
 * DIRECTIONS[4] = Square( 0, 1)
 * DIRECTIONS[5] = Square( 1,-1)             # <<<<<<<<<<<<<<
 * DIRECTIONS[6] = Square( 1, 0)
 * DIRECTIONS[7] = Square( 1, 1)
 */
  try {
    __pyx_t_4 = node_ns::Square(1, -1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 44, __pyx_L1_error)
  }
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_DIRECTIONS[5]) = __pyx_t_4;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":45
 * DIRECTIONS[4] = Square( 0, 1)
 * DIRECTIONS[5] = Square( 1,-1)
 * DIRECTIONS[6] = Square( 1, 0)             # <<<<<<<<<<<<<<
 * DIRECTIONS[7] = Square( 1, 1)
 * 
 */
  try {
    __pyx_t_4 = node_ns::Square(1, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 45, __pyx_L1_error)
  }
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_DIRECTIONS[6]) = __pyx_t_4;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":46
 * DIRECTIONS[5] = Square( 1,-1)
 * DIRECTIONS[6] = Square( 1, 0)
 * DIRECTIONS[7] = Square( 1, 1)             # <<<<<<<<<<<<<<
 * 
 * cdef int agi_table[11]
 */
  try {
    __pyx_t_4 = node_ns::Square(1, 1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 46, __pyx_L1_error)
  }
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_DIRECTIONS[7]) = __pyx_t_4;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":49
 * 
 * cdef int agi_table[11]
 * agi_table[0] = 6             # <<<<<<<<<<<<<<
 * agi_table[1] = 6
 * agi_table[2] = 5
 */
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_agi_table[0]) = 6;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":50
 * cdef int agi_table[11]
 * agi_table[0] = 6
 * agi_table[1] = 6             # <<<<<<<<<<<<<<
 * agi_table[2] = 5
 * agi_table[3] = 4
 */
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_agi_table[1]) = 6;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":51
 * agi_table[0] = 6
 * agi_table[1] = 6
 * agi_table[2] = 5             # <<<<<<<<<<<<<<
 * agi_table[3] = 4
 * agi_table[4] = 3
 */
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_agi_table[2]) = 5;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":52
 * agi_table[1] = 6
 * agi_table[2] = 5
 * agi_table[3] = 4             # <<<<<<<<<<<<<<
 * agi_table[4] = 3
 * agi_table[5] = 2
 */
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_agi_table[3]) = 4;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":53
 * agi_table[2] = 5
 * agi_table[3] = 4
 * agi_table[4] = 3             # <<<<<<<<<<<<<<
 * agi_table[5] = 2
 * agi_table[6] = 1
 */
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_agi_table[4]) = 3;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":54
 * agi_table[3] = 4
 * agi_table[4] = 3
 * agi_table[5] = 2             # <<<<<<<<<<<<<<
 * agi_table[6] = 1
 * agi_table[7] = 1
 */
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_agi_table[5]) = 2;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":55
 * agi_table[4] = 3
 * agi_table[5] = 2
 * agi_table[6] = 1             # <<<<<<<<<<<<<<
 * agi_table[7] = 1
 * agi_table[8] = 1
 */
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_agi_table[6]) = 1;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":56
 * agi_table[5] = 2
 * agi_table[6] = 1
 * agi_table[7] = 1             # <<<<<<<<<<<<<<
 * agi_table[8] = 1
 * agi_table[9] = 1
 */
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_agi_table[7]) = 1;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":57
 * agi_table[6] = 1
 * agi_table[7] = 1
 * agi_table[8] = 1             # <<<<<<<<<<<<<<
 * agi_table[9] = 1
 * agi_table[10] = 1
 */
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_agi_table[8]) = 1;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":58
 * agi_table[7] = 1
 * agi_table[8] = 1
 * agi_table[9] = 1             # <<<<<<<<<<<<<<
 * agi_table[10] = 1
 * 
 */
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_agi_table[9]) = 1;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":59
 * agi_table[8] = 1
 * agi_table[9] = 1
 * agi_table[10] = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_7botbowl_4core_11pathfinding_18cython_pathfinding_agi_table[10]) = 1;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":76
 *         self.foul_roll = None if n.get().foul_roll == 0 else n.get().foul_roll
 * 
 *     cpdef object get_last_step(self):             # <<<<<<<<<<<<<<
 *         if self._steps is None:
 *             return to_botbowl_Square( self.final_node.get().position )
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_1get_last_step, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Path_get_last_step, NULL, __pyx_n_s_botbowl_core_pathfinding_cython_2, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path->tp_dict, __pyx_n_s_get_last_step, __pyx_t_3) < 0) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":97
 *         return len(self.steps)
 * 
 *     def is_empty(self):             # <<<<<<<<<<<<<<
 *         return self.final_node.use_count() == 0
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_5is_empty, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Path_is_empty, NULL, __pyx_n_s_botbowl_core_pathfinding_cython_2, __pyx_d, ((PyObject *)__pyx_codeobj__13)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path->tp_dict, __pyx_n_s_is_empty, __pyx_t_3) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":112
 *         self._rolls = list(reversed(rolls))
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         # Need custom reduce() because built in reduce() can't handle the c++ objects
 *         def recreate_self(steps, rolls, block_dice, foul_roll, handoff_roll, prob):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_4Path_7__reduce__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Path___reduce, NULL, __pyx_n_s_botbowl_core_pathfinding_cython_2, __pyx_d, ((PyObject *)__pyx_codeobj__15)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path->tp_dict, __pyx_n_s_reduce, __pyx_t_3) < 0) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":141
 * 
 * # Make the forward model treat Path as an immutable type.
 * forward_model.immutable_types.add(Path)             # <<<<<<<<<<<<<<
 * 
 * cdef Path create_path(NodePtr node):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_forward_model); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_immutable_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_add); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Path)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":206
 *                     self.tzones[square.y][square.x] += 1
 * 
 *     cpdef get_path(self, object target):             # <<<<<<<<<<<<<<
 *         if type(target) == model.Square:
 *             self.target_square = from_botbowl_Square(target)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_5get_path, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Pathfinder_get_path, NULL, __pyx_n_s_botbowl_core_pathfinding_cython_2, __pyx_d, ((PyObject *)__pyx_codeobj__17)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder->tp_dict, __pyx_n_s_get_path, __pyx_t_2) < 0) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder);

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":221
 *         return None
 * 
 *     cpdef object get_paths(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             Square start_square
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_7get_paths, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Pathfinder_get_paths, NULL, __pyx_n_s_botbowl_core_pathfinding_cython_2, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder->tp_dict, __pyx_n_s_get_paths, __pyx_t_2) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7botbowl_4core_11pathfinding_18cython_pathfinding_Pathfinder);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.ball_pos,self.locked_nodes,self.nodes,self.open_set,self.risky_sets,self.start_pos,self.target_square cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_9__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Pathfinder___reduce_cython, NULL, __pyx_n_s_botbowl_core_pathfinding_cython_2, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.ball_pos,self.locked_nodes,self.nodes,self.open_set,self.risky_sets,self.start_pos,self.target_square cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.ball_pos,self.locked_nodes,self.nodes,self.open_set,self.risky_sets,self.start_pos,self.target_square cannot be converted to a Python object for pickling"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_10Pathfinder_11__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Pathfinder___setstate_cython, NULL, __pyx_n_s_botbowl_core_pathfinding_cython_2, __pyx_d, ((PyObject *)__pyx_codeobj__21)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":571
 * 
 * 
 * def get_safest_path(game, player, position, from_position=None, allow_team_reroll=False, num_moves_used=0, blitz=False):             # <<<<<<<<<<<<<<
 *     """
 *     :param game:
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_1get_safest_path, 0, __pyx_n_s_get_safest_path, NULL, __pyx_n_s_botbowl_core_pathfinding_cython_2, __pyx_d, ((PyObject *)__pyx_codeobj__23)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__24);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_safest_path, __pyx_t_2) < 0) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":591
 * 
 * 
 * def get_safest_path_to_endzone(game, player, from_position=None, allow_team_reroll=False, num_moves_used=None):             # <<<<<<<<<<<<<<
 *     """
 *     :param game:
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_3get_safest_path_to_endzone, 0, __pyx_n_s_get_safest_path_to_endzone, NULL, __pyx_n_s_botbowl_core_pathfinding_cython_2, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__27);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_safest_path_to_endzone, __pyx_t_2) < 0) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":611
 * 
 * 
 * def get_all_paths(game, player, from_position=None, allow_team_reroll=False, num_moves_used=None, blitz=False):             # <<<<<<<<<<<<<<
 *     """
 *     :param game:
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7botbowl_4core_11pathfinding_18cython_pathfinding_5get_all_paths, 0, __pyx_n_s_get_all_paths, NULL, __pyx_n_s_botbowl_core_pathfinding_cython_2, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__30);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_all_paths, __pyx_t_2) < 0) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "botbowl/core/pathfinding/cython_pathfinding.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * 
 * """
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init botbowl.core.pathfinding.cython_pathfinding", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init botbowl.core.pathfinding.cython_pathfinding");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#if _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]);
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
    Py_DECREF(argstuple);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
#ifdef __Pyx_CyFunction_USED
        if (__Pyx_IsCyOrPyCFunction(func))
#else
        if (PyCFunction_Check(func))
#endif
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
                return __Pyx_PyObject_CallMethO(func, NULL);
            }
        }
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (PyCFunction_Check(func))
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
                return __Pyx_PyObject_CallMethO(func, args[0]);
            }
        }
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    #if CYTHON_VECTORCALL
    vectorcallfunc f = _PyVectorcall_Function(func);
    if (f) {
        return f(func, args, (size_t)nargs, kwargs);
    }
    #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
    if (__Pyx_CyFunction_CheckExact(func)) {
        __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
        if (f) return f(func, args, (size_t)nargs, kwargs);
    }
    #endif
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    CYTHON_UNUSED_VAR(clineno);
    CYTHON_UNUSED_VAR(lineno);
    CYTHON_UNUSED_VAR(filename);
    CYTHON_MAYBE_UNUSED_VAR(nogil);
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;  // error
            return kwvalues[i];
        }
    }
    return NULL;  // not found (no exception set)
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        if (unlikely(PyTuple_GET_SIZE(kw) == 0))
            return 1;
        if (!kw_allowed) {
            key = PyTuple_GET_ITEM(kw, 0);
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < PyTuple_GET_SIZE(kw); pos++) {
            key = PyTuple_GET_ITEM(kw, pos);
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        if (kwds_is_tuple) {
            if (pos >= PyTuple_GET_SIZE(kwds)) break;
            key = PyTuple_GET_ITEM(kwds, pos);
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg = NULL;
    return __Pyx_PyObject_FastCall(func, (&arg)+1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    (void) spec;
    (void) type;
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FetchCommonType */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    PyObject *abi_module = PyImport_AddModule((char*) __PYX_ABI_MODULE_NAME);
    if (!abi_module) return NULL;
    Py_INCREF(abi_module);
    return abi_module;
}
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    (void) module;
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
        PyList_SET_ITEM(fromlist, 0, marker);
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    cf->m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#ifdef _Py_TPFLAGS_HAVE_VECTORCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    (void) module;
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (unlikely(size == 0)) {
            return PyLong_FromLong(-intval);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (unlikely(size == 0)) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
        
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (unlikely(size == 0)) {
            return __Pyx_NewRef(op1);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double b = __pyx_PyFloat_AsDouble(op2);
#else
        double b = PyFloat_AS_DOUBLE(op2);
#endif
            double result;
            
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY ||  CYTHON_COMPILING_IN_LIMITED_API
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_TRUE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* RaiseUnboundLocalError */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n = PyTuple_GET_SIZE(bases);
    for (i = 1; i < n; i++)
    {
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
            return -1;
        }
        if (dictoffset == 0 && b->tp_dictoffset)
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "extension type '%.200s' has no __dict__ slot, "
                "but base type '" __Pyx_FMT_TYPENAME "' has: "
                "either add 'cdef dict __dict__' to the extension type "
                "or add '__slots__ = [...]' to the base type",
                type_name, b_name);
            __Pyx_DECREF_TypeName(b_name);
            return -1;
        }
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyTypeObject *type, void *vtable) {
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (unlikely(!ob))
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(PyObject_SetAttr((PyObject *) type, __pyx_n_s_pyx_vtable, ob) < 0))
#else
    if (unlikely(PyDict_SetItem(type->tp_dict, __pyx_n_s_pyx_vtable, ob) < 0))
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* MergeVTables */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (size_t)(base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* SetupReduce */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                #if CYTHON_COMPILING_IN_LIMITED_API
                module = PyImport_ImportModuleLevelObject(
                    name, empty_dict, empty_dict, from_list, 1);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                #endif
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            #if CYTHON_COMPILING_IN_LIMITED_API
            module = PyImport_ImportModuleLevelObject(
                name, empty_dict, empty_dict, from_list, level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__7;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    Py_ssize_t i, nparts;
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (likely(module))
        return module;
    return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__10);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if CYTHON_COMPILING_IN_LIMITED_API
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    if (c_line) {
        (void) __pyx_cfilenm;
        c_line = __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    _PyTraceback_Add(funcname, filename, c_line ? -c_line : py_line);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XSETREF(name, __Pyx_NewRef(__pyx_n_s__31));
    }
    return name;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#if _MSV_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
